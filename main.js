/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var _=Object.defineProperty;var W=Object.getOwnPropertyDescriptor;var K=Object.getOwnPropertyNames;var V=Object.prototype.hasOwnProperty;var Y=(C,i)=>{for(var e in i)_(C,e,{get:i[e],enumerable:!0})},J=(C,i,e,t)=>{if(i&&typeof i=="object"||typeof i=="function")for(let s of K(i))!V.call(C,s)&&s!==e&&_(C,s,{get:()=>i[s],enumerable:!(t=W(i,s))||t.enumerable});return C};var Z=C=>J(_({},"__esModule",{value:!0}),C);var Q={};Y(Q,{default:()=>z});module.exports=Z(Q);var g=require("obsidian");var j=require("obsidian"),I=class{constructor(i,e="claude-3-5-haiku-20241022"){this.apiUrl="https://api.anthropic.com/v1/messages";this.apiKey=i,this.model=e}async extractTasks(i,e){if(!this.apiKey)return console.warn("No Claude API key found, using fallback extraction"),this.fallbackExtraction(i,e);try{let t=this.buildPrompt(i,e),s=await this.callClaude(t);return this.parseResponse(s,i)}catch(t){return console.error("Claude task extraction failed, using fallback",t),this.fallbackExtraction(i,e)}}buildPrompt(i,e){let t=typeof i=="string"?i:JSON.stringify(i);return`You are an expert at extracting actionable tasks from meeting transcripts. Analyze the following meeting transcript and extract all tasks, action items, and commitments.

MEETING SUBJECT: ${e}

TRANSCRIPT:
${t.substring(0,15e3)} ${t.length>15e3?"... [truncated]":""}

Extract the following information and return as JSON:

1. **tasks** - Array of task objects with:
   - description: Clear, actionable task description
   - assignee: Person responsible (use actual names from the meeting, default "Unassigned" if unclear)
   - priority: "high", "medium", or "low" based on urgency/importance
   - confidence: 0-100 score of how confident you are this is a real task
   - dueDate: ISO date string if mentioned (optional)
   - category: engineering/product/design/documentation/communication/other
   - context: Brief context about why this task exists
   - rawText: The original text that led to this task

2. **summary** - 2-3 sentence meeting summary

3. **participants** - Array of participant names (extract all names mentioned)

4. **meetingDate** - ISO date string (use today if not specified)

5. **keyDecisions** - Array of important decisions made

6. **nextSteps** - Array of next step objects with:
   - description: Clear description of the next step
   - assignee: Person responsible (match with participants when possible, default "Unassigned")
   - priority: "high", "medium", or "low" based on importance

Guidelines:
- Focus on explicit commitments ("I will", "I'll", "Let me", "I can", "[Name] will")
- Include tasks with deadlines or time constraints
- Capture follow-ups and action items
- Look for "Next steps", "Action items", "To do", "Follow up" sections
- Check for Google Meet's AI-suggested action items or next steps (often at the end)
- Include any items listed under "Suggested next steps" or "Recommended actions"
- Ignore general discussions or past work
- Be conservative - only extract clear tasks
- Only use names that actually appear in the transcript
- Default assignee should be "Unassigned" for unclear ownership

Return ONLY valid JSON, no other text:`}async callClaude(i){var e,t,s,a,n;try{let o=await(0,j.requestUrl)({url:this.apiUrl,method:"POST",headers:{"x-api-key":this.apiKey,"anthropic-version":"2023-06-01","content-type":"application/json"},body:JSON.stringify({model:this.model,messages:[{role:"user",content:i}],max_tokens:4e3,temperature:.2,system:"You are a task extraction assistant. Always respond with valid JSON only, no markdown or explanations."})});if((s=(t=(e=o.json)==null?void 0:e.content)==null?void 0:t[0])!=null&&s.text)return o.json.content[0].text;throw new Error("Invalid Claude API response structure")}catch(o){throw((a=o.response)==null?void 0:a.status)===401?console.error("Invalid Claude API key"):((n=o.response)==null?void 0:n.status)===429&&console.error("Claude API rate limit exceeded"),o}}parseResponse(i,e){try{let t=i.match(/\{[\s\S]*\}/);if(!t)throw new Error("No JSON found in response");let s=JSON.parse(t[0]),a=this.normalizeTasks(s.tasks||[]),n=s.participants||[],o=this.normalizeNextSteps(s.nextSteps||[],n),{deduplicatedTasks:l,deduplicatedNextSteps:r}=this.deduplicateTasksAndNextSteps(a,o);return{tasks:l,summary:s.summary||"Meeting transcript processed",participants:n,meetingDate:this.parseDate(s.meetingDate)||new Date,keyDecisions:s.keyDecisions||[],nextSteps:r,confidence:this.calculateOverallConfidence(l)}}catch(t){return console.error("Failed to parse Claude response",t),console.debug("Raw response:",i),this.fallbackExtraction(e,"")}}normalizeTasks(i){return i.map(e=>({description:this.cleanDescription(e.description||""),assignee:e.assignee||"Unassigned",priority:this.normalizePriority(e.priority),confidence:this.normalizeConfidence(e.confidence),dueDate:e.dueDate,category:e.category||"other",context:e.context,rawText:e.rawText})).filter(e=>e.description&&e.description.length>5)}cleanDescription(i){return i.replace(/^[-*•]\s*/,"").replace(/\s+/g," ").trim()}normalizePriority(i){let e=String(i).toLowerCase();return e.includes("high")||e==="3"?"high":e.includes("low")||e==="1"?"low":"medium"}normalizeConfidence(i){let e=Number(i);return isNaN(e)?75:Math.min(100,Math.max(0,e))}parseDate(i){if(!i)return null;let e=new Date(i);return isNaN(e.getTime())?null:e}deduplicateTasks(i){let e=new Set;return i.filter(t=>{let s=`${t.description.toLowerCase()}-${t.assignee.toLowerCase()}`;return e.has(s)?!1:(e.add(s),!0)})}normalizeNextSteps(i,e){return Array.isArray(i)?i.map(t=>{if(typeof t=="string"){let s=this.extractAssigneeFromText(t,e);return{description:this.cleanDescription(t),assignee:s||"Unassigned",priority:"medium"}}else if(typeof t=="object"&&t!==null)return{description:this.cleanDescription(t.description||String(t)),assignee:t.assignee||"Unassigned",priority:this.normalizePriority(t.priority||"medium")};return null}).filter(t=>t!==null&&t.description.length>5):[]}extractAssigneeFromText(i,e){for(let s of e)if(i.toLowerCase().includes(s.toLowerCase()))return s;let t=[/^([A-Z][a-z]+(?:\s+[A-Z][a-z]+)?)\s+(?:will|to|should|needs to)/,/(?:assigned to|owner:|assignee:)\s*([A-Z][a-z]+(?:\s+[A-Z][a-z]+)?)/i];for(let s of t){let a=i.match(s);if(a&&a[1])return a[1]}return null}deduplicateTasksAndNextSteps(i,e){let t=new Set(i.map(a=>a.description.toLowerCase().replace(/[^\w\s]/g,""))),s=e.filter(a=>{let n=a.description.toLowerCase().replace(/[^\w\s]/g,"");for(let o of t){let l=n.split(/\s+/),r=o.split(/\s+/);if(l.filter(h=>r.includes(h)).length>l.length*.6&&l.length>2)return!1}return!0});return{deduplicatedTasks:i,deduplicatedNextSteps:s}}calculateOverallConfidence(i){if(i.length===0)return 0;let e=i.reduce((t,s)=>t+s.confidence,0);return Math.round(e/i.length)}fallbackExtraction(i,e){let t=[],s=i.split(`
`),a=[/(?:I will|I'll|I can|Let me|I need to|I should|I have to)\s+(.+)/i,/(?:TODO|Action|Task|Follow.?up):\s*(.+)/i,/(?:Next steps?|Action items?):\s*(.+)/i,/\[ \]\s+(.+)/,/^[-*•]\s*(.+(?:will|need to|should|must).+)/i];for(let r of s)for(let c of a){let h=r.match(c);h&&t.push({description:this.cleanDescription(h[1]),assignee:"Unassigned",priority:"medium",confidence:50,category:"other",rawText:r})}let n=[],o=/(?:with|from|to|cc|attendees?:)\s*([A-Z][a-z]+(?:\s+[A-Z][a-z]+)*)/gi,l;for(;(l=o.exec(i))!==null;)n.includes(l[1])||n.push(l[1]);return{tasks:this.deduplicateTasks(t),summary:e||"Meeting notes",participants:n,meetingDate:new Date,keyDecisions:[],nextSteps:[],confidence:30}}async extractActionItems(i,e){if(!this.apiKey)return console.warn("No Claude API key found, using fallback extraction"),this.fallbackExtraction(i,e);try{let t=this.buildActionItemPrompt(i,e),s=await this.callClaude(t);return this.parseResponse(s,i)}catch(t){return console.error("Claude action item extraction failed, using fallback",t),this.fallbackExtraction(i,e)}}buildActionItemPrompt(i,e){let t=typeof i=="string"?i:JSON.stringify(i);return`You are an expert at extracting actionable tasks from emails. Analyze the following email and extract all action items, tasks, and commitments.

EMAIL SUBJECT: ${e}

EMAIL CONTENT:
${t.substring(0,15e3)} ${t.length>15e3?"... [truncated]":""}

Extract the following information and return as JSON:

1. **tasks** - Array of task objects with:
   - description: Clear, actionable task description
   - assignee: Person responsible (extract from email, default "Unassigned" if unclear)
   - priority: "high", "medium", or "low" based on urgency/importance
   - confidence: 0-100 score of how confident you are this is a real task
   - dueDate: ISO date string if mentioned (optional)
   - category: engineering/product/design/documentation/communication/other
   - context: Brief context about why this task exists
   - rawText: The original text that led to this task

2. **summary** - 2-3 sentence summary of the email's main purpose

3. **participants** - Array of people mentioned in the email (sender, recipients, mentioned names)

4. **meetingDate** - ISO date string (use email date or today)

5. **keyDecisions** - Array of important decisions or key points from the email

6. **nextSteps** - Array of next step objects with:
   - description: Clear description of the next step
   - assignee: Person responsible (default "Unassigned")
   - priority: "high", "medium", or "low" based on importance

Guidelines for action items:
- Look for explicit requests ("Can you...", "Please...", "Could you...")
- Identify commitments ("I will...", "I'll...", "Let me...")
- Extract deadlines and time constraints
- Include follow-up items ("Need to...", "Should...", "Must...")
- Capture FYI items that require action
- Pay attention to urgent or important markers
- Extract tasks from forwarded emails or threads
- Identify implicit tasks (things that need to happen based on context)

IMPORTANT:
- For assignee matching, look for names in signatures, "From:" fields, and email addresses
- Match assignees with participants when possible
- If multiple people are mentioned, assign to the most relevant person
- Set confidence lower (40-60) if assignee is unclear
- Return ONLY valid JSON, no markdown formatting
- Priority should reflect urgency indicators like "ASAP", "urgent", "by EOD", etc.

Return your response as a single JSON object.`}};var P=require("obsidian"),L="task-dashboard-view",G=class extends P.ItemView{constructor(e,t){super(e);this.showOnlyMyTasks=!0;this.allTasks=[];this.isLoading=!1;this.filterCounts=null;this.badgeElements=new Map;this.updateCountsDebounceTimer=null;this.component=new P.Component,this.plugin=t,this.showOnlyMyTasks=!0}getViewType(){return L}getDisplayText(){return"Task Dashboard"}getIcon(){return"check-square"}async onOpen(){console.log("[TaskDashboard] onOpen called"),await this.refresh()}async onClose(){this.updateCountsDebounceTimer&&(clearTimeout(this.updateCountsDebounceTimer),this.updateCountsDebounceTimer=null),this.component.unload()}async refresh(){console.log("[TaskDashboard] refresh called"),console.log("[TaskDashboard] containerEl:",this.containerEl),console.log("[TaskDashboard] containerEl.children:",this.containerEl.children);let e=this.containerEl.children[1];console.log("[TaskDashboard] container:",e),e.empty(),e.addClass("dashboard"),e.addClass("markdown-preview-view"),this.showLoadingState(e);try{await this.loadAndDisplayDashboard(e)}catch(t){console.error("[TaskDashboard] Failed to refresh dashboard:",t),this.showErrorState(e,t)}}showLoadingState(e){let t=e.createDiv("dashboard-loading");t.createEl("div",{cls:"loading-spinner"}),t.createEl("p",{text:"Loading tasks...",cls:"loading-text"})}showErrorState(e,t){e.empty();let s=e.createDiv("dashboard-error");s.createEl("h2",{text:"\u26A0\uFE0F Error Loading Dashboard"}),s.createEl("p",{text:"Failed to load tasks. Please try refreshing."}),s.createEl("pre",{text:(t==null?void 0:t.message)||"Unknown error",cls:"error-details"});let a=s.createEl("button",{text:"\u{1F504} Retry",cls:"dashboard-control-btn"});a.onclick=()=>this.refresh()}async loadAndDisplayDashboard(e){var l,r;e.empty();let t=e.createDiv("dashboard-header");t.createEl("h1",{text:"TASK DASHBOARD",cls:"title"});let s=t.createDiv("dashboard-controls");if((r=(l=this.plugin)==null?void 0:l.settings)!=null&&r.dashboardMyName){let c=s.createEl("button",{text:this.showOnlyMyTasks?"\u{1F465} Show All Tasks":"\u{1F464} Show My Tasks",cls:"dashboard-control-btn dashboard-toggle-btn"});c.onclick=()=>{this.showOnlyMyTasks=!this.showOnlyMyTasks,c.textContent=this.showOnlyMyTasks?"\u{1F465} Show All Tasks":"\u{1F464} Show My Tasks",this.updateFilterCounts(!0),this.updateTaskDisplay()}}let a=s.createEl("button",{text:"\u{1F504} Refresh",cls:"dashboard-control-btn dashboard-refresh-btn"});a.onclick=()=>this.refresh();let n=e.createDiv("dashboard-filters");this.createFilterButtons(n);try{this.isLoading=!0,this.allTasks=await this.loadTasks()}catch(c){console.error("Failed to load tasks:",c),new P.Notice("Failed to load tasks. Check console for details."),this.allTasks=[]}finally{this.isLoading=!1}this.updateFilterCounts(!0);let o=this.getFilteredTasks();await this.displayTasks(e,o),this.applyDashboardStyles()}createBadgeElement(e,t){if(e===0)return null;let s=document.createElement("span");return s.className="filter-badge",s.setAttribute("data-filter-type",t),s.textContent=e.toString(),s}createFilterButtons(e){let t=e.createDiv("filter-group");this.badgeElements.clear();let s=this.getCurrentFilterCounts();this.filterCounts=s,[{label:"High Priority",filter:"high",active:!0,dataAttr:"high",count:s.high},{label:"Medium Priority",filter:"medium",dataAttr:"medium",count:s.medium},{label:"Low Priority",filter:"low",dataAttr:"low",count:s.low},{label:"Past Due",filter:"overdue",dataAttr:"overdue",count:s.overdue},{label:"Due Today",filter:"today",dataAttr:"due-today",count:s.today},{label:"Due This Week",filter:"week",dataAttr:"due-week",count:s.week},{label:"Completed",filter:"completed",dataAttr:"completed",count:s.completed}].forEach(n=>{let o=t.createEl("button",{cls:n.active?"filter-btn active":"filter-btn"});o.setAttribute("data-filter",n.dataAttr);let l=o.createEl("span",{text:n.label,cls:"filter-btn-label"}),r=this.createBadgeElement(n.count,n.dataAttr);r&&(o.appendChild(r),this.badgeElements.set(n.filter,r)),o.onclick=()=>{o.hasClass("active")?(o.removeClass("active"),this.applyFilter("all")):(t.querySelectorAll(".filter-btn").forEach(c=>{c instanceof HTMLElement&&c.removeClass("active")}),o.addClass("active"),this.applyFilter(n.filter))}})}async loadTasks(){console.log("[TaskDashboard] loadTasks called");let e=[],t=this.app.vault.getMarkdownFiles();console.log("[TaskDashboard] Found",t.length,"markdown files");for(let s of t){let a=await this.extractTasksFromFile(s);e.push(...a)}return console.log("[TaskDashboard] Loaded",e.length,"total tasks"),e}async extractTasksFromFile(e){let t=[];try{let a=(await this.app.vault.read(e)).split(`
`);for(let n=0;n<a.length;n++){let o=a[n],l=o.match(/^[\s-]*\[([ x])\]\s+(.+)/);if(l){let r=l[1]==="x",c=l[2],h="medium";o.includes("\u23EB")||o.includes("\u{1F53C}")||o.includes("\u{1F534}")||c.includes("High Priority")?h="high":o.includes("\u23EC")||o.includes("\u{1F53D}")||o.includes("\u{1F7E2}")||c.includes("Low Priority")?h="low":o.includes("\u{1F7E1}")&&(h="medium");let d=c.match(/\[\[@?([^\]]+)\]\]/),u=d?d[1]:"Unassigned",m=c.match(/📅\s*(\d{4}-\d{2}-\d{2})/),p=m?m[1]:"",b=c.match(/⚠️\s*(\d+)%/),y=b?parseInt(b[1]):100,w=c.match(/#(\w+)/),k=w?w[1]:"general",T=c.replace(/\[\[@?[^\]]+\]\]/g,"").replace(/📅\s*\d{4}-\d{2}-\d{2}/g,"").replace(/[🔴🟡🟢]/g,"").replace(/⚠️\s*\d+%/g,"").replace(/#\w+/g,"").trim();t.push({text:T,completed:r,assignee:u,dueDate:p,priority:h,confidence:y,category:k,file:e,line:n,rawLine:o})}}}catch(s){console.error(`Failed to read file ${e.path}:`,s)}return t}async displayTasks(e,t){let s=t.filter(l=>l.priority==="high"&&!l.completed),a=t.filter(l=>l.priority==="medium"&&!l.completed),n=t.filter(l=>l.priority==="low"&&!l.completed),o=t.filter(l=>l.completed);if(s.length>0&&await this.createTaskSection(e,"\u{1F534} High Priority",s,"high"),a.length>0&&await this.createTaskSection(e,"\u{1F7E1} Medium Priority",a,"medium"),n.length>0&&await this.createTaskSection(e,"\u{1F7E2} Low Priority",n,"low"),o.length>0){let l=e.createDiv("task-section completed-section"),r=l.createEl("h2",{text:`\u2705 Completed (${o.length})`,cls:"collapsible"}),c=l.createDiv("task-grid collapsed");r.onclick=()=>{c.hasClass("collapsed")?(c.removeClass("collapsed"),r.removeClass("collapsed")):(c.addClass("collapsed"),r.addClass("collapsed"))},await this.createTaskCards(c,o,"completed")}}async createTaskSection(e,t,s,a){let n=e.createDiv(`task-section ${a}-section`);n.createEl("h2",{text:`${t} (${s.length})`});let o=n.createDiv("task-grid");await this.createTaskCards(o,s,a)}async createTaskCards(e,t,s){let a={};t.forEach(o=>{let l=o.assignee||"Unassigned";a[l]||(a[l]=[]),a[l].push(o)});let n=Object.keys(a).sort((o,l)=>{var c,h,d;let r=(d=(h=(c=this.plugin)==null?void 0:c.settings)==null?void 0:h.dashboardMyName)==null?void 0:d.toLowerCase();if(r){let u=r.split(",").map(w=>w.trim()).filter(w=>w.length>0),m=o.toLowerCase(),p=l.toLowerCase(),b=u.some(w=>m.includes(w)),y=u.some(w=>p.includes(w));if(b&&!y)return-1;if(y&&!b)return 1}return o.localeCompare(l)});for(let o of n){let l=e.createDiv(`task-card ${s}-card`),c=l.createDiv("card-header").createEl("h3",{text:`\u{1F464} ${o}`,cls:"card-assignee-title"}),h=l.createEl("ul",{cls:"task-list"});for(let d of a[o]){let u=h.createEl("li",{cls:"task-list-item"}),m=u.createEl("input",{type:"checkbox",cls:"task-checkbox"});m.checked=d.completed,m.onclick=async()=>{await this.toggleTask(d,m.checked,u)};let p=u.createDiv("task-content"),b=p.createEl("span",{text:d.text,cls:d.completed?"task-text completed clickable":"task-text clickable"});b.onclick=async v=>{v.stopPropagation();let D=this.app.workspace.getLeaf(!1);await D.openFile(d.file);let S=D.view;if(S&&"editor"in S){let $=S.editor;$&&($.setCursor(d.line,0),$.scrollIntoView({from:{line:Math.max(0,d.line-5),ch:0},to:{line:Math.min($.lineCount()-1,d.line+5),ch:0}}))}},b.title=`Click to open: ${d.file.basename}`;let y=p.createDiv("task-meta"),w=y.createEl("span",{cls:"task-source clickable",text:`\u{1F4C4} ${d.file.basename}`});if(w.onclick=b.onclick,w.title=`Click to open: ${d.file.basename}`,d.dueDate){let v=y.createEl("span",{cls:"task-due"});v.setText(`\u{1F4C5} ${d.dueDate}`),!d.completed&&new Date(d.dueDate)<new Date&&v.addClass("overdue")}d.category&&y.createEl("span",{text:`#${d.category}`,cls:"task-category"}),d.confidence&&d.confidence<70&&y.createEl("span",{text:`\u26A0\uFE0F ${d.confidence}%`,cls:"task-confidence"});let k=y.createEl("a",{text:"\u{1F4C4}",cls:"task-source",title:d.file.basename});k.onclick=v=>{v.preventDefault(),this.app.workspace.getLeaf().openFile(d.file)};let T=u.createEl("button",{cls:"task-edit-btn",text:"\u270F\uFE0F",title:"Edit task"}),x=u.createEl("div",{cls:"task-edit-controls"});x.style.display="none";let f=!1;if(T.onclick=()=>{f=!f,x.style.display=f?"block":"none",T.classList.toggle("active",f)},x){let v=x.createDiv("task-edit-row"),D=v.createEl("select",{cls:"task-priority-select"});["high","medium","low"].forEach(E=>{let A=D.createEl("option",{text:E,value:E});E===d.priority&&(A.selected=!0)}),D.onchange=async()=>{await this.updateTaskPriority(d,D.value,u)};let S=v.createEl("input",{type:"text",cls:"task-assignee-input",placeholder:"Assign to...",value:d.assignee}),$=v.createEl("button",{text:"\u2713",cls:"task-save-btn",title:"Save assignee"});$.onclick=async()=>{await this.updateTaskAssignee(d,S.value,u)}}}}}async toggleTask(e,t,s){try{let n=(await this.app.vault.read(e.file)).split(`
`);t?n[e.line]=e.rawLine.replace("[ ]","[x]"):n[e.line]=e.rawLine.replace("[x]","[ ]"),await this.app.vault.modify(e.file,n.join(`
`)),e.completed=t,s&&t?(s.style.transition="opacity 0.3s ease-out, transform 0.3s ease-out",s.style.opacity="0",s.style.transform="translateX(-10px)",setTimeout(()=>{s.remove();let o=s.closest(".task-card");o&&o.querySelectorAll(".task-list-item").length===0&&(o.style.transition="opacity 0.3s ease-out",o.style.opacity="0",setTimeout(()=>{o.remove();let r=o.closest(".task-section");r&&r.querySelectorAll(".task-card").length===0&&(r.style.display="none")},300)),this.updateStatsOnly(),this.updateFilterCounts()},300)):t||setTimeout(()=>this.refresh(),500)}catch(a){console.error("Failed to toggle task:",a),new P.Notice("Failed to update task. Please try again.")}}async updateTaskPriority(e,t,s){try{let n=(await this.app.vault.read(e.file)).split(`
`),o=n[e.line];o=o.replace(/🔴\s*/g,"").replace(/🟡\s*/g,"").replace(/🟢\s*/g,""),o=o.replace(/High Priority/gi,"").replace(/Medium Priority/gi,"").replace(/Low Priority/gi,"");let l=o.match(/^([\s-]*)\[([x ]?)\]\s*/);if(l){let r=l[0],c=o.substring(r.length),h="";t==="high"?h="\u{1F534} ":t==="medium"?h="\u{1F7E1} ":t==="low"&&(h="\u{1F7E2} "),n[e.line]=r+h+c.trim()}if(await this.app.vault.modify(e.file,n.join(`
`)),e.priority=t,s){let r=s.closest(".task-card"),c=r==null?void 0:r.closest(".task-section");if(r&&c){let h=this.containerEl.children[1],d="";t==="high"?d="high-priority":t==="medium"?d="medium-priority":d="low-priority";let u=h.querySelector(`.task-section.${d}`);u&&u!==c&&(s.style.transition="opacity 0.3s ease-out",s.style.opacity="0",setTimeout(()=>{s.remove(),r.querySelectorAll(".task-list-item").length===0&&(r.style.transition="opacity 0.3s ease-out",r.style.opacity="0",setTimeout(()=>r.remove(),300));let p=e.assignee,b=Array.from(u.querySelectorAll(".task-card")).find(w=>{var T;let k=(T=w.querySelector("h3"))==null?void 0:T.textContent;return k==null?void 0:k.includes(p)});b||(b=u.createDiv(`task-card ${t}-card`),b.createDiv("card-header").createEl("h3",{text:`\u{1F464} ${p}`,cls:"card-assignee-title"}),b.createEl("ul",{cls:"task-list"}));let y=b.querySelector(".task-list");if(y){let w=y.createEl("li",{cls:"task-list-item"});w.innerHTML=s.innerHTML;let k=w.querySelector(".task-checkbox");k&&(k.onclick=async()=>{await this.toggleTask(e,k.checked,w)}),w.style.opacity="0",setTimeout(()=>{w.style.transition="opacity 0.3s ease-in",w.style.opacity="1"},10)}this.updateStatsOnly()},300))}}else setTimeout(()=>this.refresh(),500)}catch(a){console.error("Failed to update task priority:",a),new P.Notice("Failed to update priority. Please try again.")}}async updateTaskAssignee(e,t,s){try{let n=(await this.app.vault.read(e.file)).split(`
`),o=n[e.line];o=o.replace(/\[\[@?[^\]]+\]\]/g,"");let l=o.match(/📅\s*\d{4}-\d{2}-\d{2}/);l&&l.index!==void 0?o=o.substring(0,l.index)+`[[@${t.trim()}]] `+o.substring(l.index):o=o.trim()+` [[@${t.trim()}]]`,n[e.line]=o,await this.app.vault.modify(e.file,n.join(`
`));let r=e.assignee;if(e.assignee=t.trim(),s&&r!==e.assignee){let c=s.closest(".task-card"),h=c==null?void 0:c.closest(".task-section");c&&h&&(s.style.transition="opacity 0.3s ease-out",s.style.opacity="0",setTimeout(()=>{s.remove(),c.querySelectorAll(".task-list-item").length===0&&(c.style.transition="opacity 0.3s ease-out",c.style.opacity="0",setTimeout(()=>c.remove(),300));let u=Array.from(h.querySelectorAll(".task-card")).find(p=>{var y;let b=(y=p.querySelector("h3"))==null?void 0:y.textContent;return b==null?void 0:b.includes(e.assignee)});if(!u){let p=e.priority||"medium";u=h.createDiv(`task-card ${p}-card`),u.createDiv("card-header").createEl("h3",{text:`\u{1F464} ${e.assignee}`,cls:"card-assignee-title"}),u.createEl("ul",{cls:"task-list"})}let m=u.querySelector(".task-list");if(m){let p=m.createEl("li",{cls:"task-list-item"});p.innerHTML=s.innerHTML;let b=p.querySelector(".task-metadata");b&&(b.innerHTML=b.innerHTML.replace(/👤\s*[^<]*/g,`\u{1F464} ${e.assignee}`));let y=p.querySelector(".task-checkbox");y&&(y.onclick=async()=>{await this.toggleTask(e,y.checked,p)});let w=p.querySelector(".edit-button");if(w){let k=p.querySelector(".edit-container");if(k){w.onclick=()=>{k.style.display=k.style.display==="none"?"flex":"none"};let T=k.querySelector("select");T&&(T.onchange=async()=>{await this.updateTaskPriority(e,T.value,p)});let x=k.querySelector("button"),f=k.querySelector("input");x&&f&&(x.onclick=async()=>{await this.updateTaskAssignee(e,f.value,p)})}}p.style.opacity="0",setTimeout(()=>{p.style.transition="opacity 0.3s ease-in",p.style.opacity="1"},10)}this.updateStatsOnly()},300))}else s||setTimeout(()=>this.refresh(),500)}catch(a){console.error("Failed to update task assignee:",a),new P.Notice("Failed to update assignee. Please try again.")}}applyFilter(e){this.containerEl.querySelectorAll(".task-section").forEach(s=>{if(!(s instanceof HTMLElement))return;let a=s.querySelectorAll(".task-card"),n=!1;a.forEach(o=>{var r,c,h,d;if(!(o instanceof HTMLElement))return;let l=!0;switch(e){case"all":l=!0;break;case"high":l=o.hasClass("high-card");break;case"medium":l=o.hasClass("medium-card");break;case"low":l=o.hasClass("low-card");break;case"completed":l=o.hasClass("completed-card");break;case"mine":let u=o.querySelector("h3");if(u&&u.textContent){let m=u.textContent.replace(/^👤\s*/,"").trim().toLowerCase(),p=(d=(h=(c=(r=this.plugin)==null?void 0:r.settings)==null?void 0:c.dashboardMyName)==null?void 0:h.toLowerCase())==null?void 0:d.trim();p?l=p.split(",").map(y=>y.trim()).filter(y=>y.length>0).some(y=>m===y||m.includes(y)):l=!1}else l=!1;break;case"overdue":l=this.hasTasksOverdue(o);break;case"today":l=this.hasTasksDueToday(o);break;case"week":l=this.hasTasksDueThisWeek(o);break}o.style.display=l?"block":"none",l&&(n=!0)}),s.style.display=n?"block":"none"})}hasTasksDueToday(e){var n;if(e.classList.contains("completed-card"))return!1;let t=e.querySelectorAll(".task-list-item"),s=new Date;s.setHours(0,0,0,0);let a=new Date(s);a.setDate(a.getDate()+1);for(let o of Array.from(t)){let l=o.querySelector(".task-checkbox");if(l&&l.checked)continue;let r=o.querySelector(".task-due");if(r){let c=(n=r.textContent)==null?void 0:n.match(/\d{4}-\d{2}-\d{2}/);if(c){let h=new Date(c[0]+"T00:00:00");if(h.setHours(0,0,0,0),h>=s&&h<a)return!0}}}return!1}hasTasksDueThisWeek(e){var n;if(e.classList.contains("completed-card"))return!1;let t=e.querySelectorAll(".task-list-item"),s=new Date;s.setHours(0,0,0,0);let a=new Date(s);a.setDate(a.getDate()+7);for(let o of Array.from(t)){let l=o.querySelector(".task-checkbox");if(l&&l.checked)continue;let r=o.querySelector(".task-due");if(r){let c=(n=r.textContent)==null?void 0:n.match(/\d{4}-\d{2}-\d{2}/);if(c){let h=new Date(c[0]+"T00:00:00");if(h.setHours(0,0,0,0),h>=s&&h<=a)return!0}}}return!1}hasTasksOverdue(e){var a;if(e.classList.contains("completed-card"))return!1;let t=e.querySelectorAll(".task-list-item"),s=new Date;s.setHours(0,0,0,0);for(let n of Array.from(t)){let o=n.querySelector(".task-checkbox");if(o&&o.checked)continue;let l=n.querySelector(".task-due");if(l){let r=(a=l.textContent)==null?void 0:a.match(/\d{4}-\d{2}-\d{2}/);if(r){let c=new Date(r[0]+"T00:00:00");if(c.setHours(0,0,0,0),c<s)return!0}}}return!1}updateStatsOnly(){}getFilteredTasks(){var e,t;if(this.showOnlyMyTasks&&((t=(e=this.plugin)==null?void 0:e.settings)!=null&&t.dashboardMyName)){let s=this.plugin.settings.dashboardMyName.split(",").map(a=>a.toLowerCase().trim()).filter(a=>a.length>0);return s.length===0?this.allTasks:this.allTasks.filter(a=>{let n=a.assignee.toLowerCase().trim();return s.some(o=>n===o||n.includes(o))})}return this.allTasks}calculateFilterCounts(e){let t=new Date,s=new Date(t.getFullYear(),t.getMonth(),t.getDate()),a=new Date(s.getTime()+1440*60*1e3-1),n=new Date(s.getTime()+10080*60*1e3),o={high:0,medium:0,low:0,today:0,week:0,overdue:0,completed:0};for(let l of e){if(!l.completed&&(l.priority==="high"?o.high++:l.priority==="medium"?o.medium++:l.priority==="low"&&o.low++,l.dueDate)){let r=new Date(l.dueDate);r<s?o.overdue++:r>=s&&r<=a&&o.today++,r>=s&&r<=n&&o.week++}l.completed&&o.completed++}return o}getCurrentFilterCounts(){let e=this.getFilteredTasks();return this.calculateFilterCounts(e)}updateFilterCountsImmediate(){let e=this.getCurrentFilterCounts();this.filterCounts=e;let t=(s,a)=>{let n=this.badgeElements.get(s);if(n)a>0?(n.textContent=a.toString(),n.style.display="inline-flex"):n.style.display="none";else if(a>0){let o=this.containerEl.querySelector(`[data-filter="${this.getDataAttr(s)}"]`);if(o){let l=this.createBadgeElement(a,this.getDataAttr(s));l&&(o.appendChild(l),this.badgeElements.set(s,l))}}};t("high",e.high),t("medium",e.medium),t("low",e.low),t("overdue",e.overdue),t("today",e.today),t("week",e.week),t("completed",e.completed)}updateFilterCounts(e=!1){if(e){this.updateFilterCountsImmediate();return}this.updateCountsDebounceTimer&&clearTimeout(this.updateCountsDebounceTimer),this.updateCountsDebounceTimer=setTimeout(()=>{this.updateFilterCountsImmediate(),this.updateCountsDebounceTimer=null},150)}getDataAttr(e){return{high:"high",medium:"medium",low:"low",overdue:"overdue",today:"due-today",week:"due-week",completed:"completed"}[e]||e}async updateTaskDisplay(){try{let e=this.containerEl.children[1];e.querySelectorAll(".task-section").forEach(a=>a.remove());let s=this.getFilteredTasks();await this.displayTasks(e,s)}catch(e){console.error("Failed to update task display:",e),new P.Notice("Failed to update display. Please refresh.")}}applyDashboardStyles(){}};var N=require("obsidian"),O=class{constructor(i,e){this.getStoredToken=i;this.saveToken=e;this.credentials=null;this.token=null;this.baseUrl="https://gmail.googleapis.com/gmail/v1";this.authBaseUrl="https://accounts.google.com/o/oauth2";this.tokenUrl="https://oauth2.googleapis.com/token";this.redirectUri="http://localhost";this.token=this.getStoredToken()}setCredentials(i,e,t){this.redirectUri=t||"http://localhost",this.credentials={client_id:i,client_secret:e,redirect_uri:this.redirectUri}}getAuthorizationUrl(){if(!this.credentials)throw new Error("Credentials not set. Please configure Google OAuth in settings.");let i=new URLSearchParams({client_id:this.credentials.client_id,redirect_uri:this.redirectUri,response_type:"code",scope:"https://www.googleapis.com/auth/gmail.readonly",access_type:"offline",prompt:"consent"});return`${this.authBaseUrl}/auth?${i.toString()}`}async exchangeCodeForToken(i){if(!this.credentials)throw new Error("Credentials not set");try{let e=await(0,N.requestUrl)({url:this.tokenUrl,method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({code:i,client_id:this.credentials.client_id,client_secret:this.credentials.client_secret,redirect_uri:this.redirectUri,grant_type:"authorization_code"}).toString()});if(e.status===200){let t=e.json;this.token={access_token:t.access_token,refresh_token:t.refresh_token,expiry_date:Date.now()+t.expires_in*1e3,token_type:t.token_type,scope:t.scope},await this.saveToken(this.token)}else throw new Error(`Failed to exchange code: ${e.text}`)}catch(e){throw console.error("OAuth token exchange failed:",e),e}}async refreshAccessToken(){var i;if(!this.credentials||!((i=this.token)!=null&&i.refresh_token))throw new Error("Cannot refresh token: missing credentials or refresh token");try{let e=await(0,N.requestUrl)({url:this.tokenUrl,method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({refresh_token:this.token.refresh_token,client_id:this.credentials.client_id,client_secret:this.credentials.client_secret,grant_type:"refresh_token"}).toString()});if(e.status===200){let t=e.json;this.token={...this.token,access_token:t.access_token,expiry_date:Date.now()+t.expires_in*1e3},await this.saveToken(this.token)}else throw new Error(`Failed to refresh token: ${e.text}`)}catch(e){throw console.error("Token refresh failed:",e),e}}async ensureValidToken(){if(!this.token)throw new Error("Not authenticated. Please authenticate with Gmail first.");this.token.expiry_date&&Date.now()>=this.token.expiry_date-6e4&&(console.log("[Gmail] Token expired or expiring soon, refreshing..."),await this.refreshAccessToken())}async makeGmailRequest(i,e={}){await this.ensureValidToken();let t=i.startsWith("http")?i:`${this.baseUrl}${i}`;try{let s=await(0,N.requestUrl)({url:t,method:e.method||"GET",headers:{Authorization:`Bearer ${this.token.access_token}`,"Content-Type":"application/json",...e.headers},...e});return s.status===401?(console.log("[Gmail] Received 401, attempting token refresh..."),await this.refreshAccessToken(),(await(0,N.requestUrl)({url:t,method:e.method||"GET",headers:{Authorization:`Bearer ${this.token.access_token}`,"Content-Type":"application/json",...e.headers},...e})).json):s.json}catch(s){throw console.error(`Gmail API request failed: ${i}`,s),s}}async searchEmails(i,e=100,t=5,s=!0){try{console.log(`[Gmail] Searching with query: ${i}, max: ${e}`);let a=[],n,o=0,l=1;for(;o<e;){let d=Math.min(e-o,500),u=`/users/me/messages?q=${encodeURIComponent(i)}&maxResults=${d}`;n?(u+=`&pageToken=${n}`,console.log(`[Gmail] Fetching page ${l} with token: ${n.substring(0,10)}...`)):console.log(`[Gmail] Fetching page ${l} (first page), requesting ${d} messages`);let m=await this.makeGmailRequest(u);if(!m.messages||m.messages.length===0){if(o===0)return console.log("[Gmail] No messages found"),[];console.log(`[Gmail] No more messages on page ${l}`);break}if(a.push(...m.messages),o+=m.messages.length,console.log(`[Gmail] Page ${l}: Got ${m.messages.length} message IDs (total so far: ${o}/${e})`),m.nextPageToken&&o<e)n=m.nextPageToken,console.log("[Gmail] Next page token available, will fetch more..."),l++;else{m.nextPageToken?console.log(`[Gmail] Reached desired maxResults of ${e}`):console.log("[Gmail] No more pages available (no nextPageToken)");break}}if(console.log(`[Gmail] Total message IDs collected: ${a.length}`),a.length===0)return[];let r=a.slice(0,e).filter(d=>d.id),c=Math.ceil(r.length/t);console.log(`[Gmail] Starting parallel fetch: ${r.length} emails in ${c} batches`);let h=[];for(let d=0;d<r.length;d+=t){let u=r.slice(d,d+t),m=Math.floor(d/t)+1;console.log(`[Gmail] Fetching batch ${m}/${c} (${u.length} emails in parallel)...`);let p=Date.now(),b=u.map(T=>(console.log(`[Gmail] Starting fetch for email ${T.id}`),this.getEmailById(T.id).catch(x=>(console.error(`[Gmail] Failed to fetch message ${T.id}:`,x),null)))),w=(await Promise.all(b)).filter(T=>T!==null);h.push(...w);let k=Date.now()-p;console.log(`[Gmail] Batch ${m} complete: ${w.length}/${u.length} successful in ${k}ms`)}return console.log(`[Gmail] All batches complete: ${h.length} emails fetched successfully`),s&&h.length>0&&(h.sort((d,u)=>{let m=new Date(d.date||0).getTime();return new Date(u.date||0).getTime()-m}),console.log(`[Gmail] Sorted ${h.length} emails by date (newest first)`)),h}catch(a){throw console.error("Email search failed:",a),a}}async getEmailById(i){var e,t,s;try{let a=await this.makeGmailRequest(`/users/me/messages/${i}?format=full`),n=((e=a.payload)==null?void 0:e.headers)||[],o=h=>{let d=n.find(u=>{var m;return((m=u.name)==null?void 0:m.toLowerCase())===h.toLowerCase()});return(d==null?void 0:d.value)||""},l=this.extractBody(a.payload),r=[];if((t=a.payload)!=null&&t.parts)for(let h of a.payload.parts)h.filename&&((s=h.body)!=null&&s.attachmentId)&&r.push({filename:h.filename,mimeType:h.mimeType,size:h.body.size,attachmentId:h.body.attachmentId,downloadUrl:`https://mail.google.com/mail/u/0/?ui=2&ik=${i}&attid=${h.body.attachmentId}&disp=safe&zw`});let c=`https://mail.google.com/mail/u/0/#inbox/${i}`;return{id:i,threadId:a.threadId,subject:o("subject"),from:o("from"),to:o("to"),date:o("date"),body:l,snippet:a.snippet||"",attachments:r,gmailUrl:c,labels:a.labelIds||[]}}catch(a){throw console.error(`Failed to get email ${i}:`,a),a}}extractBody(i){var e,t,s;if(!i)return"";if((e=i.body)!=null&&e.data)return atob(i.body.data.replace(/-/g,"+").replace(/_/g,"/"));if(i.parts){for(let a of i.parts)if(a.mimeType==="text/plain"&&((t=a.body)!=null&&t.data))return atob(a.body.data.replace(/-/g,"+").replace(/_/g,"/"));for(let a of i.parts)if(a.mimeType==="text/html"&&((s=a.body)!=null&&s.data))return atob(a.body.data.replace(/-/g,"+").replace(/_/g,"/")).replace(/<[^>]*>/g,"").trim();for(let a of i.parts){let n=this.extractBody(a);if(n)return n}}return""}async fetchRecentMeetingEmails(i,e){let t=new Date;t.setTime(t.getTime()-i*60*60*1e3);let s=t.toISOString().split("T")[0],a=(e||"transcript").split(",").map(l=>l.trim().toLowerCase()).filter(l=>l);console.log(`[Gmail] Searching for emails with labels: ${a.join(", ")} after ${s} (${i} hours back)`);let n=new Map;for(let l of a){let r=`label:${l} after:${s}`;console.log(`[Gmail] Searching with query: "${r}"`);let c=await this.searchEmails(r,500,5,!0);console.log(`[Gmail] Found ${c.length} emails with label: ${l}`);for(let h of c)if(n.has(h.id)){let d=n.get(h.id);d.searchedLabels||(d.searchedLabels=[]),d.searchedLabels.includes(l)||d.searchedLabels.push(l)}else h.searchedLabels=[l],n.set(h.id,h)}let o=Array.from(n.values());return console.log(`[Gmail] Total unique emails found: ${o.length}`),o}isAuthenticated(){var i;return!!((i=this.token)!=null&&i.access_token)}hasRefreshToken(){var i;return!!((i=this.token)!=null&&i.refresh_token)}async testConnection(){try{await this.ensureValidToken();let i=await this.makeGmailRequest("/users/me/profile");return console.log("[Gmail] Connection test successful:",i.emailAddress),!0}catch(i){return console.error("[Gmail] Connection test failed:",i),!1}}clearAuthentication(){this.token=null}};var B=class{constructor(){this.server=null;this.port=42813;this.authCodePromise=null;this.authCodeResolve=null;this.authCodeReject=null}async start(){if(!this.server)return new Promise((i,e)=>{try{let t=window.require("http");this.server=t.createServer((s,a)=>{let n=new URL(s.url,`http://localhost:${this.port}`);if(n.pathname==="/callback"){let o=n.searchParams.get("code"),l=n.searchParams.get("error");a.writeHead(200,{"Content-Type":"text/html"}),o?(a.end(`
                <!DOCTYPE html>
                <html>
                <head>
                  <title>Authentication Successful</title>
                  <style>
                    body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                      display: flex;
                      justify-content: center;
                      align-items: center;
                      min-height: 100vh;
                      margin: 0;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white;
                    }
                    .container {
                      text-align: center;
                      padding: 2rem;
                      background: rgba(255, 255, 255, 0.1);
                      border-radius: 12px;
                      backdrop-filter: blur(10px);
                    }
                    .success-icon {
                      font-size: 4rem;
                      margin-bottom: 1rem;
                    }
                    h1 {
                      margin: 0 0 0.5rem 0;
                      font-size: 2rem;
                    }
                    p {
                      margin: 0.5rem 0;
                      opacity: 0.9;
                      font-size: 1.1rem;
                    }
                    .close-hint {
                      margin-top: 2rem;
                      font-size: 0.9rem;
                      opacity: 0.7;
                    }
                  </style>
                </head>
                <body>
                  <div class="container">
                    <div class="success-icon">\u2705</div>
                    <h1>Authentication Successful!</h1>
                    <p>You can now close this window and return to Obsidian.</p>
                    <p class="close-hint">This window will close automatically in 3 seconds...</p>
                  </div>
                  <script>
                    setTimeout(() => window.close(), 3000);
                  <\/script>
                </body>
                </html>
              `),this.authCodeResolve&&(this.authCodeResolve(o),this.authCodeResolve=null,this.authCodeReject=null)):(a.end(`
                <!DOCTYPE html>
                <html>
                <head>
                  <title>Authentication Failed</title>
                  <style>
                    body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                      display: flex;
                      justify-content: center;
                      align-items: center;
                      min-height: 100vh;
                      margin: 0;
                      background: linear-gradient(135deg, #f5576c 0%, #f093fb 100%);
                      color: white;
                    }
                    .container {
                      text-align: center;
                      padding: 2rem;
                      background: rgba(255, 255, 255, 0.1);
                      border-radius: 12px;
                      backdrop-filter: blur(10px);
                    }
                    .error-icon {
                      font-size: 4rem;
                      margin-bottom: 1rem;
                    }
                    h1 {
                      margin: 0 0 0.5rem 0;
                      font-size: 2rem;
                    }
                    p {
                      margin: 0.5rem 0;
                      opacity: 0.9;
                    }
                    .error-msg {
                      margin-top: 1rem;
                      padding: 1rem;
                      background: rgba(0, 0, 0, 0.2);
                      border-radius: 6px;
                      font-family: monospace;
                      font-size: 0.9rem;
                    }
                  </style>
                </head>
                <body>
                  <div class="container">
                    <div class="error-icon">\u274C</div>
                    <h1>Authentication Failed</h1>
                    <p>There was an error during authentication.</p>
                    ${l?`<div class="error-msg">Error: ${l}</div>`:""}
                    <p>Please close this window and try again.</p>
                  </div>
                </body>
                </html>
              `),this.authCodeReject&&(this.authCodeReject(new Error(l||"Authentication failed")),this.authCodeResolve=null,this.authCodeReject=null))}else a.writeHead(404),a.end("Not found")}),this.server.listen(this.port,"127.0.0.1",()=>{console.log(`[OAuth Server] Started on http://127.0.0.1:${this.port}`),i()}),this.server.on("error",s=>{s.code==="EADDRINUSE"?(console.error(`[OAuth Server] Port ${this.port} is already in use`),e(new Error(`Port ${this.port} is already in use. Please close any other applications using this port.`))):e(s)})}catch(t){e(t)}})}async stop(){if(this.timeoutId&&(clearTimeout(this.timeoutId),this.timeoutId=null),this.authCodeResolve=null,this.authCodeReject=null,this.authCodePromise=null,this.server)return new Promise(i=>{this.server.close(()=>{console.log("[OAuth Server] Stopped"),this.server=null,i()})})}async waitForAuthCode(){if(!this.server)throw new Error("OAuth server not started");return this.authCodeResolve=null,this.authCodeReject=null,this.authCodePromise=null,this.authCodePromise=new Promise((i,e)=>{this.authCodeResolve=i,this.authCodeReject=e;let t=setTimeout(()=>{this.authCodeResolve=null,this.authCodeReject=null,e(new Error("OAuth timeout - no response received within 5 minutes"))},300*1e3);this.timeoutId=t}),this.authCodePromise}getRedirectUri(){return`http://127.0.0.1:${this.port}/callback`}isRunning(){return this.server!==null}};var M=require("obsidian"),F=class{constructor(i){this.config=i}get label(){return this.config.label}get folderName(){return this.config.folderName}canProcess(i){var e;return((e=i.searchedLabels)==null?void 0:e.includes(this.config.label))||!1}async process(i,e){try{console.log(`[${this.config.label}] Processing email ${i.id}`);let t=i.body;if(typeof t=="object"&&(t=JSON.stringify(t)),!t||t==="{}"||t==="[object Object]")return console.warn(`[${this.config.label}] No valid email content`),{success:!1};let s=await this.extractTasks(t,i.subject,e);if(await this.createNote(i,s,e)){let n=s.tasks.filter(o=>o.priority==="high").length;return{success:!0,taskCount:s.tasks.length,highPriorityCount:n,confidence:s.confidence,emailTitle:i.subject||"Untitled"}}return{success:!1}}catch(t){return console.error(`[${this.config.label}] Error:`,t),{success:!1}}}async extractTasks(i,e,t){if(!t.claudeExtractor||!t.anthropicApiKey)return console.log(`[${this.config.label}] No Claude API key, skipping extraction`),{tasks:[],summary:e||"Email note",participants:[],meetingDate:new Date,keyDecisions:[],nextSteps:[],confidence:0};console.log(`[${this.config.label}] Starting Claude extraction with prompt type: ${this.config.promptType||"default"}`);let s=Date.now(),a;this.config.promptType==="actionitem"?a=await t.claudeExtractor.extractActionItems(i,e):this.config.promptType==="meeting"||this.config.promptType==="transcript"?a=await t.claudeExtractor.extractTasks(i,e):this.config.customPrompt?a=await t.claudeExtractor.extractTasks(i,e):a=await t.claudeExtractor.extractTasks(i,e);let n=Date.now()-s;return console.log(`[${this.config.label}] Claude extraction complete in ${n}ms: ${a.tasks.length} tasks`),a}async createNote(i,e,t){try{let s=new Date().getFullYear(),a=String(new Date().getMonth()+1).padStart(2,"0"),n=(0,M.normalizePath)(t.emailNotesFolder),o=(0,M.normalizePath)(`${n}/${this.config.folderName}`),l=(0,M.normalizePath)(`${o}/${s}`),r=(0,M.normalizePath)(`${l}/${a}`);t.app.vault.getAbstractFileByPath(n)||await t.app.vault.createFolder(n),t.app.vault.getAbstractFileByPath(o)||await t.app.vault.createFolder(o),t.app.vault.getAbstractFileByPath(l)||await t.app.vault.createFolder(l),t.app.vault.getAbstractFileByPath(r)||await t.app.vault.createFolder(r);let c=new Date(i.date||Date.now()).toISOString().split("T")[0],h=(i.subject||"Email").replace(/[\\/:*?"<>|]/g,"-").substring(0,50),d=`${c} - ${h}.md`,u=(0,M.normalizePath)(`${r}/${d}`);if(t.app.vault.getAbstractFileByPath(u))return console.log(`[${this.config.label}] Note already exists: ${u}`),!1;let m=this.formatNote(i,e);return await t.app.vault.create(u,m),console.log(`[${this.config.label}] Created note: ${u}`),t.emailIdCache.add(i.id),await t.saveSettings(),!0}catch(s){return console.error(`[${this.config.label}] Error creating note:`,s),!1}}formatNote(i,e){var s,a;let t=[];if(t.push("---"),t.push(`title: ${e.summary}`),t.push(`emailId: ${i.id}`),t.push(`label: ${this.config.label}`),i.gmailUrl&&t.push(`gmailUrl: ${i.gmailUrl}`),t.push("---"),t.push(""),t.push(`# ${e.summary}`),t.push(""),t.push("## Email Details"),t.push(`**From:** ${i.from}`),t.push(`**Date:** ${i.date}`),i.gmailUrl&&t.push(`**Email:** [View in Gmail](${i.gmailUrl})`),t.push(""),i.attachments&&i.attachments.length>0){let n=i.attachments.map(o=>`${o.filename} (${this.formatFileSize(o.size)})`).join(", ");t.push(`**Attachments:** ${n}`),t.push("")}if(e.participants&&e.participants.length>0&&(t.push("## Participants"),e.participants.forEach(n=>t.push(`- ${n}`)),t.push("")),e.tasks&&e.tasks.length>0){t.push("## Action Items"),t.push("");let n=e.tasks.filter(r=>r.priority==="high"),o=e.tasks.filter(r=>r.priority==="medium"),l=e.tasks.filter(r=>r.priority==="low");n.length>0&&(t.push("### \u{1F534} High Priority"),n.forEach(r=>t.push(this.formatTask(r))),t.push("")),o.length>0&&(t.push("### \u{1F7E1} Medium Priority"),o.forEach(r=>t.push(this.formatTask(r))),t.push("")),l.length>0&&(t.push("### \u{1F7E2} Low Priority"),l.forEach(r=>t.push(this.formatTask(r))),t.push(""))}return e.nextSteps&&e.nextSteps.length>0&&(t.push("## Next Steps"),e.nextSteps.forEach(n=>{typeof n=="string"?t.push(`- [ ] ${n}`):t.push(`- [ ] ${n.description||n}`)}),t.push("")),e.keyDecisions&&e.keyDecisions.length>0&&(t.push("## Key Decisions"),e.keyDecisions.forEach(n=>t.push(`- ${n}`)),t.push("")),i.snippet&&!((s=e.keyDecisions)!=null&&s.length)&&!((a=e.nextSteps)!=null&&a.length)&&(t.push("## Context"),t.push(i.snippet),t.push("")),t.push("---"),t.push(`**[\u{1F504} Reprocess this email](obsidian://meeting-tasks-reprocess?id=${i.id})**`),t.join(`
`)}formatTask(i){let e=`- [ ] ${i.description}`;return i.assignee&&(e+=` [[${i.assignee}]]`),i.dueDate&&(e+=` \u{1F4C5} ${i.dueDate}`),i.confidence&&i.confidence<70&&(e+=` \u26A0\uFE0F ${i.confidence}%`),i.tags&&i.tags.length>0&&(e+=` ${i.tags.map(t=>`#${t}`).join(" ")}`),e}formatFileSize(i){return i<1024?i+"B":i<1024*1024?(i/1024).toFixed(1)+"KB":(i/(1024*1024)).toFixed(1)+"MB"}};var H=class{constructor(){this.processors=[]}initializeFromConfig(i){this.processors=[];for(let e of i){let t=new F(e);this.processors.push(t),console.log(`[Registry] Registered processor: ${e.label} -> ${e.folderName} (prompt: ${e.promptType||"default"})`)}}getProcessor(i){for(let e of this.processors)if(e.canProcess(i))return e;return null}getAllProcessors(){return this.processors}getProcessorByLabel(i){return this.processors.find(e=>e.label===i)||null}},R=new H;var X={lookbackTime:"5d",debugMode:!1,anthropicApiKey:"",googleClientId:"",googleClientSecret:"",claudeModel:"claude-3-5-haiku-20241022",dashboardShowOnlyMyTasks:!0,dashboardMyName:"",gmailLabels:"transcript, action",emailNotesFolder:"TaskAgent",labelProcessors:[{label:"transcript",folderName:"Transcript",promptType:"meeting"},{label:"action",folderName:"Action",promptType:"actionitem"}],gmailToken:null,showDetailedNotifications:!0},z=class extends g.Plugin{constructor(){super(...arguments);this.gmailService=null;this.claudeExtractor=null;this.oauthServer=null;this.statusBarItem=null;this.emailIdCache=new Set}parseTimeToHours(e){let t=e.match(/^(\d+(?:\.\d+)?)\s*([hdwM]?)$/);if(!t){let n=parseFloat(e);return isNaN(n)?120:n}let s=parseFloat(t[1]);switch(t[2]||"h"){case"h":return s;case"d":return s*24;case"w":return s*24*7;case"M":return s*24*30;default:return s}}formatTimeString(e){return e<24?`${e}h`:e<168?`${Math.round(e/24)}d`:e<720?`${Math.round(e/168)}w`:`${Math.round(e/720)}M`}async loadEmailIdCache(){console.log("[LoadCache] Starting to load email IDs from vault notes..."),this.emailIdCache.clear();let e=this.app.vault.getMarkdownFiles();console.log(`[LoadCache] Found ${e.length} total markdown files in vault`);let t=this.settings.emailNotesFolder;console.log(`[LoadCache] Scanning base folder: ${t}`);let s=0,a=0;for(let n of e)if(n.path.startsWith(t)){s++;try{let l=(await this.app.vault.read(n)).match(/^---\n([\s\S]*?)\n---/);if(l){let r=l[1].match(/emailId:\s*(.+)/);if(r&&r[1]){let c=r[1].trim();this.emailIdCache.add(c),a++,console.log(`[LoadCache] Found emailId: ${c} in ${n.path}`)}}}catch(o){console.error(`[LoadCache] Error reading file ${n.path}:`,o)}}console.log(`[LoadCache] Scanned ${s} email notes, found ${a} email IDs`),console.log(`[LoadCache] Cache now contains ${this.emailIdCache.size} unique email IDs`),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),console.log(`[LoadCache] Saved ${this.settings.processedEmails.length} email IDs to settings`)}async onload(){console.log("==============================================="),console.log("Loading Meeting Tasks Plugin..."),console.log("Plugin version: 2.0.0"),console.log("===============================================");let e=await this.loadData();this.settings=Object.assign({},X,e),this.settings.labelProcessors&&this.settings.labelProcessors.length>0?(R.initializeFromConfig(this.settings.labelProcessors),console.log(`[Plugin] Initialized ${this.settings.labelProcessors.length} label processors`)):console.warn("[Plugin] No label processors configured, using defaults"),this.settings.processedEmails&&(this.settings.processedEmails.forEach(s=>this.emailIdCache.add(s)),console.log(`[Plugin] Loaded ${this.emailIdCache.size} email IDs from settings`)),this.app.workspace.onLayoutReady(async()=>{await this.loadEmailIdCache(),console.log(`[Plugin] Found ${this.emailIdCache.size} existing meeting notes in vault`)}),this.registerEvent(this.app.vault.on("delete",async s=>{var a;if(s instanceof g.TFile&&s.extension==="md"&&s.path.startsWith(this.settings.emailNotesFolder)){console.log(`[Delete] Email note deleted: ${s.path}`);let n=this.app.metadataCache.getFileCache(s);if((a=n==null?void 0:n.frontmatter)!=null&&a.emailId){let o=n.frontmatter.emailId;console.log(`[Delete] Removing emailId from cache: ${o}`),this.emailIdCache.delete(o),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),console.log(`[Delete] Updated cache, now contains ${this.emailIdCache.size} email IDs`)}}})),this.registerEvent(this.app.vault.on("rename",async(s,a)=>{var n,o;if(s instanceof g.TFile&&s.extension==="md"){let l=a.startsWith(this.settings.emailNotesFolder),r=s.path.startsWith(this.settings.emailNotesFolder);if(l&&!r){console.log(`[Rename] File moved out of email notes folder: ${a} -> ${s.path}`);let c=this.app.metadataCache.getFileCache(s);if((n=c==null?void 0:c.frontmatter)!=null&&n.emailId){let h=c.frontmatter.emailId;console.log(`[Rename] Removing emailId from cache: ${h}`),this.emailIdCache.delete(h),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),console.log(`[Rename] Cache updated, now contains ${this.emailIdCache.size} email IDs`)}else console.log("[Rename] File has no emailId in frontmatter, skipping cache update")}else if(!l&&r){console.log(`[Rename] File moved into email notes folder: ${a} -> ${s.path}`),await new Promise(h=>setTimeout(h,100));let c=this.app.metadataCache.getFileCache(s);if((o=c==null?void 0:c.frontmatter)!=null&&o.emailId){let h=c.frontmatter.emailId;console.log(`[Rename] Adding emailId to cache: ${h}`),this.emailIdCache.add(h),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),console.log(`[Rename] Cache updated, now contains ${this.emailIdCache.size} email IDs`)}else try{let d=(await this.app.vault.read(s)).match(/^---\n([\s\S]*?)\n---/);if(d){let u=d[1].match(/emailId:\s*(.+)/);if(u&&u[1]){let m=u[1].trim();console.log(`[Rename] Adding emailId to cache (from file content): ${m}`),this.emailIdCache.add(m),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),console.log(`[Rename] Cache updated, now contains ${this.emailIdCache.size} email IDs`)}else console.log("[Rename] File has no emailId in frontmatter, not adding to cache")}else console.log("[Rename] File has no frontmatter, not adding to cache")}catch(h){console.error("[Rename] Error reading file content:",h)}}}})),this.registerObsidianProtocolHandler("meeting-tasks-reprocess",async s=>{s.id&&await this.reprocessEmailById(s.id,!0)}),this.registerObsidianProtocolHandler("meeting-tasks-oauth",async s=>{if(s.code)try{if(!this.gmailService){new g.Notice("Gmail service not initialized");return}await this.gmailService.exchangeCodeForToken(s.code),new g.Notice("\u2705 Successfully authenticated with Gmail!"),await this.initializeServices(),this.app.workspace.trigger("meeting-tasks:auth-complete")}catch(a){new g.Notice(`Authentication failed: ${a.message}`),console.error("OAuth callback error:",a)}else s.error&&new g.Notice(`Authentication failed: ${s.error}`)}),(0,g.addIcon)("mail-check",'<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8"/><path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"/><path d="m16 19 2 2 4-4"/></svg>');let t=this.addRibbonIcon("mail-check","Process meeting emails",async()=>{await this.processEmails()});this.statusBarItem=this.addStatusBarItem(),this.updateStatus("Ready"),this.addCommand({id:"process-meeting-emails",name:"\u{1F4E7} Process meeting emails now",callback:async()=>{await this.processEmails()},hotkeys:[{modifiers:["Mod","Shift"],key:"M"}]}),this.addCommand({id:"open-task-dashboard",name:"Open task dashboard",callback:()=>{this.openTaskDashboard()}}),this.addCommand({id:"quick-process-emails",name:"\u26A1 Quick process (last 24 hours)",callback:async()=>{let s=this.settings.lookbackTime;this.settings.lookbackTime="24h",await this.processEmails(),this.settings.lookbackTime=s}}),this.addCommand({id:"reset-processed-emails",name:"Reset processed emails",callback:async()=>{await this.resetProcessedEmails()}}),this.addCommand({id:"reprocess-meeting-note",name:"\u{1F504} Reprocess current meeting note",callback:async()=>{await this.reprocessCurrentMeetingNote()}}),this.addCommand({id:"reprocess-email-by-id",name:"\u{1F4E7} Reprocess email by ID",callback:async()=>{await this.reprocessEmailById("1995cbb7415c015f")}}),this.registerView(L,s=>new G(s,this)),this.addRibbonIcon("layout-dashboard","Open task dashboard",()=>{this.openTaskDashboard()}),await this.initializeServices(),this.addSettingTab(new q(this.app,this))}async initializeServices(){try{this.gmailService=new O(()=>this.settings.gmailToken,async e=>{this.settings.gmailToken=e,await this.saveSettings()}),this.settings.googleClientId&&this.settings.googleClientSecret?(this.gmailService.setCredentials(this.settings.googleClientId,this.settings.googleClientSecret),this.gmailService.isAuthenticated()?await this.gmailService.testConnection()?this.updateStatus("Gmail connected"):this.updateStatus("Gmail auth needed"):this.updateStatus("Gmail not authenticated")):this.updateStatus("Gmail setup needed"),this.settings.anthropicApiKey&&(this.claudeExtractor=new I(this.settings.anthropicApiKey,this.settings.claudeModel))}catch(e){console.error("Failed to initialize services:",e),new g.Notice(`Error: ${e.message}`)}}async processEmails(){console.log("[processEmails] Starting email processing");try{if(this.updateStatus("\u{1F504} Starting email processing..."),new g.Notice("\u{1F4E7} Starting email processing..."),this.emailIdCache.size===0&&this.app.vault.getMarkdownFiles().length>0&&(console.log("[processEmails] Cache empty, loading from vault..."),await this.loadEmailIdCache()),!this.gmailService){this.updateStatus("\u274C Gmail service not initialized"),new g.Notice("Gmail service not initialized");return}if(!this.gmailService.isAuthenticated()){this.updateStatus("\u274C Not authenticated"),new g.Notice("Please authenticate with Gmail first (see plugin settings)");return}let e=this.parseTimeToHours(this.settings.lookbackTime);this.updateStatus(`\u{1F50D} Searching emails (${this.settings.lookbackTime})...`),new g.Notice(`\u{1F504} Searching for meeting emails from the last ${this.settings.lookbackTime}...`);let t=await this.gmailService.fetchRecentMeetingEmails(e,this.settings.gmailLabels);if(t.length===0){this.updateStatus("\u2705 No new emails found"),new g.Notice(`\u2705 No meeting emails found in the last ${this.settings.lookbackTime}`);return}this.updateStatus(`\u{1F4CA} Found ${t.length} emails`),new g.Notice(`\u{1F4CA} Found ${t.length} meeting emails. Processing...`),t.length>0&&(console.log("[Process] Emails sorted by date (newest first):"),t.slice(0,5).forEach((d,u)=>{var m;console.log(`[Process]   ${u+1}. ${d.date} - ${((m=d.subject)==null?void 0:m.substring(0,50))||"No subject"}`)}),t.length>5&&console.log(`[Process]   ... and ${t.length-5} more emails`));let s=0,a=0,n=0,o=0,l=0;console.log(`[Process] Cache contains ${this.emailIdCache.size} processed email IDs`),console.log("[Process] First 5 cache entries:",Array.from(this.emailIdCache).slice(0,5));let r=t.filter(d=>this.emailIdCache.has(d.id)?(l++,console.log(`[Process] Skipping already processed email: ${d.id} - "${d.subject}"`),!1):(console.log(`[Process] Will process new email: ${d.id} - "${d.subject}"`),!0));console.log(`[Process] Processing ${r.length} new emails (${l} skipped)`);let c=3,h=Math.ceil(r.length/c);console.log(`[Process] Will process in ${h} batches of up to ${c} emails each`);for(let d=0;d<r.length;d+=c){let u=r.slice(d,d+c),m=Math.floor(d/c)+1,p=u.map(f=>f.subject||"Untitled").join(", "),b=this.settings.showDetailedNotifications?`\u{1F4DD} Processing: ${p.substring(0,50)}${p.length>50?"...":""}`:`\u{1F4DD} Processing batch ${m}/${h} (${u.length} emails)...`;this.updateStatus(b),console.log(`
[Process] === Starting Batch ${m}/${h} ===`),console.log(`[Process] Batch contains ${u.length} emails:`),u.forEach((f,v)=>{console.log(`[Process]   ${v+1}. ${f.subject||"No subject"} (ID: ${f.id})`)});let y=Date.now();console.log(`[Process] Starting parallel processing at ${new Date(y).toISOString()}`);let w=u.map(async(f,v)=>{let D=Date.now();console.log(`[Process] Starting email ${v+1}/${u.length}: ${f.id}`);try{console.log(`[Process] Email ${f.id} has searchedLabels:`,f.searchedLabels);let S=R.getProcessor(f);if(!S)return console.warn(`[Process] No processor found for email ${f.id} with labels:`,f.searchedLabels),null;console.log(`[Process] Using processor: ${S.label} -> ${S.folderName}`);let $={app:this.app,claudeExtractor:this.claudeExtractor,anthropicApiKey:this.settings.anthropicApiKey,emailIdCache:this.emailIdCache,emailNotesFolder:this.settings.emailNotesFolder,saveSettings:async()=>{this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings()}},E=await S.process(f,$),A=Date.now()-D;if(E.success){let U=this.settings.showDetailedNotifications&&E.emailTitle?`[Process] \u2705 [${S.folderName}] "${E.emailTitle}" succeeded in ${A}ms (${E.taskCount} tasks, ${E.confidence}% confidence)`:`[Process] \u2705 [${S.folderName}] Email ${v+1} succeeded in ${A}ms (${E.taskCount} tasks, ${E.confidence}% confidence)`;return console.log(U),E}else{let U=this.settings.showDetailedNotifications&&f.subject?`[Process] \u274C "${f.subject.substring(0,50)}" failed in ${A}ms`:`[Process] \u274C Email ${v+1} failed in ${A}ms`;return console.log(U),null}}catch(S){let $=Date.now()-D;return console.error(`[Process] \u274C Email ${v+1} errored in ${$}ms:`,S),null}});console.log(`[Process] Waiting for all ${u.length} emails to complete...`);let k=await Promise.all(w),T=Date.now()-y,x=k.filter(f=>f&&f.success).length;console.log(`[Process] Batch ${m} complete: ${x}/${u.length} successful in ${T}ms`),console.log(`[Process] Average time per email: ${Math.round(T/u.length)}ms`);for(let f of k)f&&f.success&&(s++,a+=f.taskCount||0,n+=f.highPriorityCount||0,o++,f.taskCount&&f.taskCount>0&&(this.settings.showDetailedNotifications&&f.emailTitle?new g.Notice(`\u2705 ${f.emailTitle}: ${f.taskCount} tasks extracted`):new g.Notice(`\u2705 Batch ${m}: Created note with ${f.taskCount} tasks`)))}if(console.log(`
[Process] === Processing Complete ===`),console.log(`[Process] Notes created: ${s}`),console.log(`[Process] Total tasks: ${a}`),console.log(`[Process] High priority tasks: ${n}`),l>0&&s===0)this.updateStatus(`\u2705 All ${l} emails already processed`),new g.Notice(`\u2705 All ${l} emails were already processed`);else if(s>0){this.updateStatus(`\u2705 Created ${s} notes (${a} tasks)`);let d=`\u2705 Successfully created ${s} meeting notes with ${a} tasks`;n>0&&(d+=` (${n} high priority)`),new g.Notice(d,5e3)}else this.updateStatus("\u2705 Processing complete"),new g.Notice("\u2705 Email processing complete (no new notes created)")}catch(e){console.error("Error processing emails:",e),this.updateStatus("\u274C Error processing emails"),new g.Notice(`\u274C Error: ${e.message}`)}}async reprocessEmailById(e,t=!0){var s;try{if(console.log(`[reprocessEmailById] Reprocessing email: ${e}`),!this.gmailService||!this.gmailService.isAuthenticated()){new g.Notice("Gmail service not authenticated");return}!this.claudeExtractor&&this.settings.anthropicApiKey&&(this.claudeExtractor=new I(this.settings.anthropicApiKey,this.settings.claudeModel),console.log("[reprocessEmailById] Initialized Claude extractor")),this.updateStatus(`\u{1F504} Fetching email ${e}...`);let a=await this.gmailService.getEmailById(e);if(!a){new g.Notice(`Email ${e} not found`);return}let n=null;if(t){let c=this.app.vault.getMarkdownFiles();for(let h of c)if(h.path.startsWith(this.settings.emailNotesFolder))try{let u=(await this.app.vault.read(h)).match(/^---\n([\s\S]*?)\n---/);if(u){let m=u[1].match(/emailId:\s*(.+)/);if(m&&m[1].trim()===e){n=h,console.log(`[Reprocess] Found existing note at: ${h.path}`);break}}}catch(d){console.error(`Error reading file ${h.path}:`,d)}}this.emailIdCache.delete(e);let o=R.getProcessor(a);if(!o){new g.Notice(`No processor found for email with labels: ${(s=a.searchedLabels)==null?void 0:s.join(", ")}`);return}n&&(console.log(`[Reprocess] Deleting old note: ${n.path}`),await this.app.vault.delete(n));let l={app:this.app,claudeExtractor:this.claudeExtractor,anthropicApiKey:this.settings.anthropicApiKey,emailIdCache:this.emailIdCache,emailNotesFolder:this.settings.emailNotesFolder,saveSettings:async()=>{this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings()}},r=await o.process(a,l);r.success?(this.emailIdCache.add(e),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),new g.Notice(`\u2705 Reprocessed email with ${r.taskCount||0} tasks (Confidence: ${r.confidence}%)`),this.updateStatus(`\u2705 Reprocessed with ${r.taskCount||0} tasks`)):(new g.Notice("\u274C Failed to reprocess email"),this.updateStatus("\u274C Reprocessing failed"))}catch(a){console.error("Error reprocessing email:",a),new g.Notice(`\u274C Error: ${a.message}`),this.updateStatus("\u274C Error reprocessing")}}async saveSettings(){await this.saveData(this.settings)}updateStatus(e){this.statusBarItem&&this.statusBarItem.setText(`\u{1F4E7} ${e}`)}async openTaskDashboard(){var s;let{workspace:e}=this.app,t=e.getLeavesOfType(L);t.length>0?e.revealLeaf(t[0]):await((s=e.getRightLeaf(!1))==null?void 0:s.setViewState({type:L,active:!0}))}async reprocessCurrentMeetingNote(){try{let e=this.app.workspace.getActiveFile();if(!e){new g.Notice("No active file. Please open a meeting note to reprocess.");return}let s=(await this.app.vault.read(e)).match(/^---\n([\s\S]*?)\n---/);if(!s){new g.Notice("This file does not appear to be a meeting note (no frontmatter).");return}let n=s[1].match(/emailId:\s*(.+)/);if(!n||!n[1]){new g.Notice("No email ID found in this meeting note. Cannot reprocess.");return}let o=n[1].trim();await this.reprocessEmailById(o,!0)}catch(e){console.error("Failed to reprocess meeting note:",e),new g.Notice(`Error reprocessing: ${e.message}`),this.updateStatus("Error")}}async resetProcessedEmails(){console.log("Reset function called");try{if(this.updateStatus("Resetting..."),!confirm(`Reset Processed Emails?

This will clear all processed email records, allowing them to be processed again.`)){console.log("User cancelled reset"),this.updateStatus("Ready");return}console.log("User confirmed reset"),new g.Notice("Resetting processed emails..."),this.emailIdCache.clear(),this.settings.processedEmails=[],await this.saveSettings(),await this.loadEmailIdCache(),new g.Notice("\u2705 Cache refreshed. Existing notes will prevent duplicate processing."),this.updateStatus("Ready")}catch(e){console.error("Reset failed:",e),new g.Notice(`Reset failed: ${e.message}`),this.updateStatus("Error")}}onunload(){console.log("Unloading Meeting Tasks Plugin...")}},q=class extends g.PluginSettingTab{constructor(i,e){super(i,e),this.plugin=e}display(){var o,l;let{containerEl:i}=this;i.empty(),i.createEl("h2",{text:"Meeting Tasks Settings"}),i.createEl("h3",{text:"Google OAuth Settings"}),i.createEl("p",{text:"Create OAuth credentials in Google Cloud Console. Follow the guide for detailed instructions.",cls:"setting-item-description"}),new g.Setting(i).setName("Google Client ID").setDesc("Your Google OAuth Client ID (from Google Cloud Console)").addText(r=>r.setPlaceholder("1234567890-abc...apps.googleusercontent.com").setValue(this.plugin.settings.googleClientId).onChange(async c=>{this.plugin.settings.googleClientId=c,await this.plugin.saveSettings(),await this.plugin.initializeServices()})),new g.Setting(i).setName("Google Client Secret").setDesc("Your Google OAuth Client Secret").addText(r=>(r.setPlaceholder("GOCSPX-...").setValue(this.plugin.settings.googleClientSecret).onChange(async c=>{this.plugin.settings.googleClientSecret=c,await this.plugin.saveSettings(),await this.plugin.initializeServices()}),r.inputEl.type="password",r)),i.createEl("h3",{text:"Gmail Authentication"});let e=i.createEl("p",{text:"\u23F3 Checking authentication status...",cls:"mod-warning setting-item-description"}),t=()=>{if(!this.plugin.gmailService){e.textContent="\u274C Gmail service not initialized",e.className="mod-warning setting-item-description";return}this.plugin.gmailService.isAuthenticated()?this.plugin.gmailService.hasRefreshToken()?(e.textContent="\u2705 Authenticated with Gmail",e.className="mod-success setting-item-description"):(e.textContent="\u26A0\uFE0F Authenticated but missing refresh token",e.className="mod-warning setting-item-description"):(e.textContent="\u274C Not authenticated with Gmail",e.className="mod-warning setting-item-description")};t(),new g.Setting(i).setName("Authenticate with Gmail").setDesc("Click to start the Gmail authentication process").addButton(r=>{var h;let c=r;(h=this.plugin.gmailService)!=null&&h.isAuthenticated()?c.setButtonText("Re-authenticate"):c.setButtonText("Authenticate"),c.onClick(async()=>{var d;if(!this.plugin.gmailService){new g.Notice("Please configure Client ID and Secret first");return}try{if(this.plugin.oauthServer||(this.plugin.oauthServer=new B),!this.plugin.oauthServer.isRunning())try{await this.plugin.oauthServer.start(),new g.Notice("Starting authentication server...")}catch(k){new g.Notice(`Failed to start OAuth server: ${k.message}`);return}let u=this.plugin.oauthServer.getRedirectUri();this.plugin.gmailService.setCredentials(this.plugin.settings.googleClientId,this.plugin.settings.googleClientSecret,u);let m=this.plugin.gmailService.getAuthorizationUrl();window.open(m,"_blank");let p=new g.Modal(this.app);p.contentEl.addClass("gmail-auth-modal"),p.contentEl.createEl("h2",{text:"\u{1F510} Authenticating with Gmail..."});let b=p.contentEl.createDiv("auth-instructions");b.createEl("p",{text:"Please complete the authorization in your browser."}),b.createEl("p",{text:"This window will close automatically when authentication is complete."});let y=p.contentEl.createDiv("auth-loading");y.style.textAlign="center",y.style.marginTop="20px",y.createEl("span",{text:"\u23F3 Waiting for authorization..."});let w=p.contentEl.createEl("button",{text:"Cancel",cls:"auth-cancel-btn"});w.style.marginTop="20px",w.onclick=async()=>{var k;p.close(),await((k=this.plugin.oauthServer)==null?void 0:k.stop())},p.open();try{let k=await this.plugin.oauthServer.waitForAuthCode();if(!k){new g.Notice("No authorization code received"),p.close(),await this.plugin.oauthServer.stop();return}p.close(),new g.Notice("Processing authentication..."),await this.plugin.gmailService.exchangeCodeForToken(k),new g.Notice("\u2705 Successfully authenticated with Gmail!"),t(),await this.plugin.initializeServices(),await this.plugin.oauthServer.stop(),c.setButtonText("Re-authenticate")}catch(k){p.close(),console.error("Authentication error:",k),new g.Notice(`Authentication failed: ${k.message}`),await((d=this.plugin.oauthServer)==null?void 0:d.stop())}}catch(u){new g.Notice(`Failed to start authentication: ${u.message}`)}})}),new g.Setting(i).setName("Clear authentication").setDesc("Remove stored Gmail authentication").addButton(r=>r.setButtonText("Clear").setWarning().onClick(async()=>{var c;(c=this.plugin.gmailService)==null||c.clearAuthentication(),this.plugin.settings.gmailToken=null,await this.plugin.saveSettings(),new g.Notice("Gmail authentication cleared"),t()})),i.createEl("h3",{text:"Email Processing"}),new g.Setting(i).setName("Lookback time").setDesc("How far back to search. Examples: 6h (6 hours), 3d (3 days), 2w (2 weeks), 1M (1 month)").addText(r=>r.setPlaceholder("5d").setValue(this.plugin.settings.lookbackTime||"5d").onChange(async c=>{this.plugin.parseTimeToHours(c)>0&&(this.plugin.settings.lookbackTime=c,await this.plugin.saveSettings())})),new g.Setting(i).setName("Gmail Labels").setDesc("Gmail labels to filter emails (comma-separated)").addText(r=>r.setPlaceholder("transcript").setValue(this.plugin.settings.gmailLabels).onChange(async c=>{this.plugin.settings.gmailLabels=c||"transcript",await this.plugin.saveSettings()})),i.createEl("h3",{text:"Claude AI Settings"}),new g.Setting(i).setName("Anthropic API Key").setDesc("Your Claude API key for task extraction").addText(r=>r.setPlaceholder("sk-ant-...").setValue(this.plugin.settings.anthropicApiKey).onChange(async c=>{this.plugin.settings.anthropicApiKey=c,await this.plugin.saveSettings(),c&&(this.plugin.claudeExtractor=new I(c,this.plugin.settings.claudeModel))})),new g.Setting(i).setName("Claude Model").setDesc("Which Claude model to use").addDropdown(r=>r.addOption("claude-3-5-haiku-20241022","Claude 3.5 Haiku (Fast & Cheap)").addOption("claude-sonnet-4-20250514","Claude Sonnet 4 (Balanced)").addOption("claude-opus-4-1-20250805","Claude Opus 4.1 (Most Capable)").setValue(this.plugin.settings.claudeModel).onChange(async c=>{this.plugin.settings.claudeModel=c,await this.plugin.saveSettings()})),i.createEl("h3",{text:"Obsidian Settings"}),new g.Setting(i).setName("Email notes folder").setDesc("Base folder for all email-based notes (organized by label inside)").addText(r=>r.setPlaceholder("TaskAgent").setValue(this.plugin.settings.emailNotesFolder).onChange(async c=>{this.plugin.settings.emailNotesFolder=c||"TaskAgent",await this.plugin.saveSettings()})),i.createEl("h3",{text:"Dashboard Settings"}),new g.Setting(i).setName("Show only my tasks").setDesc("Filter dashboard to show only tasks assigned to you").addToggle(r=>r.setValue(this.plugin.settings.dashboardShowOnlyMyTasks).onChange(async c=>{this.plugin.settings.dashboardShowOnlyMyTasks=c,await this.plugin.saveSettings()})),new g.Setting(i).setName("My name(s)").setDesc("Your name(s) for filtering tasks (comma-separated)").addText(r=>r.setPlaceholder("Your name, other name").setValue(this.plugin.settings.dashboardMyName).onChange(async c=>{this.plugin.settings.dashboardMyName=c,await this.plugin.saveSettings()})),i.createEl("h3",{text:"Notification Settings"}),new g.Setting(i).setName("Show detailed notifications").setDesc("Show email titles in status messages while processing").addToggle(r=>r.setValue(this.plugin.settings.showDetailedNotifications).onChange(async c=>{this.plugin.settings.showDetailedNotifications=c,await this.plugin.saveSettings()})),i.createEl("h3",{text:"Actions"}),new g.Setting(i).setName("Process emails now").setDesc("Search for meeting emails and create notes").addButton(r=>r.setButtonText("Process").setCta().onClick(async()=>{await this.plugin.processEmails()})),new g.Setting(i).setName("Reset processed emails").setDesc("Clear the list of already processed emails").addButton(r=>r.setButtonText("Reset").setWarning().onClick(async()=>{await this.plugin.resetProcessedEmails()}));let s=i.createDiv("status-info"),a=(o=this.plugin.gmailService)!=null&&o.isAuthenticated()?"\u2705 Gmail authenticated":"\u274C Gmail not authenticated",n=this.plugin.settings.anthropicApiKey?"\u2705 Claude AI configured":"\u26A0\uFE0F Claude AI not configured";s.createEl("p",{text:a,cls:(l=this.plugin.gmailService)!=null&&l.isAuthenticated()?"mod-success":"mod-warning"}),s.createEl("p",{text:n,cls:this.plugin.settings.anthropicApiKey?"mod-success":"mod-warning"})}};
