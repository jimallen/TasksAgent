/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var G=Object.defineProperty;var U=Object.getOwnPropertyDescriptor;var z=Object.getOwnPropertyNames;var j=Object.prototype.hasOwnProperty;var q=(C,r)=>{for(var e in r)G(C,e,{get:r[e],enumerable:!0})},W=(C,r,e,s)=>{if(r&&typeof r=="object"||typeof r=="function")for(let t of z(r))!j.call(C,t)&&t!==e&&G(C,t,{get:()=>r[t],enumerable:!(s=U(r,t))||s.enumerable});return C};var V=C=>W(G({},"__esModule",{value:!0}),C);var K={};q(K,{default:()=>R});module.exports=V(K);var u=require("obsidian");var O=require("obsidian"),M=class{constructor(r,e="claude-3-5-haiku-20241022"){this.apiUrl="https://api.anthropic.com/v1/messages";this.apiKey=r,this.model=e}async extractTasks(r,e){if(!this.apiKey)return console.warn("No Claude API key found, using fallback extraction"),this.fallbackExtraction(r,e);try{let s=this.buildPrompt(r,e),t=await this.callClaude(s);return this.parseResponse(t,r)}catch(s){return console.error("Claude task extraction failed, using fallback",s),this.fallbackExtraction(r,e)}}buildPrompt(r,e){let s=typeof r=="string"?r:JSON.stringify(r);return`You are an expert at extracting actionable tasks from meeting transcripts. Analyze the following meeting transcript and extract all tasks, action items, and commitments.

MEETING SUBJECT: ${e}

TRANSCRIPT:
${s.substring(0,15e3)} ${s.length>15e3?"... [truncated]":""}

Extract the following information and return as JSON:

1. **tasks** - Array of task objects with:
   - description: Clear, actionable task description
   - assignee: Person responsible (use actual names from the meeting, default "Unassigned" if unclear)
   - priority: "high", "medium", or "low" based on urgency/importance
   - confidence: 0-100 score of how confident you are this is a real task
   - dueDate: ISO date string if mentioned (optional)
   - category: engineering/product/design/documentation/communication/other
   - context: Brief context about why this task exists
   - rawText: The original text that led to this task

2. **summary** - 2-3 sentence meeting summary

3. **participants** - Array of participant names (extract all names mentioned)

4. **meetingDate** - ISO date string (use today if not specified)

5. **keyDecisions** - Array of important decisions made

6. **nextSteps** - Array of next step objects with:
   - description: Clear description of the next step
   - assignee: Person responsible (match with participants when possible, default "Unassigned")
   - priority: "high", "medium", or "low" based on importance

Guidelines:
- Focus on explicit commitments ("I will", "I'll", "Let me", "I can", "[Name] will")
- Include tasks with deadlines or time constraints
- Capture follow-ups and action items
- Look for "Next steps", "Action items", "To do", "Follow up" sections
- Check for Google Meet's AI-suggested action items or next steps (often at the end)
- Include any items listed under "Suggested next steps" or "Recommended actions"
- Ignore general discussions or past work
- Be conservative - only extract clear tasks
- Only use names that actually appear in the transcript
- Default assignee should be "Unassigned" for unclear ownership

Return ONLY valid JSON, no other text:`}async callClaude(r){var e,s,t,i,o;try{let a=await(0,O.requestUrl)({url:this.apiUrl,method:"POST",headers:{"x-api-key":this.apiKey,"anthropic-version":"2023-06-01","content-type":"application/json"},body:JSON.stringify({model:this.model,messages:[{role:"user",content:r}],max_tokens:4e3,temperature:.2,system:"You are a task extraction assistant. Always respond with valid JSON only, no markdown or explanations."})});if((t=(s=(e=a.json)==null?void 0:e.content)==null?void 0:s[0])!=null&&t.text)return a.json.content[0].text;throw new Error("Invalid Claude API response structure")}catch(a){throw((i=a.response)==null?void 0:i.status)===401?console.error("Invalid Claude API key"):((o=a.response)==null?void 0:o.status)===429&&console.error("Claude API rate limit exceeded"),a}}parseResponse(r,e){try{let s=r.match(/\{[\s\S]*\}/);if(!s)throw new Error("No JSON found in response");let t=JSON.parse(s[0]),i=this.normalizeTasks(t.tasks||[]),o=t.participants||[],a=this.normalizeNextSteps(t.nextSteps||[],o),{deduplicatedTasks:l,deduplicatedNextSteps:n}=this.deduplicateTasksAndNextSteps(i,a);return{tasks:l,summary:t.summary||"Meeting transcript processed",participants:o,meetingDate:this.parseDate(t.meetingDate)||new Date,keyDecisions:t.keyDecisions||[],nextSteps:n,confidence:this.calculateOverallConfidence(l)}}catch(s){return console.error("Failed to parse Claude response",s),console.debug("Raw response:",r),this.fallbackExtraction(e,"")}}normalizeTasks(r){return r.map(e=>({description:this.cleanDescription(e.description||""),assignee:e.assignee||"Unassigned",priority:this.normalizePriority(e.priority),confidence:this.normalizeConfidence(e.confidence),dueDate:e.dueDate,category:e.category||"other",context:e.context,rawText:e.rawText})).filter(e=>e.description&&e.description.length>5)}cleanDescription(r){return r.replace(/^[-*•]\s*/,"").replace(/\s+/g," ").trim()}normalizePriority(r){let e=String(r).toLowerCase();return e.includes("high")||e==="3"?"high":e.includes("low")||e==="1"?"low":"medium"}normalizeConfidence(r){let e=Number(r);return isNaN(e)?75:Math.min(100,Math.max(0,e))}parseDate(r){if(!r)return null;let e=new Date(r);return isNaN(e.getTime())?null:e}deduplicateTasks(r){let e=new Set;return r.filter(s=>{let t=`${s.description.toLowerCase()}-${s.assignee.toLowerCase()}`;return e.has(t)?!1:(e.add(t),!0)})}normalizeNextSteps(r,e){return Array.isArray(r)?r.map(s=>{if(typeof s=="string"){let t=this.extractAssigneeFromText(s,e);return{description:this.cleanDescription(s),assignee:t||"Unassigned",priority:"medium"}}else if(typeof s=="object"&&s!==null)return{description:this.cleanDescription(s.description||String(s)),assignee:s.assignee||"Unassigned",priority:this.normalizePriority(s.priority||"medium")};return null}).filter(s=>s!==null&&s.description.length>5):[]}extractAssigneeFromText(r,e){for(let t of e)if(r.toLowerCase().includes(t.toLowerCase()))return t;let s=[/^([A-Z][a-z]+(?:\s+[A-Z][a-z]+)?)\s+(?:will|to|should|needs to)/,/(?:assigned to|owner:|assignee:)\s*([A-Z][a-z]+(?:\s+[A-Z][a-z]+)?)/i];for(let t of s){let i=r.match(t);if(i&&i[1])return i[1]}return null}deduplicateTasksAndNextSteps(r,e){let s=new Set(r.map(i=>i.description.toLowerCase().replace(/[^\w\s]/g,""))),t=e.filter(i=>{let o=i.description.toLowerCase().replace(/[^\w\s]/g,"");for(let a of s){let l=o.split(/\s+/),n=a.split(/\s+/);if(l.filter(d=>n.includes(d)).length>l.length*.6&&l.length>2)return!1}return!0});return{deduplicatedTasks:r,deduplicatedNextSteps:t}}calculateOverallConfidence(r){if(r.length===0)return 0;let e=r.reduce((s,t)=>s+t.confidence,0);return Math.round(e/r.length)}fallbackExtraction(r,e){let s=[],t=r.split(`
`),i=[/(?:I will|I'll|I can|Let me|I need to|I should|I have to)\s+(.+)/i,/(?:TODO|Action|Task|Follow.?up):\s*(.+)/i,/(?:Next steps?|Action items?):\s*(.+)/i,/\[ \]\s+(.+)/,/^[-*•]\s*(.+(?:will|need to|should|must).+)/i];for(let n of t)for(let c of i){let d=n.match(c);d&&s.push({description:this.cleanDescription(d[1]),assignee:"Unassigned",priority:"medium",confidence:50,category:"other",rawText:n})}let o=[],a=/(?:with|from|to|cc|attendees?:)\s*([A-Z][a-z]+(?:\s+[A-Z][a-z]+)*)/gi,l;for(;(l=a.exec(r))!==null;)o.includes(l[1])||o.push(l[1]);return{tasks:this.deduplicateTasks(s),summary:e||"Meeting notes",participants:o,meetingDate:new Date,keyDecisions:[],nextSteps:[],confidence:30}}};var $=require("obsidian"),A="task-dashboard-view",F=class extends $.ItemView{constructor(e,s){super(e);this.showOnlyMyTasks=!0;this.allTasks=[];this.isLoading=!1;this.filterCounts=null;this.badgeElements=new Map;this.updateCountsDebounceTimer=null;this.component=new $.Component,this.plugin=s,this.showOnlyMyTasks=!0}getViewType(){return A}getDisplayText(){return"Task Dashboard"}getIcon(){return"check-square"}async onOpen(){await this.refresh()}async onClose(){this.updateCountsDebounceTimer&&(clearTimeout(this.updateCountsDebounceTimer),this.updateCountsDebounceTimer=null),this.component.unload()}async refresh(){let e=this.containerEl.children[1];e.empty(),e.addClass("dashboard"),e.addClass("markdown-preview-view"),this.showLoadingState(e);try{await this.loadAndDisplayDashboard(e)}catch(s){console.error("Failed to refresh dashboard:",s),this.showErrorState(e,s)}}showLoadingState(e){let s=e.createDiv("dashboard-loading");s.createEl("div",{cls:"loading-spinner"}),s.createEl("p",{text:"Loading tasks...",cls:"loading-text"})}showErrorState(e,s){e.empty();let t=e.createDiv("dashboard-error");t.createEl("h2",{text:"\u26A0\uFE0F Error Loading Dashboard"}),t.createEl("p",{text:"Failed to load tasks. Please try refreshing."}),t.createEl("pre",{text:(s==null?void 0:s.message)||"Unknown error",cls:"error-details"});let i=t.createEl("button",{text:"\u{1F504} Retry",cls:"dashboard-control-btn"});i.onclick=()=>this.refresh()}async loadAndDisplayDashboard(e){var l,n;e.empty();let s=e.createDiv("dashboard-header");s.createEl("h1",{text:"TASK DASHBOARD",cls:"title"});let t=s.createDiv("dashboard-controls");if((n=(l=this.plugin)==null?void 0:l.settings)!=null&&n.dashboardMyName){let c=t.createEl("button",{text:this.showOnlyMyTasks?"\u{1F465} Show All Tasks":"\u{1F464} Show My Tasks",cls:"dashboard-control-btn dashboard-toggle-btn"});c.onclick=()=>{this.showOnlyMyTasks=!this.showOnlyMyTasks,c.textContent=this.showOnlyMyTasks?"\u{1F465} Show All Tasks":"\u{1F464} Show My Tasks",this.updateFilterCounts(!0),this.updateTaskDisplay()}}let i=t.createEl("button",{text:"\u{1F504} Refresh",cls:"dashboard-control-btn dashboard-refresh-btn"});i.onclick=()=>this.refresh();let o=e.createDiv("dashboard-filters");this.createFilterButtons(o);try{this.isLoading=!0,this.allTasks=await this.loadTasks()}catch(c){console.error("Failed to load tasks:",c),new $.Notice("Failed to load tasks. Check console for details."),this.allTasks=[]}finally{this.isLoading=!1}this.updateFilterCounts(!0);let a=this.getFilteredTasks();await this.displayTasks(e,a),this.applyDashboardStyles()}createBadgeElement(e,s){if(e===0)return null;let t=document.createElement("span");return t.className="filter-badge",t.setAttribute("data-filter-type",s),t.textContent=e.toString(),t}createFilterButtons(e){let s=e.createDiv("filter-group");this.badgeElements.clear();let t=this.getCurrentFilterCounts();this.filterCounts=t,[{label:"High Priority",filter:"high",active:!0,dataAttr:"high",count:t.high},{label:"Medium Priority",filter:"medium",dataAttr:"medium",count:t.medium},{label:"Low Priority",filter:"low",dataAttr:"low",count:t.low},{label:"Past Due",filter:"overdue",dataAttr:"overdue",count:t.overdue},{label:"Due Today",filter:"today",dataAttr:"due-today",count:t.today},{label:"Due This Week",filter:"week",dataAttr:"due-week",count:t.week},{label:"Completed",filter:"completed",dataAttr:"completed",count:t.completed}].forEach(o=>{let a=s.createEl("button",{cls:o.active?"filter-btn active":"filter-btn"});a.setAttribute("data-filter",o.dataAttr);let l=a.createEl("span",{text:o.label,cls:"filter-btn-label"}),n=this.createBadgeElement(o.count,o.dataAttr);n&&(a.appendChild(n),this.badgeElements.set(o.filter,n)),a.onclick=()=>{a.hasClass("active")?(a.removeClass("active"),this.applyFilter("all")):(s.querySelectorAll(".filter-btn").forEach(c=>{c instanceof HTMLElement&&c.removeClass("active")}),a.addClass("active"),this.applyFilter(o.filter))}})}async loadTasks(){let e=[],s=this.app.vault.getMarkdownFiles();for(let t of s){let i=await this.extractTasksFromFile(t);e.push(...i)}return e}async extractTasksFromFile(e){let s=[];try{let i=(await this.app.vault.read(e)).split(`
`);for(let o=0;o<i.length;o++){let a=i[o],l=a.match(/^[\s-]*\[([ x])\]\s+(.+)/);if(l){let n=l[1]==="x",c=l[2],d="medium";a.includes("\u23EB")||a.includes("\u{1F53C}")||a.includes("\u{1F534}")||c.includes("High Priority")?d="high":a.includes("\u23EC")||a.includes("\u{1F53D}")||a.includes("\u{1F7E2}")||c.includes("Low Priority")?d="low":a.includes("\u{1F7E1}")&&(d="medium");let h=c.match(/\[\[@?([^\]]+)\]\]/),g=h?h[1]:"Unassigned",m=c.match(/📅\s*(\d{4}-\d{2}-\d{2})/),p=m?m[1]:"",k=c.match(/⚠️\s*(\d+)%/),f=k?parseInt(k[1]):100,y=c.match(/#(\w+)/),w=y?y[1]:"general",T=c.replace(/\[\[@?[^\]]+\]\]/g,"").replace(/📅\s*\d{4}-\d{2}-\d{2}/g,"").replace(/[🔴🟡🟢]/g,"").replace(/⚠️\s*\d+%/g,"").replace(/#\w+/g,"").trim();s.push({text:T,completed:n,assignee:g,dueDate:p,priority:d,confidence:f,category:w,file:e,line:o,rawLine:a})}}}catch(t){console.error(`Failed to read file ${e.path}:`,t)}return s}async displayTasks(e,s){let t=s.filter(l=>l.priority==="high"&&!l.completed),i=s.filter(l=>l.priority==="medium"&&!l.completed),o=s.filter(l=>l.priority==="low"&&!l.completed),a=s.filter(l=>l.completed);if(t.length>0&&await this.createTaskSection(e,"\u{1F534} High Priority",t,"high"),i.length>0&&await this.createTaskSection(e,"\u{1F7E1} Medium Priority",i,"medium"),o.length>0&&await this.createTaskSection(e,"\u{1F7E2} Low Priority",o,"low"),a.length>0){let l=e.createDiv("task-section completed-section"),n=l.createEl("h2",{text:`\u2705 Completed (${a.length})`,cls:"collapsible"}),c=l.createDiv("task-grid collapsed");n.onclick=()=>{c.hasClass("collapsed")?(c.removeClass("collapsed"),n.removeClass("collapsed")):(c.addClass("collapsed"),n.addClass("collapsed"))},await this.createTaskCards(c,a,"completed")}}async createTaskSection(e,s,t,i){let o=e.createDiv(`task-section ${i}-section`);o.createEl("h2",{text:`${s} (${t.length})`});let a=o.createDiv("task-grid");await this.createTaskCards(a,t,i)}async createTaskCards(e,s,t){let i={};s.forEach(a=>{let l=a.assignee||"Unassigned";i[l]||(i[l]=[]),i[l].push(a)});let o=Object.keys(i).sort((a,l)=>{var c,d,h;let n=(h=(d=(c=this.plugin)==null?void 0:c.settings)==null?void 0:d.dashboardMyName)==null?void 0:h.toLowerCase();if(n){let g=n.split(",").map(y=>y.trim()).filter(y=>y.length>0),m=a.toLowerCase(),p=l.toLowerCase(),k=g.some(y=>m.includes(y)),f=g.some(y=>p.includes(y));if(k&&!f)return-1;if(f&&!k)return 1}return a.localeCompare(l)});for(let a of o){let l=e.createDiv(`task-card ${t}-card`),c=l.createDiv("card-header").createEl("h3",{text:`\u{1F464} ${a}`,cls:"card-assignee-title"}),d=l.createEl("ul",{cls:"task-list"});for(let h of i[a]){let g=d.createEl("li",{cls:"task-list-item"}),m=g.createEl("input",{type:"checkbox",cls:"task-checkbox"});m.checked=h.completed,m.onclick=async()=>{await this.toggleTask(h,m.checked,g)};let p=g.createDiv("task-content"),k=p.createEl("span",{text:h.text,cls:h.completed?"task-text completed clickable":"task-text clickable"});k.onclick=async v=>{v.stopPropagation();let D=this.app.workspace.getLeaf(!1);await D.openFile(h.file);let S=D.view;if(S&&"editor"in S){let E=S.editor;E&&(E.setCursor(h.line,0),E.scrollIntoView({from:{line:Math.max(0,h.line-5),ch:0},to:{line:Math.min(E.lineCount()-1,h.line+5),ch:0}}))}},k.title=`Click to open: ${h.file.basename}`;let f=p.createDiv("task-meta"),y=f.createEl("span",{cls:"task-source clickable",text:`\u{1F4C4} ${h.file.basename}`});if(y.onclick=k.onclick,y.title=`Click to open: ${h.file.basename}`,h.dueDate){let v=f.createEl("span",{cls:"task-due"});v.setText(`\u{1F4C5} ${h.dueDate}`),!h.completed&&new Date(h.dueDate)<new Date&&v.addClass("overdue")}h.category&&f.createEl("span",{text:`#${h.category}`,cls:"task-category"}),h.confidence&&h.confidence<70&&f.createEl("span",{text:`\u26A0\uFE0F ${h.confidence}%`,cls:"task-confidence"});let w=f.createEl("a",{text:"\u{1F4C4}",cls:"task-source",title:h.file.basename});w.onclick=v=>{v.preventDefault(),this.app.workspace.getLeaf().openFile(h.file)};let T=g.createEl("button",{cls:"task-edit-btn",text:"\u270F\uFE0F",title:"Edit task"}),x=g.createEl("div",{cls:"task-edit-controls"});x.style.display="none";let b=!1;if(T.onclick=()=>{b=!b,x.style.display=b?"block":"none",T.classList.toggle("active",b)},x){let v=x.createDiv("task-edit-row"),D=v.createEl("select",{cls:"task-priority-select"});["high","medium","low"].forEach(P=>{let _=D.createEl("option",{text:P,value:P});P===h.priority&&(_.selected=!0)}),D.onchange=async()=>{await this.updateTaskPriority(h,D.value,g)};let S=v.createEl("input",{type:"text",cls:"task-assignee-input",placeholder:"Assign to...",value:h.assignee}),E=v.createEl("button",{text:"\u2713",cls:"task-save-btn",title:"Save assignee"});E.onclick=async()=>{await this.updateTaskAssignee(h,S.value,g)}}}}}async toggleTask(e,s,t){try{let o=(await this.app.vault.read(e.file)).split(`
`);s?o[e.line]=e.rawLine.replace("[ ]","[x]"):o[e.line]=e.rawLine.replace("[x]","[ ]"),await this.app.vault.modify(e.file,o.join(`
`)),e.completed=s,t&&s?(t.style.transition="opacity 0.3s ease-out, transform 0.3s ease-out",t.style.opacity="0",t.style.transform="translateX(-10px)",setTimeout(()=>{t.remove();let a=t.closest(".task-card");a&&a.querySelectorAll(".task-list-item").length===0&&(a.style.transition="opacity 0.3s ease-out",a.style.opacity="0",setTimeout(()=>{a.remove();let n=a.closest(".task-section");n&&n.querySelectorAll(".task-card").length===0&&(n.style.display="none")},300)),this.updateStatsOnly(),this.updateFilterCounts()},300)):s||setTimeout(()=>this.refresh(),500)}catch(i){console.error("Failed to toggle task:",i),new $.Notice("Failed to update task. Please try again.")}}async updateTaskPriority(e,s,t){try{let o=(await this.app.vault.read(e.file)).split(`
`),a=o[e.line];a=a.replace(/🔴\s*/g,"").replace(/🟡\s*/g,"").replace(/🟢\s*/g,""),a=a.replace(/High Priority/gi,"").replace(/Medium Priority/gi,"").replace(/Low Priority/gi,"");let l=a.match(/^([\s-]*)\[([x ]?)\]\s*/);if(l){let n=l[0],c=a.substring(n.length),d="";s==="high"?d="\u{1F534} ":s==="medium"?d="\u{1F7E1} ":s==="low"&&(d="\u{1F7E2} "),o[e.line]=n+d+c.trim()}if(await this.app.vault.modify(e.file,o.join(`
`)),e.priority=s,t){let n=t.closest(".task-card"),c=n==null?void 0:n.closest(".task-section");if(n&&c){let d=this.containerEl.children[1],h="";s==="high"?h="high-priority":s==="medium"?h="medium-priority":h="low-priority";let g=d.querySelector(`.task-section.${h}`);g&&g!==c&&(t.style.transition="opacity 0.3s ease-out",t.style.opacity="0",setTimeout(()=>{t.remove(),n.querySelectorAll(".task-list-item").length===0&&(n.style.transition="opacity 0.3s ease-out",n.style.opacity="0",setTimeout(()=>n.remove(),300));let p=e.assignee,k=Array.from(g.querySelectorAll(".task-card")).find(y=>{var T;let w=(T=y.querySelector("h3"))==null?void 0:T.textContent;return w==null?void 0:w.includes(p)});k||(k=g.createDiv(`task-card ${s}-card`),k.createDiv("card-header").createEl("h3",{text:`\u{1F464} ${p}`,cls:"card-assignee-title"}),k.createEl("ul",{cls:"task-list"}));let f=k.querySelector(".task-list");if(f){let y=f.createEl("li",{cls:"task-list-item"});y.innerHTML=t.innerHTML;let w=y.querySelector(".task-checkbox");w&&(w.onclick=async()=>{await this.toggleTask(e,w.checked,y)}),y.style.opacity="0",setTimeout(()=>{y.style.transition="opacity 0.3s ease-in",y.style.opacity="1"},10)}this.updateStatsOnly()},300))}}else setTimeout(()=>this.refresh(),500)}catch(i){console.error("Failed to update task priority:",i),new $.Notice("Failed to update priority. Please try again.")}}async updateTaskAssignee(e,s,t){try{let o=(await this.app.vault.read(e.file)).split(`
`),a=o[e.line];a=a.replace(/\[\[@?[^\]]+\]\]/g,"");let l=a.match(/📅\s*\d{4}-\d{2}-\d{2}/);l&&l.index!==void 0?a=a.substring(0,l.index)+`[[@${s.trim()}]] `+a.substring(l.index):a=a.trim()+` [[@${s.trim()}]]`,o[e.line]=a,await this.app.vault.modify(e.file,o.join(`
`));let n=e.assignee;if(e.assignee=s.trim(),t&&n!==e.assignee){let c=t.closest(".task-card"),d=c==null?void 0:c.closest(".task-section");c&&d&&(t.style.transition="opacity 0.3s ease-out",t.style.opacity="0",setTimeout(()=>{t.remove(),c.querySelectorAll(".task-list-item").length===0&&(c.style.transition="opacity 0.3s ease-out",c.style.opacity="0",setTimeout(()=>c.remove(),300));let g=Array.from(d.querySelectorAll(".task-card")).find(p=>{var f;let k=(f=p.querySelector("h3"))==null?void 0:f.textContent;return k==null?void 0:k.includes(e.assignee)});if(!g){let p=e.priority||"medium";g=d.createDiv(`task-card ${p}-card`),g.createDiv("card-header").createEl("h3",{text:`\u{1F464} ${e.assignee}`,cls:"card-assignee-title"}),g.createEl("ul",{cls:"task-list"})}let m=g.querySelector(".task-list");if(m){let p=m.createEl("li",{cls:"task-list-item"});p.innerHTML=t.innerHTML;let k=p.querySelector(".task-metadata");k&&(k.innerHTML=k.innerHTML.replace(/👤\s*[^<]*/g,`\u{1F464} ${e.assignee}`));let f=p.querySelector(".task-checkbox");f&&(f.onclick=async()=>{await this.toggleTask(e,f.checked,p)});let y=p.querySelector(".edit-button");if(y){let w=p.querySelector(".edit-container");if(w){y.onclick=()=>{w.style.display=w.style.display==="none"?"flex":"none"};let T=w.querySelector("select");T&&(T.onchange=async()=>{await this.updateTaskPriority(e,T.value,p)});let x=w.querySelector("button"),b=w.querySelector("input");x&&b&&(x.onclick=async()=>{await this.updateTaskAssignee(e,b.value,p)})}}p.style.opacity="0",setTimeout(()=>{p.style.transition="opacity 0.3s ease-in",p.style.opacity="1"},10)}this.updateStatsOnly()},300))}else t||setTimeout(()=>this.refresh(),500)}catch(i){console.error("Failed to update task assignee:",i),new $.Notice("Failed to update assignee. Please try again.")}}applyFilter(e){this.containerEl.querySelectorAll(".task-section").forEach(t=>{if(!(t instanceof HTMLElement))return;let i=t.querySelectorAll(".task-card"),o=!1;i.forEach(a=>{var n,c,d,h;if(!(a instanceof HTMLElement))return;let l=!0;switch(e){case"all":l=!0;break;case"high":l=a.hasClass("high-card");break;case"medium":l=a.hasClass("medium-card");break;case"low":l=a.hasClass("low-card");break;case"completed":l=a.hasClass("completed-card");break;case"mine":let g=a.querySelector("h3");if(g&&g.textContent){let m=g.textContent.replace(/^👤\s*/,"").trim().toLowerCase(),p=(h=(d=(c=(n=this.plugin)==null?void 0:n.settings)==null?void 0:c.dashboardMyName)==null?void 0:d.toLowerCase())==null?void 0:h.trim();p?l=p.split(",").map(f=>f.trim()).filter(f=>f.length>0).some(f=>m===f||m.includes(f)):l=!1}else l=!1;break;case"overdue":l=this.hasTasksOverdue(a);break;case"today":l=this.hasTasksDueToday(a);break;case"week":l=this.hasTasksDueThisWeek(a);break}a.style.display=l?"block":"none",l&&(o=!0)}),t.style.display=o?"block":"none"})}hasTasksDueToday(e){var o;if(e.classList.contains("completed-card"))return!1;let s=e.querySelectorAll(".task-list-item"),t=new Date;t.setHours(0,0,0,0);let i=new Date(t);i.setDate(i.getDate()+1);for(let a of Array.from(s)){let l=a.querySelector(".task-checkbox");if(l&&l.checked)continue;let n=a.querySelector(".task-due");if(n){let c=(o=n.textContent)==null?void 0:o.match(/\d{4}-\d{2}-\d{2}/);if(c){let d=new Date(c[0]+"T00:00:00");if(d.setHours(0,0,0,0),d>=t&&d<i)return!0}}}return!1}hasTasksDueThisWeek(e){var o;if(e.classList.contains("completed-card"))return!1;let s=e.querySelectorAll(".task-list-item"),t=new Date;t.setHours(0,0,0,0);let i=new Date(t);i.setDate(i.getDate()+7);for(let a of Array.from(s)){let l=a.querySelector(".task-checkbox");if(l&&l.checked)continue;let n=a.querySelector(".task-due");if(n){let c=(o=n.textContent)==null?void 0:o.match(/\d{4}-\d{2}-\d{2}/);if(c){let d=new Date(c[0]+"T00:00:00");if(d.setHours(0,0,0,0),d>=t&&d<=i)return!0}}}return!1}hasTasksOverdue(e){var i;if(e.classList.contains("completed-card"))return!1;let s=e.querySelectorAll(".task-list-item"),t=new Date;t.setHours(0,0,0,0);for(let o of Array.from(s)){let a=o.querySelector(".task-checkbox");if(a&&a.checked)continue;let l=o.querySelector(".task-due");if(l){let n=(i=l.textContent)==null?void 0:i.match(/\d{4}-\d{2}-\d{2}/);if(n){let c=new Date(n[0]+"T00:00:00");if(c.setHours(0,0,0,0),c<t)return!0}}}return!1}updateStatsOnly(){}getFilteredTasks(){var e,s;if(this.showOnlyMyTasks&&((s=(e=this.plugin)==null?void 0:e.settings)!=null&&s.dashboardMyName)){let t=this.plugin.settings.dashboardMyName.split(",").map(i=>i.toLowerCase().trim()).filter(i=>i.length>0);return t.length===0?this.allTasks:this.allTasks.filter(i=>{let o=i.assignee.toLowerCase().trim();return t.some(a=>o===a||o.includes(a))})}return this.allTasks}calculateFilterCounts(e){let s=new Date,t=new Date(s.getFullYear(),s.getMonth(),s.getDate()),i=new Date(t.getTime()+1440*60*1e3-1),o=new Date(t.getTime()+10080*60*1e3),a={high:0,medium:0,low:0,today:0,week:0,overdue:0,completed:0};for(let l of e){if(!l.completed&&(l.priority==="high"?a.high++:l.priority==="medium"?a.medium++:l.priority==="low"&&a.low++,l.dueDate)){let n=new Date(l.dueDate);n<t?a.overdue++:n>=t&&n<=i&&a.today++,n>=t&&n<=o&&a.week++}l.completed&&a.completed++}return a}getCurrentFilterCounts(){let e=this.getFilteredTasks();return this.calculateFilterCounts(e)}updateFilterCountsImmediate(){let e=this.getCurrentFilterCounts();this.filterCounts=e;let s=(t,i)=>{let o=this.badgeElements.get(t);if(o)i>0?(o.textContent=i.toString(),o.style.display="inline-flex"):o.style.display="none";else if(i>0){let a=this.containerEl.querySelector(`[data-filter="${this.getDataAttr(t)}"]`);if(a){let l=this.createBadgeElement(i,this.getDataAttr(t));l&&(a.appendChild(l),this.badgeElements.set(t,l))}}};s("high",e.high),s("medium",e.medium),s("low",e.low),s("overdue",e.overdue),s("today",e.today),s("week",e.week),s("completed",e.completed)}updateFilterCounts(e=!1){if(e){this.updateFilterCountsImmediate();return}this.updateCountsDebounceTimer&&clearTimeout(this.updateCountsDebounceTimer),this.updateCountsDebounceTimer=setTimeout(()=>{this.updateFilterCountsImmediate(),this.updateCountsDebounceTimer=null},150)}getDataAttr(e){return{high:"high",medium:"medium",low:"low",overdue:"overdue",today:"due-today",week:"due-week",completed:"completed"}[e]||e}async updateTaskDisplay(){try{let e=this.containerEl.children[1];e.querySelectorAll(".task-section").forEach(i=>i.remove());let t=this.getFilteredTasks();await this.displayTasks(e,t)}catch(e){console.error("Failed to update task display:",e),new $.Notice("Failed to update display. Please refresh.")}}applyDashboardStyles(){}};var I=require("obsidian"),L=class{constructor(r,e){this.getStoredToken=r;this.saveToken=e;this.credentials=null;this.token=null;this.baseUrl="https://gmail.googleapis.com/gmail/v1";this.authBaseUrl="https://accounts.google.com/o/oauth2";this.tokenUrl="https://oauth2.googleapis.com/token";this.redirectUri="http://localhost";this.token=this.getStoredToken()}setCredentials(r,e,s){this.redirectUri=s||"http://localhost",this.credentials={client_id:r,client_secret:e,redirect_uri:this.redirectUri}}getAuthorizationUrl(){if(!this.credentials)throw new Error("Credentials not set. Please configure Google OAuth in settings.");let r=new URLSearchParams({client_id:this.credentials.client_id,redirect_uri:this.redirectUri,response_type:"code",scope:"https://www.googleapis.com/auth/gmail.readonly",access_type:"offline",prompt:"consent"});return`${this.authBaseUrl}/auth?${r.toString()}`}async exchangeCodeForToken(r){if(!this.credentials)throw new Error("Credentials not set");try{let e=await(0,I.requestUrl)({url:this.tokenUrl,method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({code:r,client_id:this.credentials.client_id,client_secret:this.credentials.client_secret,redirect_uri:this.redirectUri,grant_type:"authorization_code"}).toString()});if(e.status===200){let s=e.json;this.token={access_token:s.access_token,refresh_token:s.refresh_token,expiry_date:Date.now()+s.expires_in*1e3,token_type:s.token_type,scope:s.scope},await this.saveToken(this.token)}else throw new Error(`Failed to exchange code: ${e.text}`)}catch(e){throw console.error("OAuth token exchange failed:",e),e}}async refreshAccessToken(){var r;if(!this.credentials||!((r=this.token)!=null&&r.refresh_token))throw new Error("Cannot refresh token: missing credentials or refresh token");try{let e=await(0,I.requestUrl)({url:this.tokenUrl,method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({refresh_token:this.token.refresh_token,client_id:this.credentials.client_id,client_secret:this.credentials.client_secret,grant_type:"refresh_token"}).toString()});if(e.status===200){let s=e.json;this.token={...this.token,access_token:s.access_token,expiry_date:Date.now()+s.expires_in*1e3},await this.saveToken(this.token)}else throw new Error(`Failed to refresh token: ${e.text}`)}catch(e){throw console.error("Token refresh failed:",e),e}}async ensureValidToken(){if(!this.token)throw new Error("Not authenticated. Please authenticate with Gmail first.");this.token.expiry_date&&Date.now()>=this.token.expiry_date-6e4&&(console.log("[Gmail] Token expired or expiring soon, refreshing..."),await this.refreshAccessToken())}async makeGmailRequest(r,e={}){await this.ensureValidToken();let s=r.startsWith("http")?r:`${this.baseUrl}${r}`;try{let t=await(0,I.requestUrl)({url:s,method:e.method||"GET",headers:{Authorization:`Bearer ${this.token.access_token}`,"Content-Type":"application/json",...e.headers},...e});return t.status===401?(console.log("[Gmail] Received 401, attempting token refresh..."),await this.refreshAccessToken(),(await(0,I.requestUrl)({url:s,method:e.method||"GET",headers:{Authorization:`Bearer ${this.token.access_token}`,"Content-Type":"application/json",...e.headers},...e})).json):t.json}catch(t){throw console.error(`Gmail API request failed: ${r}`,t),t}}async searchEmails(r,e=100,s=5,t=!0){try{console.log(`[Gmail] Searching with query: ${r}, max: ${e}`);let i=[],o,a=0,l=1;for(;a<e;){let h=Math.min(e-a,500),g=`/users/me/messages?q=${encodeURIComponent(r)}&maxResults=${h}`;o?(g+=`&pageToken=${o}`,console.log(`[Gmail] Fetching page ${l} with token: ${o.substring(0,10)}...`)):console.log(`[Gmail] Fetching page ${l} (first page), requesting ${h} messages`);let m=await this.makeGmailRequest(g);if(!m.messages||m.messages.length===0){if(a===0)return console.log("[Gmail] No messages found"),[];console.log(`[Gmail] No more messages on page ${l}`);break}if(i.push(...m.messages),a+=m.messages.length,console.log(`[Gmail] Page ${l}: Got ${m.messages.length} message IDs (total so far: ${a}/${e})`),m.nextPageToken&&a<e)o=m.nextPageToken,console.log("[Gmail] Next page token available, will fetch more..."),l++;else{m.nextPageToken?console.log(`[Gmail] Reached desired maxResults of ${e}`):console.log("[Gmail] No more pages available (no nextPageToken)");break}}if(console.log(`[Gmail] Total message IDs collected: ${i.length}`),i.length===0)return[];let n=i.slice(0,e).filter(h=>h.id),c=Math.ceil(n.length/s);console.log(`[Gmail] Starting parallel fetch: ${n.length} emails in ${c} batches`);let d=[];for(let h=0;h<n.length;h+=s){let g=n.slice(h,h+s),m=Math.floor(h/s)+1;console.log(`[Gmail] Fetching batch ${m}/${c} (${g.length} emails in parallel)...`);let p=Date.now(),k=g.map(T=>(console.log(`[Gmail] Starting fetch for email ${T.id}`),this.getEmailById(T.id).catch(x=>(console.error(`[Gmail] Failed to fetch message ${T.id}:`,x),null)))),y=(await Promise.all(k)).filter(T=>T!==null);d.push(...y);let w=Date.now()-p;console.log(`[Gmail] Batch ${m} complete: ${y.length}/${g.length} successful in ${w}ms`)}return console.log(`[Gmail] All batches complete: ${d.length} emails fetched successfully`),t&&d.length>0&&(d.sort((h,g)=>{let m=new Date(h.date||0).getTime();return new Date(g.date||0).getTime()-m}),console.log(`[Gmail] Sorted ${d.length} emails by date (newest first)`)),d}catch(i){throw console.error("Email search failed:",i),i}}async getEmailById(r){var e,s,t;try{let i=await this.makeGmailRequest(`/users/me/messages/${r}?format=full`),o=((e=i.payload)==null?void 0:e.headers)||[],a=d=>{let h=o.find(g=>{var m;return((m=g.name)==null?void 0:m.toLowerCase())===d.toLowerCase()});return(h==null?void 0:h.value)||""},l=this.extractBody(i.payload),n=[];if((s=i.payload)!=null&&s.parts)for(let d of i.payload.parts)d.filename&&((t=d.body)!=null&&t.attachmentId)&&n.push({filename:d.filename,mimeType:d.mimeType,size:d.body.size,attachmentId:d.body.attachmentId,downloadUrl:`https://mail.google.com/mail/u/0/?ui=2&ik=${r}&attid=${d.body.attachmentId}&disp=safe&zw`});let c=`https://mail.google.com/mail/u/0/#inbox/${r}`;return{id:r,threadId:i.threadId,subject:a("subject"),from:a("from"),to:a("to"),date:a("date"),body:l,snippet:i.snippet||"",attachments:n,gmailUrl:c}}catch(i){throw console.error(`Failed to get email ${r}:`,i),i}}extractBody(r){var e,s,t;if(!r)return"";if((e=r.body)!=null&&e.data)return atob(r.body.data.replace(/-/g,"+").replace(/_/g,"/"));if(r.parts){for(let i of r.parts)if(i.mimeType==="text/plain"&&((s=i.body)!=null&&s.data))return atob(i.body.data.replace(/-/g,"+").replace(/_/g,"/"));for(let i of r.parts)if(i.mimeType==="text/html"&&((t=i.body)!=null&&t.data))return atob(i.body.data.replace(/-/g,"+").replace(/_/g,"/")).replace(/<[^>]*>/g,"").trim();for(let i of r.parts){let o=this.extractBody(i);if(o)return o}}return""}async fetchRecentMeetingEmails(r,e){let s=new Date;s.setTime(s.getTime()-r*60*60*1e3);let t=s.toISOString().split("T")[0],i=(e||"transcript").split(",").map(l=>l.trim()).filter(l=>l);console.log(`[Gmail] Looking for emails with labels: ${i.join(", ")} after ${t} (${r} hours back)`);let o="";i.length===1?o=`label:${i[0]}`:o=`(${i.map(l=>`label:${l}`).join(" OR ")})`;let a=`${o} after:${t}`;return console.log(`[Gmail] Full query: "${a}"`),this.searchEmails(a,200,5,!0)}isAuthenticated(){var r;return!!((r=this.token)!=null&&r.access_token)}hasRefreshToken(){var r;return!!((r=this.token)!=null&&r.refresh_token)}async testConnection(){try{await this.ensureValidToken();let r=await this.makeGmailRequest("/users/me/profile");return console.log("[Gmail] Connection test successful:",r.emailAddress),!0}catch(r){return console.error("[Gmail] Connection test failed:",r),!1}}clearAuthentication(){this.token=null}};var N=class{constructor(){this.server=null;this.port=42813;this.authCodePromise=null;this.authCodeResolve=null;this.authCodeReject=null}async start(){if(!this.server)return new Promise((r,e)=>{try{let s=window.require("http");this.server=s.createServer((t,i)=>{let o=new URL(t.url,`http://localhost:${this.port}`);if(o.pathname==="/callback"){let a=o.searchParams.get("code"),l=o.searchParams.get("error");i.writeHead(200,{"Content-Type":"text/html"}),a?(i.end(`
                <!DOCTYPE html>
                <html>
                <head>
                  <title>Authentication Successful</title>
                  <style>
                    body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                      display: flex;
                      justify-content: center;
                      align-items: center;
                      min-height: 100vh;
                      margin: 0;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white;
                    }
                    .container {
                      text-align: center;
                      padding: 2rem;
                      background: rgba(255, 255, 255, 0.1);
                      border-radius: 12px;
                      backdrop-filter: blur(10px);
                    }
                    .success-icon {
                      font-size: 4rem;
                      margin-bottom: 1rem;
                    }
                    h1 {
                      margin: 0 0 0.5rem 0;
                      font-size: 2rem;
                    }
                    p {
                      margin: 0.5rem 0;
                      opacity: 0.9;
                      font-size: 1.1rem;
                    }
                    .close-hint {
                      margin-top: 2rem;
                      font-size: 0.9rem;
                      opacity: 0.7;
                    }
                  </style>
                </head>
                <body>
                  <div class="container">
                    <div class="success-icon">\u2705</div>
                    <h1>Authentication Successful!</h1>
                    <p>You can now close this window and return to Obsidian.</p>
                    <p class="close-hint">This window will close automatically in 3 seconds...</p>
                  </div>
                  <script>
                    setTimeout(() => window.close(), 3000);
                  <\/script>
                </body>
                </html>
              `),this.authCodeResolve&&(this.authCodeResolve(a),this.authCodeResolve=null,this.authCodeReject=null)):(i.end(`
                <!DOCTYPE html>
                <html>
                <head>
                  <title>Authentication Failed</title>
                  <style>
                    body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                      display: flex;
                      justify-content: center;
                      align-items: center;
                      min-height: 100vh;
                      margin: 0;
                      background: linear-gradient(135deg, #f5576c 0%, #f093fb 100%);
                      color: white;
                    }
                    .container {
                      text-align: center;
                      padding: 2rem;
                      background: rgba(255, 255, 255, 0.1);
                      border-radius: 12px;
                      backdrop-filter: blur(10px);
                    }
                    .error-icon {
                      font-size: 4rem;
                      margin-bottom: 1rem;
                    }
                    h1 {
                      margin: 0 0 0.5rem 0;
                      font-size: 2rem;
                    }
                    p {
                      margin: 0.5rem 0;
                      opacity: 0.9;
                    }
                    .error-msg {
                      margin-top: 1rem;
                      padding: 1rem;
                      background: rgba(0, 0, 0, 0.2);
                      border-radius: 6px;
                      font-family: monospace;
                      font-size: 0.9rem;
                    }
                  </style>
                </head>
                <body>
                  <div class="container">
                    <div class="error-icon">\u274C</div>
                    <h1>Authentication Failed</h1>
                    <p>There was an error during authentication.</p>
                    ${l?`<div class="error-msg">Error: ${l}</div>`:""}
                    <p>Please close this window and try again.</p>
                  </div>
                </body>
                </html>
              `),this.authCodeReject&&(this.authCodeReject(new Error(l||"Authentication failed")),this.authCodeResolve=null,this.authCodeReject=null))}else i.writeHead(404),i.end("Not found")}),this.server.listen(this.port,"127.0.0.1",()=>{console.log(`[OAuth Server] Started on http://127.0.0.1:${this.port}`),r()}),this.server.on("error",t=>{t.code==="EADDRINUSE"?(console.error(`[OAuth Server] Port ${this.port} is already in use`),e(new Error(`Port ${this.port} is already in use. Please close any other applications using this port.`))):e(t)})}catch(s){e(s)}})}async stop(){if(this.timeoutId&&(clearTimeout(this.timeoutId),this.timeoutId=null),this.authCodeResolve=null,this.authCodeReject=null,this.authCodePromise=null,this.server)return new Promise(r=>{this.server.close(()=>{console.log("[OAuth Server] Stopped"),this.server=null,r()})})}async waitForAuthCode(){if(!this.server)throw new Error("OAuth server not started");return this.authCodeResolve=null,this.authCodeReject=null,this.authCodePromise=null,this.authCodePromise=new Promise((r,e)=>{this.authCodeResolve=r,this.authCodeReject=e;let s=setTimeout(()=>{this.authCodeResolve=null,this.authCodeReject=null,e(new Error("OAuth timeout - no response received within 5 minutes"))},300*1e3);this.timeoutId=s}),this.authCodePromise}getRedirectUri(){return`http://127.0.0.1:${this.port}/callback`}isRunning(){return this.server!==null}};var B={lookbackTime:"5d",lookbackHours:120,debugMode:!1,anthropicApiKey:"",googleClientId:"",googleClientSecret:"",notesFolder:"Meetings",claudeModel:"claude-3-5-haiku-20241022",dashboardShowOnlyMyTasks:!0,dashboardMyName:"",gmailLabels:"transcript",gmailToken:null,showDetailedNotifications:!0},R=class extends u.Plugin{constructor(){super(...arguments);this.gmailService=null;this.claudeExtractor=null;this.oauthServer=null;this.statusBarItem=null;this.emailIdCache=new Set}parseTimeToHours(e){let s=e.match(/^(\d+(?:\.\d+)?)\s*([hdwM]?)$/);if(!s){let o=parseFloat(e);return isNaN(o)?120:o}let t=parseFloat(s[1]);switch(s[2]||"h"){case"h":return t;case"d":return t*24;case"w":return t*24*7;case"M":return t*24*30;default:return t}}formatTimeString(e){return e<24?`${e}h`:e<168?`${Math.round(e/24)}d`:e<720?`${Math.round(e/168)}w`:`${Math.round(e/720)}M`}async loadEmailIdCache(){console.log("[LoadCache] Starting to load email IDs from vault notes..."),this.emailIdCache.clear();let e=this.app.vault.getMarkdownFiles();console.log(`[LoadCache] Found ${e.length} total markdown files in vault`);let s=0,t=0;for(let i of e)if(i.path.startsWith(this.settings.notesFolder)){s++;try{let a=(await this.app.vault.read(i)).match(/^---\n([\s\S]*?)\n---/);if(a){let l=a[1].match(/emailId:\s*(.+)/);if(l&&l[1]){let n=l[1].trim();this.emailIdCache.add(n),t++,console.log(`[LoadCache] Found emailId: ${n} in ${i.path}`)}}}catch(o){console.error(`[LoadCache] Error reading file ${i.path}:`,o)}}console.log(`[LoadCache] Scanned ${s} meeting notes, found ${t} email IDs`),console.log(`[LoadCache] Cache now contains ${this.emailIdCache.size} unique email IDs`),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),console.log(`[LoadCache] Saved ${this.settings.processedEmails.length} email IDs to settings`)}async onload(){console.log("==============================================="),console.log("Loading Meeting Tasks Plugin..."),console.log("Plugin version: 2.0.0"),console.log("===============================================");let e=await this.loadData();this.settings=Object.assign({},B,e),e!=null&&e.lookbackHours&&!(e!=null&&e.lookbackTime)?(this.settings.lookbackTime=this.formatTimeString(e.lookbackHours),this.settings.lookbackHours=e.lookbackHours):this.settings.lookbackTime&&(this.settings.lookbackHours=this.parseTimeToHours(this.settings.lookbackTime)),this.settings.processedEmails&&(this.settings.processedEmails.forEach(t=>this.emailIdCache.add(t)),console.log(`[Plugin] Loaded ${this.emailIdCache.size} email IDs from settings`)),this.app.workspace.onLayoutReady(async()=>{await this.loadEmailIdCache(),console.log(`[Plugin] Found ${this.emailIdCache.size} existing meeting notes in vault`)}),this.registerEvent(this.app.vault.on("delete",async t=>{var i;if(t instanceof u.TFile&&t.extension==="md"&&t.path.startsWith(this.settings.notesFolder)){console.log(`[Delete] Meeting note deleted: ${t.path}`);let o=this.app.metadataCache.getFileCache(t);if((i=o==null?void 0:o.frontmatter)!=null&&i.emailId){let a=o.frontmatter.emailId;console.log(`[Delete] Removing emailId from cache: ${a}`),this.emailIdCache.delete(a),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),console.log(`[Delete] Updated cache, now contains ${this.emailIdCache.size} email IDs`)}}})),this.registerEvent(this.app.vault.on("rename",async(t,i)=>{var o,a;if(t instanceof u.TFile&&t.extension==="md"){let l=i.startsWith(this.settings.notesFolder),n=t.path.startsWith(this.settings.notesFolder);if(l&&!n){console.log(`[Rename] File moved out of meetings folder: ${i} -> ${t.path}`);let c=this.app.metadataCache.getFileCache(t);if((o=c==null?void 0:c.frontmatter)!=null&&o.emailId){let d=c.frontmatter.emailId;console.log(`[Rename] Removing emailId from cache: ${d}`),this.emailIdCache.delete(d),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),console.log(`[Rename] Cache updated, now contains ${this.emailIdCache.size} email IDs`)}else console.log("[Rename] File has no emailId in frontmatter, skipping cache update")}else if(!l&&n){console.log(`[Rename] File moved into meetings folder: ${i} -> ${t.path}`),await new Promise(d=>setTimeout(d,100));let c=this.app.metadataCache.getFileCache(t);if((a=c==null?void 0:c.frontmatter)!=null&&a.emailId){let d=c.frontmatter.emailId;console.log(`[Rename] Adding emailId to cache: ${d}`),this.emailIdCache.add(d),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),console.log(`[Rename] Cache updated, now contains ${this.emailIdCache.size} email IDs`)}else try{let h=(await this.app.vault.read(t)).match(/^---\n([\s\S]*?)\n---/);if(h){let g=h[1].match(/emailId:\s*(.+)/);if(g&&g[1]){let m=g[1].trim();console.log(`[Rename] Adding emailId to cache (from file content): ${m}`),this.emailIdCache.add(m),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),console.log(`[Rename] Cache updated, now contains ${this.emailIdCache.size} email IDs`)}else console.log("[Rename] File has no emailId in frontmatter, not adding to cache")}else console.log("[Rename] File has no frontmatter, not adding to cache")}catch(d){console.error("[Rename] Error reading file content:",d)}}}})),this.registerObsidianProtocolHandler("meeting-tasks-reprocess",async t=>{t.id&&await this.reprocessEmailById(t.id,!0)}),this.registerObsidianProtocolHandler("meeting-tasks-oauth",async t=>{if(t.code)try{if(!this.gmailService){new u.Notice("Gmail service not initialized");return}await this.gmailService.exchangeCodeForToken(t.code),new u.Notice("\u2705 Successfully authenticated with Gmail!"),await this.initializeServices(),this.app.workspace.trigger("meeting-tasks:auth-complete")}catch(i){new u.Notice(`Authentication failed: ${i.message}`),console.error("OAuth callback error:",i)}else t.error&&new u.Notice(`Authentication failed: ${t.error}`)}),(0,u.addIcon)("mail-check",'<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8"/><path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"/><path d="m16 19 2 2 4-4"/></svg>');let s=this.addRibbonIcon("mail-check","Process meeting emails",async()=>{await this.processEmails()});this.statusBarItem=this.addStatusBarItem(),this.updateStatus("Ready"),this.addCommand({id:"process-meeting-emails",name:"\u{1F4E7} Process meeting emails now",callback:async()=>{await this.processEmails()},hotkeys:[{modifiers:["Mod","Shift"],key:"M"}]}),this.addCommand({id:"open-task-dashboard",name:"Open task dashboard",callback:()=>{this.openTaskDashboard()}}),this.addCommand({id:"quick-process-emails",name:"\u26A1 Quick process (last 24 hours)",callback:async()=>{let t=this.settings.lookbackTime;this.settings.lookbackTime="24h",await this.processEmails(),this.settings.lookbackTime=t}}),this.addCommand({id:"reset-processed-emails",name:"Reset processed emails",callback:async()=>{await this.resetProcessedEmails()}}),this.addCommand({id:"reprocess-meeting-note",name:"\u{1F504} Reprocess current meeting note",callback:async()=>{await this.reprocessCurrentMeetingNote()}}),this.addCommand({id:"reprocess-email-by-id",name:"\u{1F4E7} Reprocess email by ID",callback:async()=>{await this.reprocessEmailById("1995cbb7415c015f")}}),this.registerView(A,t=>new F(t,this)),this.addRibbonIcon("layout-dashboard","Open task dashboard",()=>{this.openTaskDashboard()}),await this.initializeServices(),this.addSettingTab(new H(this.app,this))}async initializeServices(){try{this.gmailService=new L(()=>this.settings.gmailToken,async e=>{this.settings.gmailToken=e,await this.saveSettings()}),this.settings.googleClientId&&this.settings.googleClientSecret?(this.gmailService.setCredentials(this.settings.googleClientId,this.settings.googleClientSecret),this.gmailService.isAuthenticated()?await this.gmailService.testConnection()?this.updateStatus("Gmail connected"):this.updateStatus("Gmail auth needed"):this.updateStatus("Gmail not authenticated")):this.updateStatus("Gmail setup needed"),this.settings.anthropicApiKey&&(this.claudeExtractor=new M(this.settings.anthropicApiKey,this.settings.claudeModel))}catch(e){console.error("Failed to initialize services:",e),new u.Notice(`Error: ${e.message}`)}}async processEmails(){console.log("[processEmails] Starting email processing");try{if(this.updateStatus("\u{1F504} Starting email processing..."),new u.Notice("\u{1F4E7} Starting email processing..."),this.emailIdCache.size===0&&this.app.vault.getMarkdownFiles().length>0&&(console.log("[processEmails] Cache empty, loading from vault..."),await this.loadEmailIdCache()),!this.gmailService){this.updateStatus("\u274C Gmail service not initialized"),new u.Notice("Gmail service not initialized");return}if(!this.gmailService.isAuthenticated()){this.updateStatus("\u274C Not authenticated"),new u.Notice("Please authenticate with Gmail first (see plugin settings)");return}let e=this.parseTimeToHours(this.settings.lookbackTime);this.updateStatus(`\u{1F50D} Searching emails (${this.settings.lookbackTime})...`),new u.Notice(`\u{1F504} Searching for meeting emails from the last ${this.settings.lookbackTime}...`);let s=await this.gmailService.fetchRecentMeetingEmails(e,this.settings.gmailLabels);if(s.length===0){this.updateStatus("\u2705 No new emails found"),new u.Notice(`\u2705 No meeting emails found in the last ${this.settings.lookbackTime}`);return}this.updateStatus(`\u{1F4CA} Found ${s.length} emails`),new u.Notice(`\u{1F4CA} Found ${s.length} meeting emails. Processing...`),s.length>0&&(console.log("[Process] Emails sorted by date (newest first):"),s.slice(0,5).forEach((h,g)=>{var m;console.log(`[Process]   ${g+1}. ${h.date} - ${((m=h.subject)==null?void 0:m.substring(0,50))||"No subject"}`)}),s.length>5&&console.log(`[Process]   ... and ${s.length-5} more emails`));let t=0,i=0,o=0,a=0,l=0;console.log(`[Process] Cache contains ${this.emailIdCache.size} processed email IDs`),console.log("[Process] First 5 cache entries:",Array.from(this.emailIdCache).slice(0,5));let n=s.filter(h=>this.emailIdCache.has(h.id)?(l++,console.log(`[Process] Skipping already processed email: ${h.id} - "${h.subject}"`),!1):(console.log(`[Process] Will process new email: ${h.id} - "${h.subject}"`),!0));console.log(`[Process] Processing ${n.length} new emails (${l} skipped)`);let c=3,d=Math.ceil(n.length/c);console.log(`[Process] Will process in ${d} batches of up to ${c} emails each`);for(let h=0;h<n.length;h+=c){let g=n.slice(h,h+c),m=Math.floor(h/c)+1,p=g.map(b=>b.subject||"Untitled").join(", "),k=this.settings.showDetailedNotifications?`\u{1F4DD} Processing: ${p.substring(0,50)}${p.length>50?"...":""}`:`\u{1F4DD} Processing batch ${m}/${d} (${g.length} emails)...`;this.updateStatus(k),console.log(`
[Process] === Starting Batch ${m}/${d} ===`),console.log(`[Process] Batch contains ${g.length} emails:`),g.forEach((b,v)=>{console.log(`[Process]   ${v+1}. ${b.subject||"No subject"} (ID: ${b.id})`)});let f=Date.now();console.log(`[Process] Starting parallel processing at ${new Date(f).toISOString()}`);let y=g.map(async(b,v)=>{let D=Date.now();console.log(`[Process] Starting email ${v+1}/${g.length}: ${b.id}`);try{let S=await this.processTranscriptEmail(b),E=Date.now()-D;if(S.success){let P=this.settings.showDetailedNotifications&&S.emailTitle?`[Process] \u2705 "${S.emailTitle}" succeeded in ${E}ms (${S.taskCount} tasks, ${S.confidence}% confidence)`:`[Process] \u2705 Email ${v+1} succeeded in ${E}ms (${S.taskCount} tasks, ${S.confidence}% confidence)`;return console.log(P),S}else{let P=this.settings.showDetailedNotifications&&b.subject?`[Process] \u274C "${b.subject.substring(0,50)}" failed in ${E}ms`:`[Process] \u274C Email ${v+1} failed in ${E}ms`;return console.log(P),null}}catch(S){let E=Date.now()-D;return console.error(`[Process] \u274C Email ${v+1} errored in ${E}ms:`,S),null}});console.log(`[Process] Waiting for all ${g.length} emails to complete...`);let w=await Promise.all(y),T=Date.now()-f,x=w.filter(b=>b&&b.success).length;console.log(`[Process] Batch ${m} complete: ${x}/${g.length} successful in ${T}ms`),console.log(`[Process] Average time per email: ${Math.round(T/g.length)}ms`);for(let b of w)b&&b.success&&(t++,i+=b.taskCount||0,o+=b.highPriorityCount||0,a++,b.taskCount&&b.taskCount>0&&(this.settings.showDetailedNotifications&&b.emailTitle?new u.Notice(`\u2705 ${b.emailTitle}: ${b.taskCount} tasks extracted`):new u.Notice(`\u2705 Batch ${m}: Created note with ${b.taskCount} tasks`)))}if(console.log(`
[Process] === Processing Complete ===`),console.log(`[Process] Notes created: ${t}`),console.log(`[Process] Total tasks: ${i}`),console.log(`[Process] High priority tasks: ${o}`),l>0&&t===0)this.updateStatus(`\u2705 All ${l} emails already processed`),new u.Notice(`\u2705 All ${l} emails were already processed`);else if(t>0){this.updateStatus(`\u2705 Created ${t} notes (${i} tasks)`);let h=`\u2705 Successfully created ${t} meeting notes with ${i} tasks`;o>0&&(h+=` (${o} high priority)`),new u.Notice(h,5e3)}else this.updateStatus("\u2705 Processing complete"),new u.Notice("\u2705 Email processing complete (no new notes created)")}catch(e){console.error("Error processing emails:",e),this.updateStatus("\u274C Error processing emails"),new u.Notice(`\u274C Error: ${e.message}`)}}async processTranscriptEmail(e){try{console.log(`[Extract] Starting processing for: ${e.subject} (ID: ${e.id})`);let s=e.body;if(typeof s=="object"&&(s=JSON.stringify(s)),!s||s==="{}"||s==="[object Object]")return console.warn("No valid email content available"),{success:!1};let t;if(this.claudeExtractor&&this.settings.anthropicApiKey){console.log(`[Extract] Starting Claude AI extraction for email ${e.id}...`);let o=Date.now();t=await this.claudeExtractor.extractTasks(s,e.subject);let a=Date.now()-o;console.log(`[Extract] Claude extraction complete in ${a}ms: ${t.tasks.length} tasks with ${t.confidence}% confidence`)}else console.log("No Claude API key, skipping task extraction"),t={tasks:[],summary:e.subject||"Meeting notes",participants:[],meetingDate:e.date?new Date(e.date):new Date,keyDecisions:[],nextSteps:[],confidence:0};let i=await this.createMeetingNote(e,t);if(i){let o=t.tasks.filter(l=>l.priority==="high").length,a=e.subject||"Untitled";return{success:!0,taskCount:t.tasks.length,highPriorityCount:o,confidence:t.confidence,obsidianPath:i,emailTitle:a.substring(0,50)}}return{success:!1}}catch(s){return console.error("Failed to process transcript email:",s),{success:!1}}}async createMeetingNote(e,s){try{let t=s.meetingDate.getFullYear(),i=String(s.meetingDate.getMonth()+1).padStart(2,"0"),o=(0,u.normalizePath)(`${this.settings.notesFolder}/${t}/${i}`),a=(0,u.normalizePath)(`${this.settings.notesFolder}/${t}`);this.app.vault.getAbstractFileByPath(a)||await this.app.vault.createFolder(a),this.app.vault.getAbstractFileByPath(o)||await this.app.vault.createFolder(o);let l=s.meetingDate.toISOString().split("T")[0],n=(e.subject||"Meeting").replace(/[\\/:*?"<>|]/g,"-").substring(0,50),c=`${l} - ${n}.md`,d=(0,u.normalizePath)(`${o}/${c}`),h=this.app.vault.getAbstractFileByPath(d),g=this.formatMeetingNote(e,s);return h instanceof u.TFile?(console.log("Note already exists, replacing:",d),await this.app.vault.modify(h,g)):(await this.app.vault.create(d,g),console.log("Created note:",d)),this.emailIdCache.add(e.id),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),d}catch(t){return console.error("Failed to create note:",t),!1}}formatMeetingNote(e,s){let t=s.meetingDate.toISOString().split("T")[0],i=`---
title: ${e.subject||"Meeting Notes"}
date: ${t}
type: meeting
source: Gmail
emailId: ${e.id}
gmailUrl: ${e.gmailUrl||""}
participants: [${s.participants.map(o=>`"${o}"`).join(", ")}]
confidence: ${s.confidence}
tags: [meeting, ${s.tasks.length>0?"has-tasks":"no-tasks"}]
created: ${new Date().toISOString()}
---

# ${e.subject||"Meeting Notes"}

**Date:** ${s.meetingDate.toLocaleDateString()}
**From:** ${e.from||"Unknown"}
`;if(s.participants.length>0&&(i+=`**Participants:** ${s.participants.map(o=>`[[${o}]]`).join(", ")}
`),e.gmailUrl&&(i+=`**Email:** [View in Gmail](${e.gmailUrl})
`),e.attachments&&e.attachments.length>0&&(i+="**Attachments:** ",i+=e.attachments.map(o=>`${o.filename} (${(o.size/1024).toFixed(1)}KB)`).join(", "),i+=`
`),i+=`**Confidence:** ${s.confidence}%

`,s.summary&&(i+=`## Summary
${s.summary}

`),s.keyDecisions.length>0){i+=`## Key Decisions
`;for(let o of s.keyDecisions)i+=`- ${o}
`;i+=`
`}if(s.tasks.length>0){i+=`## Action Items

`;let o=s.tasks.filter(n=>n.priority==="high"),a=s.tasks.filter(n=>n.priority==="medium"),l=s.tasks.filter(n=>n.priority==="low");if(o.length>0){i+=`### \u{1F534} High Priority
`;for(let n of o)i+=this.formatTask(n);i+=`
`}if(a.length>0){i+=`### \u{1F7E1} Medium Priority
`;for(let n of a)i+=this.formatTask(n);i+=`
`}if(l.length>0){i+=`### \u{1F7E2} Low Priority
`;for(let n of l)i+=this.formatTask(n);i+=`
`}}if(s.nextSteps.length>0){i+=`## Next Steps
`;let o=s.nextSteps.filter(n=>n.priority==="high"),a=s.nextSteps.filter(n=>n.priority==="medium"),l=s.nextSteps.filter(n=>n.priority==="low");if(o.length>0){i+=`### \u{1F534} High Priority
`;for(let n of o)i+=`- [ ] ${n.description} [[@${n.assignee}]]
`;i+=`
`}if(a.length>0){i+=`### \u{1F7E1} Medium Priority
`;for(let n of a)i+=`- [ ] ${n.description} [[@${n.assignee}]]
`;i+=`
`}if(l.length>0){i+=`### \u{1F7E2} Low Priority
`;for(let n of l)i+=`- [ ] ${n.description} [[@${n.assignee}]]
`;i+=`
`}}return e.body&&(i+=`## Original Email
\`\`\`
${e.body.substring(0,1e3)}${e.body.length>1e3?"...":""}
\`\`\`
`),i+=`
---
`,i+=`*Imported from Gmail on ${new Date().toLocaleString()}*

`,i+=`**[\u{1F504} Reprocess this email](obsidian://meeting-tasks-reprocess?id=${e.id})**`,i}formatTask(e){let s=e.dueDate||this.getDefaultDueDate(),t=`- [ ] ${e.description} [[@${e.assignee}]] \u{1F4C5} ${s}`;return e.confidence<70&&(t+=` \u26A0\uFE0F ${e.confidence}%`),e.category&&e.category!=="other"&&(t+=` #${e.category}`),t+=`
`,e.context&&(t+=`  - Context: ${e.context}
`),e.rawText&&e.rawText!==e.description&&(t+=`  > "${e.rawText}"
`),t}getDefaultDueDate(){let e=new Date;return e.setDate(e.getDate()+7),e.toISOString().split("T")[0]}updateStatus(e){this.statusBarItem&&this.statusBarItem.setText(`\u{1F4E7} ${e}`)}async openTaskDashboard(){let{workspace:e}=this.app,s=e.getLeavesOfType(A);if(s.length>0)e.revealLeaf(s[0]);else{let t=e.getRightLeaf(!1);t&&(await t.setViewState({type:A,active:!0}),e.revealLeaf(t))}}async loadSettings(){let e=await this.loadData();this.settings=Object.assign({},B,e)}async saveSettings(){await this.saveData(this.settings)}async reprocessEmailById(e,s=!0){try{if(console.log(`[reprocessEmailById] Reprocessing email: ${e}`),!this.gmailService||!this.gmailService.isAuthenticated()){new u.Notice("Gmail service not authenticated");return}!this.claudeExtractor&&this.settings.anthropicApiKey&&(this.claudeExtractor=new M(this.settings.anthropicApiKey,this.settings.claudeModel),console.log("[reprocessEmailById] Initialized Claude extractor")),this.updateStatus(`\u{1F504} Fetching email ${e}...`);let t=await this.gmailService.getEmailById(e);if(!t){new u.Notice(`Email ${e} not found`);return}let i=null;if(s){let a=this.app.vault.getMarkdownFiles();for(let l of a)if(l.path.startsWith(this.settings.notesFolder))try{let c=(await this.app.vault.read(l)).match(/^---\n([\s\S]*?)\n---/);if(c){let d=c[1].match(/emailId:\s*(.+)/);if(d&&d[1].trim()===e){i=l,console.log(`[Reprocess] Found existing note at: ${l.path}`);break}}}catch(n){console.error(`Error reading file ${l.path}:`,n)}}this.emailIdCache.delete(e);let o=await this.processTranscriptEmail(t);if(o.success){if(i&&o.obsidianPath){let a=o.obsidianPath;i.path!==a?(console.log(`[Reprocess] Deleting old note: ${i.path}`),await this.app.vault.delete(i),new u.Notice("\u2705 Replaced old note with updated version")):console.log(`[Reprocess] Note updated in place: ${i.path}`)}if(this.emailIdCache.add(e),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),new u.Notice(`\u2705 Reprocessed email with ${o.taskCount||0} tasks (Confidence: ${o.confidence}%)`),this.updateStatus(`\u2705 Reprocessed with ${o.taskCount||0} tasks`),o.obsidianPath){let a=this.app.vault.getAbstractFileByPath(o.obsidianPath);a instanceof u.TFile&&await this.app.workspace.getLeaf(!1).openFile(a)}}else new u.Notice("\u274C Failed to reprocess email"),this.updateStatus("\u274C Reprocessing failed")}catch(t){console.error("Error reprocessing email:",t),new u.Notice(`\u274C Error: ${t.message}`),this.updateStatus("\u274C Error reprocessing")}}async reprocessCurrentMeetingNote(){try{let e=this.app.workspace.getActiveFile();if(!e){new u.Notice("No active file. Please open a meeting note to reprocess.");return}let t=(await this.app.vault.read(e)).match(/^---\n([\s\S]*?)\n---/);if(!t){new u.Notice("This file does not appear to be a meeting note (no frontmatter).");return}let o=t[1].match(/emailId:\s*(.+)/);if(!o||!o[1]){new u.Notice("No email ID found in this meeting note. Cannot reprocess.");return}let a=o[1].trim();if(!confirm(`Reprocess Meeting Note?

This will fetch the original email and regenerate the summary and tasks.

Email ID: ${a}`))return;if(this.updateStatus("Reprocessing..."),new u.Notice("Fetching original email..."),!this.gmailService||!this.gmailService.isAuthenticated()){new u.Notice("Gmail not connected. Please authenticate first."),this.updateStatus("Gmail not connected");return}console.log(`Reading email with ID: ${a}`);let n=await this.gmailService.getEmailById(a);if(!n){new u.Notice("Could not find the original email. It may have been deleted."),this.updateStatus("Ready");return}console.log("Found email:",n.subject),new u.Notice("Extracting tasks and summary...");let c=n.body||n.snippet||"",d;if(this.claudeExtractor&&this.settings.anthropicApiKey)console.log("Reprocessing with Claude..."),d=await this.claudeExtractor.extractTasks(c,n.subject),console.log(`Extracted ${d.tasks.length} tasks with ${d.confidence}% confidence`);else{console.log("Claude extractor not available for reprocessing"),new u.Notice("\u274C Claude AI not configured - cannot reprocess");return}let h=this.formatMeetingNote(n,d);await this.app.vault.modify(e,h);let g=d.tasks.length,m=d.tasks.filter(p=>p.priority==="high").length;this.updateStatus(`Reprocessed: ${g} tasks`),new u.Notice(`\u2705 Reprocessed successfully! Found ${g} task${g!==1?"s":""} (${m} high priority)`)}catch(e){console.error("Failed to reprocess meeting note:",e),new u.Notice(`Error reprocessing: ${e.message}`),this.updateStatus("Error")}}async resetProcessedEmails(){console.log("Reset function called");try{if(this.updateStatus("Resetting..."),!confirm(`Reset Processed Emails?

This will clear all processed email records, allowing them to be processed again.`)){console.log("User cancelled reset"),this.updateStatus("Ready");return}console.log("User confirmed reset"),new u.Notice("Resetting processed emails..."),this.emailIdCache.clear(),this.settings.processedEmails=[],await this.saveSettings(),await this.loadEmailIdCache(),new u.Notice("\u2705 Cache refreshed. Existing notes will prevent duplicate processing."),this.updateStatus("Ready")}catch(e){console.error("Reset failed:",e),new u.Notice(`Reset failed: ${e.message}`),this.updateStatus("Error")}}onunload(){console.log("Unloading Meeting Tasks Plugin...")}},H=class extends u.PluginSettingTab{constructor(r,e){super(r,e),this.plugin=e}display(){var a,l;let{containerEl:r}=this;r.empty(),r.createEl("h2",{text:"Meeting Tasks Settings"}),r.createEl("h3",{text:"Google OAuth Settings"}),r.createEl("p",{text:"Create OAuth credentials in Google Cloud Console. Follow the guide for detailed instructions.",cls:"setting-item-description"}),new u.Setting(r).setName("Google Client ID").setDesc("Your Google OAuth Client ID (from Google Cloud Console)").addText(n=>n.setPlaceholder("1234567890-abc...apps.googleusercontent.com").setValue(this.plugin.settings.googleClientId).onChange(async c=>{this.plugin.settings.googleClientId=c,await this.plugin.saveSettings(),await this.plugin.initializeServices()})),new u.Setting(r).setName("Google Client Secret").setDesc("Your Google OAuth Client Secret").addText(n=>(n.setPlaceholder("GOCSPX-...").setValue(this.plugin.settings.googleClientSecret).onChange(async c=>{this.plugin.settings.googleClientSecret=c,await this.plugin.saveSettings(),await this.plugin.initializeServices()}),n.inputEl.type="password",n)),r.createEl("h3",{text:"Gmail Authentication"});let e=r.createEl("p",{text:"\u23F3 Checking authentication status...",cls:"mod-warning setting-item-description"}),s=()=>{if(!this.plugin.gmailService){e.textContent="\u274C Gmail service not initialized",e.className="mod-warning setting-item-description";return}this.plugin.gmailService.isAuthenticated()?this.plugin.gmailService.hasRefreshToken()?(e.textContent="\u2705 Authenticated with Gmail",e.className="mod-success setting-item-description"):(e.textContent="\u26A0\uFE0F Authenticated but missing refresh token",e.className="mod-warning setting-item-description"):(e.textContent="\u274C Not authenticated with Gmail",e.className="mod-warning setting-item-description")};s(),new u.Setting(r).setName("Authenticate with Gmail").setDesc("Click to start the Gmail authentication process").addButton(n=>{var d;let c=n;(d=this.plugin.gmailService)!=null&&d.isAuthenticated()?c.setButtonText("Re-authenticate"):c.setButtonText("Authenticate"),c.onClick(async()=>{var h;if(!this.plugin.gmailService){new u.Notice("Please configure Client ID and Secret first");return}try{if(this.plugin.oauthServer||(this.plugin.oauthServer=new N),!this.plugin.oauthServer.isRunning())try{await this.plugin.oauthServer.start(),new u.Notice("Starting authentication server...")}catch(w){new u.Notice(`Failed to start OAuth server: ${w.message}`);return}let g=this.plugin.oauthServer.getRedirectUri();this.plugin.gmailService.setCredentials(this.plugin.settings.googleClientId,this.plugin.settings.googleClientSecret,g);let m=this.plugin.gmailService.getAuthorizationUrl();window.open(m,"_blank");let p=new u.Modal(this.app);p.contentEl.addClass("gmail-auth-modal"),p.contentEl.createEl("h2",{text:"\u{1F510} Authenticating with Gmail..."});let k=p.contentEl.createDiv("auth-instructions");k.createEl("p",{text:"Please complete the authorization in your browser."}),k.createEl("p",{text:"This window will close automatically when authentication is complete."});let f=p.contentEl.createDiv("auth-loading");f.style.textAlign="center",f.style.marginTop="20px",f.createEl("span",{text:"\u23F3 Waiting for authorization..."});let y=p.contentEl.createEl("button",{text:"Cancel",cls:"auth-cancel-btn"});y.style.marginTop="20px",y.onclick=async()=>{var w;p.close(),await((w=this.plugin.oauthServer)==null?void 0:w.stop())},p.open();try{let w=await this.plugin.oauthServer.waitForAuthCode();if(!w){new u.Notice("No authorization code received"),p.close(),await this.plugin.oauthServer.stop();return}p.close(),new u.Notice("Processing authentication..."),await this.plugin.gmailService.exchangeCodeForToken(w),new u.Notice("\u2705 Successfully authenticated with Gmail!"),s(),await this.plugin.initializeServices(),await this.plugin.oauthServer.stop(),c.setButtonText("Re-authenticate")}catch(w){p.close(),console.error("Authentication error:",w),new u.Notice(`Authentication failed: ${w.message}`),await((h=this.plugin.oauthServer)==null?void 0:h.stop())}}catch(g){new u.Notice(`Failed to start authentication: ${g.message}`)}})}),new u.Setting(r).setName("Clear authentication").setDesc("Remove stored Gmail authentication").addButton(n=>n.setButtonText("Clear").setWarning().onClick(async()=>{var c;(c=this.plugin.gmailService)==null||c.clearAuthentication(),this.plugin.settings.gmailToken=null,await this.plugin.saveSettings(),new u.Notice("Gmail authentication cleared"),s()})),r.createEl("h3",{text:"Email Processing"}),new u.Setting(r).setName("Lookback time").setDesc("How far back to search. Examples: 6h (6 hours), 3d (3 days), 2w (2 weeks), 1M (1 month)").addText(n=>n.setPlaceholder("5d").setValue(this.plugin.settings.lookbackTime||"5d").onChange(async c=>{let d=this.plugin.parseTimeToHours(c);d>0&&(this.plugin.settings.lookbackTime=c,this.plugin.settings.lookbackHours=d,await this.plugin.saveSettings())})),new u.Setting(r).setName("Gmail Labels").setDesc("Gmail labels to filter emails (comma-separated)").addText(n=>n.setPlaceholder("transcript").setValue(this.plugin.settings.gmailLabels).onChange(async c=>{this.plugin.settings.gmailLabels=c||"transcript",await this.plugin.saveSettings()})),r.createEl("h3",{text:"Claude AI Settings"}),new u.Setting(r).setName("Anthropic API Key").setDesc("Your Claude API key for task extraction").addText(n=>n.setPlaceholder("sk-ant-...").setValue(this.plugin.settings.anthropicApiKey).onChange(async c=>{this.plugin.settings.anthropicApiKey=c,await this.plugin.saveSettings(),c&&(this.plugin.claudeExtractor=new M(c,this.plugin.settings.claudeModel))})),new u.Setting(r).setName("Claude Model").setDesc("Which Claude model to use").addDropdown(n=>n.addOption("claude-3-5-haiku-20241022","Claude 3.5 Haiku (Fast & Cheap)").addOption("claude-sonnet-4-20250514","Claude Sonnet 4 (Balanced)").addOption("claude-opus-4-1-20250805","Claude Opus 4.1 (Most Capable)").setValue(this.plugin.settings.claudeModel).onChange(async c=>{this.plugin.settings.claudeModel=c,await this.plugin.saveSettings()})),r.createEl("h3",{text:"Obsidian Settings"}),new u.Setting(r).setName("Notes folder").setDesc("Where to create meeting notes").addText(n=>n.setPlaceholder("Meetings").setValue(this.plugin.settings.notesFolder).onChange(async c=>{this.plugin.settings.notesFolder=c,await this.plugin.saveSettings()})),r.createEl("h3",{text:"Dashboard Settings"}),new u.Setting(r).setName("Show only my tasks").setDesc("Filter dashboard to show only tasks assigned to you").addToggle(n=>n.setValue(this.plugin.settings.dashboardShowOnlyMyTasks).onChange(async c=>{this.plugin.settings.dashboardShowOnlyMyTasks=c,await this.plugin.saveSettings()})),new u.Setting(r).setName("My name(s)").setDesc("Your name(s) for filtering tasks (comma-separated)").addText(n=>n.setPlaceholder("Your name, other name").setValue(this.plugin.settings.dashboardMyName).onChange(async c=>{this.plugin.settings.dashboardMyName=c,await this.plugin.saveSettings()})),r.createEl("h3",{text:"Notification Settings"}),new u.Setting(r).setName("Show detailed notifications").setDesc("Show email titles in status messages while processing").addToggle(n=>n.setValue(this.plugin.settings.showDetailedNotifications).onChange(async c=>{this.plugin.settings.showDetailedNotifications=c,await this.plugin.saveSettings()})),r.createEl("h3",{text:"Actions"}),new u.Setting(r).setName("Process emails now").setDesc("Search for meeting emails and create notes").addButton(n=>n.setButtonText("Process").setCta().onClick(async()=>{await this.plugin.processEmails()})),new u.Setting(r).setName("Reset processed emails").setDesc("Clear the list of already processed emails").addButton(n=>n.setButtonText("Reset").setWarning().onClick(async()=>{await this.plugin.resetProcessedEmails()}));let t=r.createDiv("status-info"),i=(a=this.plugin.gmailService)!=null&&a.isAuthenticated()?"\u2705 Gmail authenticated":"\u274C Gmail not authenticated",o=this.plugin.settings.anthropicApiKey?"\u2705 Claude AI configured":"\u26A0\uFE0F Claude AI not configured";t.createEl("p",{text:i,cls:(l=this.plugin.gmailService)!=null&&l.isAuthenticated()?"mod-success":"mod-warning"}),t.createEl("p",{text:o,cls:this.plugin.settings.anthropicApiKey?"mod-success":"mod-warning"})}};
