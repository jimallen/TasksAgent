/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var Y=Object.defineProperty;var ne=Object.getOwnPropertyDescriptor;var oe=Object.getOwnPropertyNames;var re=Object.prototype.hasOwnProperty;var le=(D,i)=>{for(var e in i)Y(D,e,{get:i[e],enumerable:!0})},ce=(D,i,e,t)=>{if(i&&typeof i=="object"||typeof i=="function")for(let s of oe(i))!re.call(D,s)&&s!==e&&Y(D,s,{get:()=>i[s],enumerable:!(t=ne(i,s))||t.enumerable});return D};var de=D=>ce(Y({},"__esModule",{value:!0}),D);var ue={};le(ue,{default:()=>V});module.exports=de(ue);var p=require("obsidian");var Q=require("obsidian"),N=class{constructor(i,e="claude-3-5-haiku-20241022"){this.apiUrl="https://api.anthropic.com/v1/messages";this.apiKey=i,this.model=e}async extractTasks(i,e){if(!this.apiKey)return console.warn("No Claude API key found, using fallback extraction"),this.fallbackExtraction(i,e);try{let t=this.buildPrompt(i,e),s=await this.callClaude(t);return this.parseResponse(s,i)}catch(t){return console.error("Claude task extraction failed, using fallback",t),this.fallbackExtraction(i,e)}}buildPrompt(i,e){let t=typeof i=="string"?i:JSON.stringify(i);return`You are an expert at extracting actionable tasks from meeting transcripts. Analyze the following meeting transcript and extract all tasks, action items, and commitments.

MEETING SUBJECT: ${e}

TRANSCRIPT:
${t.substring(0,15e3)} ${t.length>15e3?"... [truncated]":""}

Extract the following information and return as JSON:

1. **tasks** - Array of task objects with:
   - description: Clear, actionable task description
   - assignee: Person responsible (use actual names from the meeting, default "Unassigned" if unclear)
   - priority: "high", "medium", or "low" based on urgency/importance
   - confidence: 0-100 score of how confident you are this is a real task
   - dueDate: ISO date string if mentioned (optional)
   - category: engineering/product/design/documentation/communication/other
   - context: Brief context about why this task exists
   - rawText: The original text that led to this task

2. **summary** - 2-3 sentence meeting summary

3. **participants** - Array of participant names (extract all names mentioned)

4. **meetingDate** - ISO date string (use today if not specified)

5. **keyDecisions** - Array of important decisions made

6. **nextSteps** - Array of next step objects with:
   - description: Clear description of the next step
   - assignee: Person responsible (match with participants when possible, default "Unassigned")
   - priority: "high", "medium", or "low" based on importance

Guidelines:
- Focus on explicit commitments ("I will", "I'll", "Let me", "I can", "[Name] will")
- Include tasks with deadlines or time constraints
- Capture follow-ups and action items
- Look for "Next steps", "Action items", "To do", "Follow up" sections
- Check for Google Meet's AI-suggested action items or next steps (often at the end)
- Include any items listed under "Suggested next steps" or "Recommended actions"
- Ignore general discussions or past work
- Be conservative - only extract clear tasks
- Only use names that actually appear in the transcript
- Default assignee should be "Unassigned" for unclear ownership

Return ONLY valid JSON, no other text:`}async callClaude(i){var e,t,s,a,n;try{let r=await(0,Q.requestUrl)({url:this.apiUrl,method:"POST",headers:{"x-api-key":this.apiKey,"anthropic-version":"2023-06-01","content-type":"application/json"},body:JSON.stringify({model:this.model,messages:[{role:"user",content:i}],max_tokens:4e3,temperature:.2,system:"You are a task extraction assistant. Always respond with valid JSON only, no markdown or explanations."})});if((s=(t=(e=r.json)==null?void 0:e.content)==null?void 0:t[0])!=null&&s.text)return r.json.content[0].text;throw new Error("Invalid Claude API response structure")}catch(r){throw((a=r.response)==null?void 0:a.status)===401?console.error("Invalid Claude API key"):((n=r.response)==null?void 0:n.status)===429&&console.error("Claude API rate limit exceeded"),r}}parseResponse(i,e){try{let t=i.match(/\{[\s\S]*\}/);if(!t)throw new Error("No JSON found in response");let s=JSON.parse(t[0]),a=this.normalizeTasks(s.tasks||[]),n=s.participants||[],r=this.normalizeNextSteps(s.nextSteps||[],n),{deduplicatedTasks:l,deduplicatedNextSteps:o}=this.deduplicateTasksAndNextSteps(a,r);return{tasks:l,summary:s.summary||"Meeting transcript processed",participants:n,meetingDate:this.parseDate(s.meetingDate)||new Date,keyDecisions:s.keyDecisions||[],nextSteps:o,confidence:this.calculateOverallConfidence(l)}}catch(t){return console.error("Failed to parse Claude response",t),console.debug("Raw response:",i),this.fallbackExtraction(e,"")}}normalizeTasks(i){return i.map(e=>({description:this.cleanDescription(e.description||""),assignee:e.assignee||"Unassigned",priority:this.normalizePriority(e.priority),confidence:this.normalizeConfidence(e.confidence),dueDate:e.dueDate,category:e.category||"other",context:e.context,rawText:e.rawText})).filter(e=>e.description&&e.description.length>5)}cleanDescription(i){return i.replace(/^[-*•]\s*/,"").replace(/\s+/g," ").trim()}normalizePriority(i){let e=String(i).toLowerCase();return e.includes("high")||e==="3"?"high":e.includes("low")||e==="1"?"low":"medium"}normalizeConfidence(i){let e=Number(i);return isNaN(e)?75:Math.min(100,Math.max(0,e))}parseDate(i){if(!i)return null;let e=new Date(i);return isNaN(e.getTime())?null:e}deduplicateTasks(i){let e=new Set;return i.filter(t=>{let s=`${t.description.toLowerCase()}-${t.assignee.toLowerCase()}`;return e.has(s)?!1:(e.add(s),!0)})}normalizeNextSteps(i,e){return Array.isArray(i)?i.map(t=>{if(typeof t=="string"){let s=this.extractAssigneeFromText(t,e);return{description:this.cleanDescription(t),assignee:s||"Unassigned",priority:"medium"}}else if(typeof t=="object"&&t!==null)return{description:this.cleanDescription(t.description||String(t)),assignee:t.assignee||"Unassigned",priority:this.normalizePriority(t.priority||"medium")};return null}).filter(t=>t!==null&&t.description.length>5):[]}extractAssigneeFromText(i,e){for(let s of e)if(i.toLowerCase().includes(s.toLowerCase()))return s;let t=[/^([A-Z][a-z]+(?:\s+[A-Z][a-z]+)?)\s+(?:will|to|should|needs to)/,/(?:assigned to|owner:|assignee:)\s*([A-Z][a-z]+(?:\s+[A-Z][a-z]+)?)/i];for(let s of t){let a=i.match(s);if(a&&a[1])return a[1]}return null}deduplicateTasksAndNextSteps(i,e){let t=new Set(i.map(a=>a.description.toLowerCase().replace(/[^\w\s]/g,""))),s=e.filter(a=>{let n=a.description.toLowerCase().replace(/[^\w\s]/g,"");for(let r of t){let l=n.split(/\s+/),o=r.split(/\s+/);if(l.filter(h=>o.includes(h)).length>l.length*.6&&l.length>2)return!1}return!0});return{deduplicatedTasks:i,deduplicatedNextSteps:s}}calculateOverallConfidence(i){if(i.length===0)return 0;let e=i.reduce((t,s)=>t+s.confidence,0);return Math.round(e/i.length)}fallbackExtraction(i,e){let t=[],s=i.split(`
`),a=[/(?:I will|I'll|I can|Let me|I need to|I should|I have to)\s+(.+)/i,/(?:TODO|Action|Task|Follow.?up):\s*(.+)/i,/(?:Next steps?|Action items?):\s*(.+)/i,/\[ \]\s+(.+)/,/^[-*•]\s*(.+(?:will|need to|should|must).+)/i];for(let o of s)for(let c of a){let h=o.match(c);h&&t.push({description:this.cleanDescription(h[1]),assignee:"Unassigned",priority:"medium",confidence:50,category:"other",rawText:o})}let n=[],r=/(?:with|from|to|cc|attendees?:)\s*([A-Z][a-z]+(?:\s+[A-Z][a-z]+)*)/gi,l;for(;(l=r.exec(i))!==null;)n.includes(l[1])||n.push(l[1]);return{tasks:this.deduplicateTasks(t),summary:e||"Meeting notes",participants:n,meetingDate:new Date,keyDecisions:[],nextSteps:[],confidence:30}}async extractActionItems(i,e){if(!this.apiKey)return console.warn("No Claude API key found, using fallback extraction"),this.fallbackExtraction(i,e);try{let t=this.buildActionItemPrompt(i,e),s=await this.callClaude(t);return this.parseResponse(s,i)}catch(t){return console.error("Claude action item extraction failed, using fallback",t),this.fallbackExtraction(i,e)}}buildActionItemPrompt(i,e){let t=typeof i=="string"?i:JSON.stringify(i);return`You are an expert at extracting actionable tasks from emails. Analyze the following email and extract all action items, tasks, and commitments.

EMAIL SUBJECT: ${e}

EMAIL CONTENT:
${t.substring(0,15e3)} ${t.length>15e3?"... [truncated]":""}

Extract the following information and return as JSON:

1. **tasks** - Array of task objects with:
   - description: Clear, actionable task description
   - assignee: Person responsible (extract from email, default "Unassigned" if unclear)
   - priority: "high", "medium", or "low" based on urgency/importance
   - confidence: 0-100 score of how confident you are this is a real task
   - dueDate: ISO date string if mentioned (optional)
   - category: engineering/product/design/documentation/communication/other
   - context: Brief context about why this task exists
   - rawText: The original text that led to this task

2. **summary** - 2-3 sentence summary of the email's main purpose

3. **participants** - Array of people mentioned in the email (sender, recipients, mentioned names)

4. **meetingDate** - ISO date string (use email date or today)

5. **keyDecisions** - Array of important decisions or key points from the email

6. **nextSteps** - Array of next step objects with:
   - description: Clear description of the next step
   - assignee: Person responsible (default "Unassigned")
   - priority: "high", "medium", or "low" based on importance

Guidelines for action items:
- Look for explicit requests ("Can you...", "Please...", "Could you...")
- Identify commitments ("I will...", "I'll...", "Let me...")
- Extract deadlines and time constraints
- Include follow-up items ("Need to...", "Should...", "Must...")
- Capture FYI items that require action
- Pay attention to urgent or important markers
- Extract tasks from forwarded emails or threads
- Identify implicit tasks (things that need to happen based on context)

IMPORTANT:
- For assignee matching, look for names in signatures, "From:" fields, and email addresses
- Match assignees with participants when possible
- If multiple people are mentioned, assign to the most relevant person
- Set confidence lower (40-60) if assignee is unclear
- Return ONLY valid JSON, no markdown formatting
- Priority should reflect urgency indicators like "ASAP", "urgent", "by EOD", etc.

Return your response as a single JSON object.`}};var E=require("obsidian");var ee=require("obsidian"),R=class{constructor(i,e="claude-3-5-haiku-20241022"){this.apiUrl="https://api.anthropic.com/v1/messages";this.apiKey=i,this.model=e}async clusterTasks(i){if(!this.apiKey)return console.warn("No Claude API key found, clustering unavailable"),{clusters:[],standalone:i,totalTasksAnalyzed:i.length,clustersCreated:0,summary:"Clustering unavailable without Claude API key"};if(i.length===0)return{clusters:[],standalone:[],totalTasksAnalyzed:0,clustersCreated:0,summary:"No tasks to cluster"};try{let e=this.buildClusteringPrompt(i),t=await this.callClaude(e);return this.parseClusteringResponse(t,i)}catch(e){return console.error("Task clustering failed:",e),{clusters:[],standalone:i,totalTasksAnalyzed:i.length,clustersCreated:0,summary:`Clustering failed: ${e.message}`}}}buildClusteringPrompt(i){return`You are an expert at analyzing and clustering similar tasks. Analyze the following tasks and identify groups of similar or related tasks that could potentially be combined or should be tracked together.

TASKS TO ANALYZE:
${i.map((t,s)=>`${s}. "${t.text}" [Assignee: ${t.assignee}] [Priority: ${t.priority}] [Category: ${t.category||"none"}] [Due: ${t.dueDate||"none"}]`).join(`
`)}

Your goals:
1. **Identify similar tasks** - Tasks that are duplicates, very similar, or closely related
2. **Identify related tasks** - Tasks that are part of the same project/initiative
3. **Suggest combinations** - When multiple tasks can be combined into one
4. **Preserve distinct tasks** - Don't force unrelated tasks into clusters

Clustering guidelines:
- Look for similar descriptions, keywords, or objectives
- Consider task categories and assignees
- Group tasks working toward the same goal
- Identify duplicate or near-duplicate tasks
- Keep minimum cluster size of 2 tasks
- Don't cluster tasks just because they're from the same assignee
- Consider priority levels when suggesting combinations

For each cluster, provide:
- **title**: Short, descriptive name for the cluster (max 50 chars)
- **description**: Why these tasks belong together (max 100 chars)
- **taskIndices**: Array of task indices (numbers from the list above)
- **priority**: Highest priority among clustered tasks ('high', 'medium', or 'low')
- **suggestedAssignee**: Best assignee if combining (or null)
- **combinedTask**: If tasks should be combined, suggest the combined task description (or null if they should remain separate)
- **confidence**: 0-100 score of how confident you are in this cluster

Return ONLY valid JSON in this format:
{
  "clusters": [
    {
      "title": "Cluster name",
      "description": "Why these tasks are related",
      "taskIndices": [0, 3, 5],
      "priority": "high",
      "suggestedAssignee": "John Doe",
      "combinedTask": "Combined task description if applicable",
      "confidence": 85
    }
  ],
  "standaloneIndices": [1, 2, 4],
  "summary": "Brief summary of clustering results"
}

Important:
- Every task index (0 to ${i.length-1}) must appear EXACTLY ONCE in either a cluster or standaloneIndices
- Do not duplicate indices
- Do not skip indices
- Return ONLY the JSON, no other text`}async callClaude(i){var e,t,s,a,n;try{let r=await(0,ee.requestUrl)({url:this.apiUrl,method:"POST",headers:{"x-api-key":this.apiKey,"anthropic-version":"2023-06-01","content-type":"application/json"},body:JSON.stringify({model:this.model,messages:[{role:"user",content:i}],max_tokens:8e3,temperature:.2,system:"You are a task clustering assistant. Always respond with valid JSON only, no markdown or explanations. Ensure all strings are properly escaped and no trailing commas exist in arrays or objects."})});if((s=(t=(e=r.json)==null?void 0:e.content)==null?void 0:t[0])!=null&&s.text)return r.json.content[0].text;throw new Error("Invalid Claude API response structure")}catch(r){throw((a=r.response)==null?void 0:a.status)===401?new Error("Invalid Claude API key"):((n=r.response)==null?void 0:n.status)===429?new Error("Claude API rate limit exceeded"):r}}parseClusteringResponse(i,e){var t;try{let s=i.trim();s=s.replace(/^```json\s*/i,"").replace(/^```\s*/,"").replace(/```\s*$/,"");let a=s.match(/\{[\s\S]*\}/);if(!a)throw new Error("No JSON found in response");s=a[0],s=s.replace(/,(\s*[}\]])/g,"$1"),s=s.replace(/"([^"]*)"([^"]*?)"/g,(r,l,o)=>o.includes('"')?`"${l}${o.replace(/"/g,'\\"')}"`:r),console.debug("Attempting to parse JSON, length:",s.length);let n;try{n=JSON.parse(s)}catch(r){let l=(t=r.message.match(/position (\d+)/))==null?void 0:t[1];if(l){let o=parseInt(l),c=Math.max(0,o-100),h=Math.min(s.length,o+100);console.error("JSON parse error near:",s.substring(c,h)),console.error("Error position:",o,"Character:",s[o]),console.error("Last 200 chars:",s.substring(s.length-200));let d=(s.match(/\{/g)||[]).length,u=(s.match(/\}/g)||[]).length,g=(s.match(/\[/g)||[]).length,m=(s.match(/\]/g)||[]).length;if(console.error("Brace balance: { =",d,"} =",u),console.error("Bracket balance: [ =",g,"] =",m),d>u||g>m){console.log("\u26A0\uFE0F JSON appears truncated, attempting to close structures");let f=s,k=d-u,y=g-m;for(;k>0||y>0;)y>0&&(f+="]",y--),k>0&&(f+="}",k--);console.log("Attempting to parse with closures added");try{return n=JSON.parse(f),console.log("\u2713 Successfully parsed with auto-fix!"),this.buildClusteringResult(n,e)}catch(T){console.error("Auto-fix failed:",T.message)}}}throw r}return this.buildClusteringResult(n,e)}catch(s){throw console.error("Failed to parse clustering response:",s),console.debug("Raw response:",i),s}}buildClusteringResult(i,e){let t=[],s=new Set;if(i.clusters&&Array.isArray(i.clusters))for(let n of i.clusters){if(!n.taskIndices||n.taskIndices.length<2)continue;let r=[];for(let l of n.taskIndices)l>=0&&l<e.length&&!s.has(l)&&(r.push(e[l]),s.add(l));r.length>=2&&t.push({id:`cluster-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,title:n.title||"Related Tasks",description:n.description||"Similar tasks",tasks:r,priority:n.priority||"medium",suggestedAssignee:n.suggestedAssignee||void 0,combinedTask:n.combinedTask||void 0,confidence:n.confidence||75})}let a=[];if(i.standaloneIndices&&Array.isArray(i.standaloneIndices))for(let n of i.standaloneIndices)n>=0&&n<e.length&&!s.has(n)&&(a.push(e[n]),s.add(n));for(let n=0;n<e.length;n++)s.has(n)||a.push(e[n]);return{clusters:t,standalone:a,totalTasksAnalyzed:e.length,clustersCreated:t.length,summary:i.summary||`Found ${t.length} clusters from ${e.length} tasks`}}};var B="task-dashboard-view",q=class extends E.ItemView{constructor(e,t){super(e);this.allTasks=[];this.isLoading=!1;this.filterCounts=null;this.badgeElements=new Map;this.updateCountsDebounceTimer=null;this.cachedParticipants=null;this.taskClusterer=null;this.clusteringResult=null;this.showClustered=!1;this.currentFilter="all";this.activeFilters=new Set;this.component=new E.Component,this.plugin=t}getViewType(){return B}getDisplayText(){return"Task Dashboard"}getIcon(){return"check-square"}async onOpen(){console.log("[TaskDashboard] onOpen called"),await this.refresh()}async onClose(){this.updateCountsDebounceTimer&&(clearTimeout(this.updateCountsDebounceTimer),this.updateCountsDebounceTimer=null),this.component.unload()}async refresh(){console.log("[TaskDashboard] refresh called"),console.log("[TaskDashboard] containerEl:",this.containerEl),console.log("[TaskDashboard] containerEl.children:",this.containerEl.children);let e=this.containerEl.children[1];console.log("[TaskDashboard] container:",e),e.empty(),e.addClass("dashboard"),e.addClass("markdown-preview-view"),this.cachedParticipants=null,this.showLoadingState(e);try{await this.loadAndDisplayDashboard(e)}catch(t){console.error("[TaskDashboard] Failed to refresh dashboard:",t),this.showErrorState(e,t)}}showLoadingState(e){let t=e.createDiv("dashboard-loading");t.createEl("div",{cls:"loading-spinner"}),t.createEl("p",{text:"Loading tasks...",cls:"loading-text"})}showErrorState(e,t){e.empty();let s=e.createDiv("dashboard-error");s.createEl("h2",{text:"\u26A0\uFE0F Error Loading Dashboard"}),s.createEl("p",{text:"Failed to load tasks. Please try refreshing."}),s.createEl("pre",{text:(t==null?void 0:t.message)||"Unknown error",cls:"error-details"});let a=s.createEl("button",{text:"\u{1F504} Retry",cls:"dashboard-control-btn"});a.onclick=()=>this.refresh()}async loadAndDisplayDashboard(e){var c;e.empty();let t=e.createDiv("dashboard-header");t.createEl("h1",{text:"TASK DASHBOARD",cls:"title"});let s=t.createDiv("dashboard-controls"),a=s.createEl("button",{text:this.showClustered?"\u{1F4CB} Show Task List":"\u{1F9E9} Show Clustered View",cls:"dashboard-control-btn dashboard-cluster-btn"});a.onclick=async()=>{if(console.log("[ClusterBtn] Clicked. Current showClustered:",this.showClustered),e.querySelectorAll(".task-section").forEach(d=>d.remove()),!this.showClustered)this.showClustered=!0,a.textContent="\u{1F4CB} Show Task List",console.log("[ClusterBtn] Switching to clustered view"),await this.displayClusteredTasks(e),this.activeFilters.size>0&&this.applyMultipleFiltersToClusters();else{this.showClustered=!1,a.textContent="\u{1F9E9} Show Clustered View",console.log("[ClusterBtn] Switching to task list view");let d=this.currentFilter==="delegated"?this.allTasks:this.getFilteredTasks();await this.displayTasks(e,d),this.activeFilters.size>0&&this.applyMultipleFilters()}};let n=s.createEl("button",{text:"\u{1F504} Refresh",cls:"dashboard-control-btn dashboard-refresh-btn"});n.onclick=()=>this.refresh();let r=e.createDiv("dashboard-filters");this.createFilterButtons(r);try{this.isLoading=!0,this.allTasks=await this.loadTasks()}catch(h){console.error("Failed to load tasks:",h),new E.Notice("Failed to load tasks. Check console for details."),this.allTasks=[]}finally{this.isLoading=!1}this.allTasks.some(h=>h.clusterId)&&!this.clusteringResult&&(this.clusteringResult=this.buildClusteringFromSavedIds(),console.log("[Dashboard] Loaded",((c=this.clusteringResult)==null?void 0:c.clusters.length)||0,"clusters from saved IDs")),this.showClustered&&(a.textContent="\u{1F4CB} Show Task List"),console.log("[Dashboard] Current state: showClustered =",this.showClustered),this.updateFilterCounts(!0);let o=this.currentFilter==="delegated"?this.allTasks:this.getFilteredTasks();console.log("[Dashboard] Render state:",{showClustered:this.showClustered,hasClusteringResult:!!this.clusteringResult,currentFilter:this.currentFilter,allTasksCount:this.allTasks.length,displayTasksCount:o.length}),this.showClustered&&this.clusteringResult?(await this.displayClusteredTasks(e),this.activeFilters.size>0&&this.applyMultipleFiltersToClusters()):(console.log("[Dashboard] Calling displayTasks with",o.length,"tasks"),await this.displayTasks(e,o),this.activeFilters.size>0&&this.applyMultipleFilters()),this.applyDashboardStyles()}createBadgeElement(e,t){if(e===0)return null;let s=document.createElement("span");return s.className="filter-badge",s.setAttribute("data-filter-type",t),s.textContent=e.toString(),s}createFilterButtons(e){let t=e.createDiv("filter-group");this.badgeElements.clear();let s=this.getCurrentFilterCounts();this.filterCounts=s,[{label:"\u{1F534} High",filter:"high",active:!1,dataAttr:"high",count:s.high},{label:"\u{1F7E1} Medium",filter:"medium",active:!1,dataAttr:"medium",count:s.medium},{label:"\u23F0 Past Due",filter:"overdue",dataAttr:"overdue",count:s.overdue},{label:"\u{1F4C5} This Week",filter:"week",dataAttr:"due-week",count:s.week},{label:"\u{1F465} Delegated",filter:"delegated",dataAttr:"delegated",count:s.delegated},{label:"\u2705 Done",filter:"completed",dataAttr:"completed",count:s.completed}].forEach(n=>{let r=t.createEl("button",{cls:n.active?"filter-btn active":"filter-btn"});r.setAttribute("data-filter",n.dataAttr);let l=r.createEl("span",{text:n.label,cls:"filter-btn-label"}),o=this.createBadgeElement(n.count,n.dataAttr);o&&(r.appendChild(o),this.badgeElements.set(n.filter,o)),r.onclick=()=>{r.hasClass("active")?(r.removeClass("active"),this.activeFilters.delete(n.filter)):(r.addClass("active"),this.activeFilters.add(n.filter)),console.log("[Filter] Active filters:",Array.from(this.activeFilters)),this.currentFilter=this.activeFilters.size===0?"all":Array.from(this.activeFilters)[0],this.activeFilters.has("delegated")&&this.activeFilters.size===1?this.updateTaskDisplay():this.showClustered?this.applyMultipleFiltersToClusters():this.applyMultipleFilters()}})}async loadTasks(){console.log("[TaskDashboard] loadTasks called");let e=[],t=this.app.vault.getMarkdownFiles();console.log("[TaskDashboard] Found",t.length,"markdown files");for(let s of t){let a=await this.extractTasksFromFile(s);e.push(...a)}return console.log("[TaskDashboard] Loaded",e.length,"total tasks"),e}async extractTasksFromFile(e){let t=[];try{let a=(await this.app.vault.read(e)).split(`
`);for(let n=0;n<a.length;n++){let r=a[n],l=r.match(/^[\s-]*\[([ x])\]\s+(.+)/);if(l){let o=l[1]==="x",c=l[2],h="medium";r.includes("\u23EB")||r.includes("\u{1F53C}")||r.includes("\u{1F534}")||c.includes("High Priority")?h="high":r.includes("\u23EC")||r.includes("\u{1F53D}")||r.includes("\u{1F7E2}")||c.includes("Low Priority")?h="low":r.includes("\u{1F7E1}")&&(h="medium");let d=c.match(/\[\[@?([^\]]+)\]\]/),u=d?d[1]:"Unassigned",g=c.match(/📅\s*(\d{4}-\d{2}-\d{2})/),m=g?g[1]:"",f=c.match(/⚠️\s*(\d+)%/),k=f?parseInt(f[1]):100,y=c.match(/#(\w+)/),T=y?y[1]:"general",C=c.match(/🔗\s*delegated-from:@?([^📆🔗]+?)(?:\s*📆|\s*🔗|\s*$)/),x=C?C[1].trim():void 0,w=c.match(/📆\s*(\d{4}-\d{2}-\d{2})/),v=w?w[1]:void 0,$=[],b=c.matchAll(/🔗@?([^\s]+)📆(\d{4}-\d{2}-\d{2})/g);for(let F of b)$.push({assignee:F[1],date:F[2]});let S=c.match(/🧩\s*cluster:([a-z0-9-]+)/),P=S?S[1]:void 0,I=c.replace(/\[\[@?[^\]]+\]\]/g,"").replace(/📅\s*\d{4}-\d{2}-\d{2}/g,"").replace(/📆\s*\d{4}-\d{2}-\d{2}/g,"").replace(/🔗\s*delegated-from:@?[^📆🔗]+/g,"").replace(/🔗@?[^\s]+📆\d{4}-\d{2}-\d{2}/g,"").replace(/🧩\s*cluster:[a-z0-9-]+/g,"").replace(/[🔴🟡🟢]/g,"").replace(/⚠️\s*\d+%/g,"").replace(/#\w+/g,"").trim();t.push({text:I,completed:o,assignee:u,dueDate:m,priority:h,confidence:k,category:T,file:e,line:n,rawLine:r,delegatedFrom:x,delegatedDate:v,delegationChain:$.length>0?$:void 0,clusterId:P})}}}catch(s){console.error(`Failed to read file ${e.path}:`,s)}return t}async displayTasks(e,t){console.log("[displayTasks] Called with",t.length,"tasks");let s=e.querySelectorAll(".task-section");console.log("[displayTasks] Clearing",s.length,"existing sections"),s.forEach(o=>o.remove());let a=t.filter(o=>o.priority==="high"&&!o.completed),n=t.filter(o=>o.priority==="medium"&&!o.completed),r=t.filter(o=>o.priority==="low"&&!o.completed),l=t.filter(o=>o.completed);if(console.log("[displayTasks] Grouped:",{high:a.length,medium:n.length,low:r.length,completed:l.length}),a.length>0&&(console.log("[displayTasks] Creating high priority section with",a.length,"tasks"),await this.createTaskSection(e,"\u{1F534} High Priority",a,"high")),n.length>0&&(console.log("[displayTasks] Creating medium priority section with",n.length,"tasks"),await this.createTaskSection(e,"\u{1F7E1} Medium Priority",n,"medium")),r.length>0&&(console.log("[displayTasks] Creating low priority section with",r.length,"tasks"),await this.createTaskSection(e,"\u{1F7E2} Low Priority",r,"low")),console.log("[displayTasks] Finished creating sections"),l.length>0){let o=e.createDiv("task-section completed-section"),c=o.createEl("h2",{text:`\u2705 Completed (${l.length})`,cls:"collapsible"}),h=o.createDiv("task-grid collapsed");c.onclick=()=>{h.hasClass("collapsed")?(h.removeClass("collapsed"),c.removeClass("collapsed")):(h.addClass("collapsed"),c.addClass("collapsed"))},await this.createTaskCards(h,l,"completed")}}async createTaskSection(e,t,s,a){let n=e.createDiv(`task-section ${a}-section`);n.createEl("h2",{text:`${t} (${s.length})`});let r=n.createDiv("task-grid");await this.createTaskCards(r,s,a)}async createTaskCards(e,t,s){let a={};t.forEach(r=>{let l=r.assignee||"Unassigned";a[l]||(a[l]=[]),a[l].push(r)});let n=Object.keys(a).sort((r,l)=>{var c,h,d;let o=(d=(h=(c=this.plugin)==null?void 0:c.settings)==null?void 0:h.dashboardMyName)==null?void 0:d.toLowerCase();if(o){let u=o.split(",").map(y=>y.trim()).filter(y=>y.length>0),g=r.toLowerCase(),m=l.toLowerCase(),f=u.some(y=>g.includes(y)),k=u.some(y=>m.includes(y));if(f&&!k)return-1;if(k&&!f)return 1}return r.localeCompare(l)});for(let r of n){let l=e.createDiv(`task-card ${s}-card`),c=l.createDiv("card-header").createEl("h3",{text:`\u{1F464} ${r}`,cls:"card-assignee-title"}),h=l.createEl("ul",{cls:"task-list"});for(let d of a[r]){let u=h.createEl("li",{cls:"task-list-item"}),g=u.createEl("input",{type:"checkbox",cls:"task-checkbox"});g.checked=d.completed,g.onclick=async()=>{await this.toggleTask(d,g.checked,u)};let m=u.createDiv("task-content"),f=m.createEl("span",{text:d.text,cls:d.completed?"task-text completed clickable":"task-text clickable"});f.onclick=async v=>{v.stopPropagation();let $=this.app.workspace.getLeaf(!1);await $.openFile(d.file);let b=$.view;if(b&&"editor"in b){let S=b.editor;S&&(S.setCursor(d.line,0),S.scrollIntoView({from:{line:Math.max(0,d.line-5),ch:0},to:{line:Math.min(S.lineCount()-1,d.line+5),ch:0}}))}},f.title=`Click to open: ${d.file.basename}`;let k=m.createDiv("task-meta"),y=k.createEl("span",{cls:"task-source clickable",text:`\u{1F4C4} ${d.file.basename}`});if(y.onclick=f.onclick,y.title=`Click to open: ${d.file.basename}`,d.dueDate){let v=k.createEl("span",{cls:"task-due"});v.setText(`\u{1F4C5} ${d.dueDate}`),!d.completed&&new Date(d.dueDate)<new Date&&v.addClass("overdue")}if(d.category&&k.createEl("span",{text:`#${d.category}`,cls:"task-category"}),d.confidence&&d.confidence<70&&k.createEl("span",{text:`\u26A0\uFE0F ${d.confidence}%`,cls:"task-confidence"}),d.delegatedFrom){let v=k.createEl("span",{cls:"task-tag task-delegated-tag",text:"DELEGATED",title:`Delegated from ${d.delegatedFrom}${d.delegatedDate?" on "+d.delegatedDate:""}`}),$=k.createEl("span",{cls:"task-delegation",title:`Delegated from ${d.delegatedFrom}${d.delegatedDate?" on "+d.delegatedDate:""}`});$.setText(`\u{1F517} from @${d.delegatedFrom}`),d.delegatedDate&&$.setText(`\u{1F517} from @${d.delegatedFrom} \u{1F4C6} ${d.delegatedDate}`)}if(d.delegationChain&&d.delegationChain.length>0){let v=k.createEl("span",{cls:"task-delegation-chain",title:"Delegation history"}),$=d.delegationChain.map(b=>`@${b.assignee} (${b.date})`).join(" \u2192 ");v.setText(`\u{1F517} Chain: ${$}`)}let T=k.createEl("a",{text:"\u{1F4C4}",cls:"task-source",title:d.file.basename});T.onclick=v=>{v.preventDefault(),this.app.workspace.getLeaf().openFile(d.file)};let C=u.createEl("button",{cls:"task-edit-btn",text:"\u270F\uFE0F",title:"Edit task"}),x=u.createEl("div",{cls:"task-edit-controls"});x.style.display="none";let w=!1;if(C.onclick=()=>{w=!w,x.style.display=w?"block":"none",C.classList.toggle("active",w)},x){let v=x.createDiv("task-edit-row"),$=v.createEl("select",{cls:"task-priority-select"});["high","medium","low"].forEach(A=>{let M=$.createEl("option",{text:A,value:A});A===d.priority&&(M.selected=!0)});let b=v.createEl("input",{type:"text",cls:"task-assignee-input",placeholder:"Type @ to see participants...",value:d.assignee}),S=v.createEl("div",{cls:"task-assignee-autocomplete"});S.style.display="none";let P=[];this.loadAllParticipants().then(A=>{P=A}),b.addEventListener("input",A=>{let M=b.value,L=b.selectionStart||0,J=M.substring(0,L).match(/@(\w*)$/);if(J&&P.length>0){let te=J[1].toLowerCase(),X=P.filter(U=>U.toLowerCase().includes(te));X.length>0?(S.empty(),X.forEach(U=>{let se=S.createEl("div",{cls:"autocomplete-item",text:U});se.onclick=()=>{let ae=M.substring(0,L-J[0].length),ie=M.substring(L);b.value=ae+U+ie,S.style.display="none",b.focus()}}),S.style.display="block"):S.style.display="none"}else S.style.display="none"}),b.addEventListener("blur",()=>{setTimeout(()=>{S.style.display="none"},200)});let I=v.createEl("button",{text:"\u2713",cls:"task-save-btn",title:"Save changes (assignee changes are tracked as delegations)"});I.onclick=async()=>{let A=$.value,M=A!==d.priority,L=b.value.trim(),W=L!==d.assignee&&L!=="";M&&await this.updateTaskPriority(d,A,u),W&&await this.updateTaskDelegation(d,L,u),!M&&!W&&(x.style.display="none",C.classList.remove("active"))};let F=v.createEl("button",{text:"\u2715",cls:"task-cancel-btn",title:"Cancel changes"});F.onclick=()=>{$.value=d.priority,b.value=d.assignee,x.style.display="none",C.classList.remove("active")}}}}}async toggleTask(e,t,s){try{let n=(await this.app.vault.read(e.file)).split(`
`);t?n[e.line]=e.rawLine.replace("[ ]","[x]"):n[e.line]=e.rawLine.replace("[x]","[ ]"),await this.app.vault.modify(e.file,n.join(`
`)),e.completed=t,s&&t?(s.style.transition="opacity 0.3s ease-out, transform 0.3s ease-out",s.style.opacity="0",s.style.transform="translateX(-10px)",setTimeout(()=>{s.remove();let r=s.closest(".task-card");r&&r.querySelectorAll(".task-list-item").length===0&&(r.style.transition="opacity 0.3s ease-out",r.style.opacity="0",setTimeout(()=>{r.remove();let o=r.closest(".task-section");o&&o.querySelectorAll(".task-card").length===0&&(o.style.display="none")},300)),this.updateStatsOnly(),this.updateFilterCounts()},300)):t||setTimeout(()=>this.refresh(),500)}catch(a){console.error("Failed to toggle task:",a),new E.Notice("Failed to update task. Please try again.")}}async updateTaskPriority(e,t,s){try{let n=(await this.app.vault.read(e.file)).split(`
`),r=n[e.line];r=r.replace(/🔴\s*/g,"").replace(/🟡\s*/g,"").replace(/🟢\s*/g,""),r=r.replace(/High Priority/gi,"").replace(/Medium Priority/gi,"").replace(/Low Priority/gi,"");let l=r.match(/^([\s-]*)\[([x ]?)\]\s*/);if(l){let o=l[0],c=r.substring(o.length),h="";t==="high"?h="\u{1F534} ":t==="medium"?h="\u{1F7E1} ":t==="low"&&(h="\u{1F7E2} "),n[e.line]=o+h+c.trim()}if(await this.app.vault.modify(e.file,n.join(`
`)),e.priority=t,s){let o=s.closest(".task-card"),c=o==null?void 0:o.closest(".task-section");if(o&&c){let h=this.containerEl.children[1],d="";t==="high"?d="high-priority":t==="medium"?d="medium-priority":d="low-priority";let u=h.querySelector(`.task-section.${d}`);u&&u!==c&&(s.style.transition="opacity 0.3s ease-out",s.style.opacity="0",setTimeout(()=>{s.remove(),o.querySelectorAll(".task-list-item").length===0&&(o.style.transition="opacity 0.3s ease-out",o.style.opacity="0",setTimeout(()=>o.remove(),300));let m=e.assignee,f=Array.from(u.querySelectorAll(".task-card")).find(y=>{var C;let T=(C=y.querySelector("h3"))==null?void 0:C.textContent;return T==null?void 0:T.includes(m)});f||(f=u.createDiv(`task-card ${t}-card`),f.createDiv("card-header").createEl("h3",{text:`\u{1F464} ${m}`,cls:"card-assignee-title"}),f.createEl("ul",{cls:"task-list"}));let k=f.querySelector(".task-list");if(k){let y=k.createEl("li",{cls:"task-list-item"});y.innerHTML=s.innerHTML;let T=y.querySelector(".task-checkbox");T&&(T.onclick=async()=>{await this.toggleTask(e,T.checked,y)}),y.style.opacity="0",setTimeout(()=>{y.style.transition="opacity 0.3s ease-in",y.style.opacity="1"},10)}this.updateStatsOnly()},300))}}else setTimeout(()=>this.refresh(),500)}catch(a){console.error("Failed to update task priority:",a),new E.Notice("Failed to update priority. Please try again.")}}async updateTaskDelegation(e,t,s){var a,n,r;try{console.log("[TaskDashboard] Delegating task:",e.text,"from",e.assignee,"to",t);let o=(await this.app.vault.read(e.file)).split(`
`),c=o[e.line];console.log("[TaskDashboard] Original line:",c);let h=e.assignee,d=(r=(n=(a=this.plugin)==null?void 0:a.settings)==null?void 0:n.dashboardMyName)==null?void 0:r.toLowerCase(),u=d?d.split(",").map(f=>f.trim()).filter(f=>f.length>0):[],g=t.toLowerCase().trim(),m=u.length>0&&u.some(f=>g===f||g.includes(f)||f.includes(g));if(c=c.replace(/🔗\s*delegated-from:@?[^📆\[]+/g,""),c=c.replace(/📆\s*\d{4}-\d{2}-\d{2}/g,""),c=c.replace(/\[\[@?[^\]]+\]\]/g,""),c=c.replace(/\s+/g," ").trim(),m){let f=c.match(/📅\s*\d{4}-\d{2}-\d{2}/);f&&f.index!==void 0?c=c.substring(0,f.index)+`[[@${t.trim()}]] `+c.substring(f.index):c=c.trim()+` [[@${t.trim()}]]`,console.log("[TaskDashboard] Task assigned back to self, removing delegation metadata"),new E.Notice(`Task assigned back to ${t}`),e.delegatedFrom=void 0,e.delegatedDate=void 0,e.assignee=t.trim()}else{let f=new Date().toISOString().split("T")[0],k=` \u{1F517} delegated-from:@${h} \u{1F4C6} ${f}`,y=c.match(/📅\s*\d{4}-\d{2}-\d{2}/);y&&y.index!==void 0?c=c.substring(0,y.index)+`[[@${t.trim()}]]${k} `+c.substring(y.index):c=c.trim()+` [[@${t.trim()}]]${k}`,console.log("[TaskDashboard] Task delegated successfully. delegatedFrom:",h),new E.Notice(`Task delegated from ${h} to ${t}`),e.delegatedFrom=h,e.delegatedDate=f,e.assignee=t.trim()}console.log("[TaskDashboard] Updated line:",c),o[e.line]=c,await this.app.vault.modify(e.file,o.join(`
`)),setTimeout(()=>this.refresh(),500)}catch(l){console.error("[TaskDashboard] Failed to delegate task:",l),new E.Notice("Failed to delegate task. Please try again.")}}async updateTaskAssignee(e,t,s){try{let n=(await this.app.vault.read(e.file)).split(`
`),r=n[e.line];r=r.replace(/\[\[@?[^\]]+\]\]/g,"");let l=r.match(/📅\s*\d{4}-\d{2}-\d{2}/);l&&l.index!==void 0?r=r.substring(0,l.index)+`[[@${t.trim()}]] `+r.substring(l.index):r=r.trim()+` [[@${t.trim()}]]`,n[e.line]=r,await this.app.vault.modify(e.file,n.join(`
`));let o=e.assignee;if(e.assignee=t.trim(),s&&o!==e.assignee){let c=s.closest(".task-card"),h=c==null?void 0:c.closest(".task-section");c&&h&&(s.style.transition="opacity 0.3s ease-out",s.style.opacity="0",setTimeout(()=>{s.remove(),c.querySelectorAll(".task-list-item").length===0&&(c.style.transition="opacity 0.3s ease-out",c.style.opacity="0",setTimeout(()=>c.remove(),300));let u=Array.from(h.querySelectorAll(".task-card")).find(m=>{var k;let f=(k=m.querySelector("h3"))==null?void 0:k.textContent;return f==null?void 0:f.includes(e.assignee)});if(!u){let m=e.priority||"medium";u=h.createDiv(`task-card ${m}-card`),u.createDiv("card-header").createEl("h3",{text:`\u{1F464} ${e.assignee}`,cls:"card-assignee-title"}),u.createEl("ul",{cls:"task-list"})}let g=u.querySelector(".task-list");if(g){let m=g.createEl("li",{cls:"task-list-item"});m.innerHTML=s.innerHTML;let f=m.querySelector(".task-metadata");f&&(f.innerHTML=f.innerHTML.replace(/👤\s*[^<]*/g,`\u{1F464} ${e.assignee}`));let k=m.querySelector(".task-checkbox");k&&(k.onclick=async()=>{await this.toggleTask(e,k.checked,m)});let y=m.querySelector(".edit-button");if(y){let T=m.querySelector(".edit-container");if(T){y.onclick=()=>{T.style.display=T.style.display==="none"?"flex":"none"};let C=T.querySelector("select");C&&(C.onchange=async()=>{await this.updateTaskPriority(e,C.value,m)});let x=T.querySelector("button"),w=T.querySelector("input");x&&w&&(x.onclick=async()=>{await this.updateTaskAssignee(e,w.value,m)})}}m.style.opacity="0",setTimeout(()=>{m.style.transition="opacity 0.3s ease-in",m.style.opacity="1"},10)}this.updateStatsOnly()},300))}else s||setTimeout(()=>this.refresh(),500)}catch(a){console.error("Failed to update task assignee:",a),new E.Notice("Failed to update assignee. Please try again.")}}applyFilter(e){let t=this.containerEl.querySelectorAll(".task-section"),s=e==="delegated";t.forEach(a=>{if(!(a instanceof HTMLElement))return;let n=a.querySelectorAll(".task-card"),r=!1;n.forEach(l=>{var c,h,d,u;if(!(l instanceof HTMLElement))return;let o=!0;switch(e){case"all":o=!0;break;case"high":o=l.hasClass("high-card");break;case"medium":o=l.hasClass("medium-card");break;case"low":o=l.hasClass("low-card");break;case"completed":o=l.hasClass("completed-card");break;case"mine":let g=l.querySelector("h3");if(g&&g.textContent){let m=g.textContent.replace(/^👤\s*/,"").trim().toLowerCase(),f=(u=(d=(h=(c=this.plugin)==null?void 0:c.settings)==null?void 0:h.dashboardMyName)==null?void 0:d.toLowerCase())==null?void 0:u.trim();f?o=f.split(",").map(y=>y.trim()).filter(y=>y.length>0).some(y=>m===y||m.includes(y)):o=!1}else o=!1;break;case"overdue":o=this.hasTasksOverdue(l);break;case"today":o=this.hasTasksDueToday(l);break;case"week":o=this.hasTasksDueThisWeek(l);break;case"delegated":o=this.hasDelegatedTasks(l);break}l.style.display=o?"block":"none",o&&(r=!0)}),a.style.display=r?"block":"none"})}applyMultipleFilters(){let e=this.containerEl.querySelectorAll(".task-section");if(this.activeFilters.size===0){e.forEach(t=>{t instanceof HTMLElement&&(t.style.display="block",t.querySelectorAll(".task-card").forEach(a=>{a instanceof HTMLElement&&(a.style.display="block")}))});return}e.forEach(t=>{if(!(t instanceof HTMLElement))return;let s=t.querySelectorAll(".task-card"),a=!1;s.forEach(n=>{if(!(n instanceof HTMLElement))return;let r=!1;for(let l of this.activeFilters){let o=!1;switch(l){case"high":o=n.hasClass("high-card");break;case"medium":o=n.hasClass("medium-card");break;case"low":o=n.hasClass("low-card");break;case"completed":o=n.hasClass("completed-card");break;case"overdue":o=this.hasTasksOverdue(n);break;case"today":o=this.hasTasksDueToday(n);break;case"week":o=this.hasTasksDueThisWeek(n);break;case"delegated":o=this.hasDelegatedTasks(n);break}if(o){r=!0;break}}n.style.display=r?"block":"none",r&&(a=!0)}),t.style.display=a?"block":"none"})}applyMultipleFiltersToClusters(){let e=this.containerEl.querySelectorAll(".cluster-card"),t=this.containerEl.querySelectorAll(".standalone-section .task-card");if(this.activeFilters.size===0){e.forEach(a=>{a instanceof HTMLElement&&(a.style.display="block")}),t.forEach(a=>{a instanceof HTMLElement&&(a.style.display="block")});return}Array.from(e).concat(Array.from(t)).forEach(a=>{if(!(a instanceof HTMLElement))return;let n=!1;for(let r of this.activeFilters){let l=!1;switch(r){case"high":l=a.hasClass("high-card");break;case"medium":l=a.hasClass("medium-card");break;case"low":l=a.hasClass("low-card");break;case"completed":l=a.hasClass("completed-card");break;case"overdue":l=this.hasTasksOverdue(a);break;case"today":l=this.hasTasksDueToday(a);break;case"week":l=this.hasTasksDueThisWeek(a);break;case"delegated":l=this.hasDelegatedTasks(a);break}if(l){n=!0;break}}a.style.display=n?"block":"none"})}hasTasksDueToday(e){var n;if(e.classList.contains("completed-card"))return!1;let t=e.querySelectorAll(".task-list-item"),s=new Date;s.setHours(0,0,0,0);let a=new Date(s);a.setDate(a.getDate()+1);for(let r of Array.from(t)){let l=r.querySelector(".task-checkbox");if(l&&l.checked)continue;let o=r.querySelector(".task-due");if(o){let c=(n=o.textContent)==null?void 0:n.match(/\d{4}-\d{2}-\d{2}/);if(c){let h=new Date(c[0]+"T00:00:00");if(h.setHours(0,0,0,0),h>=s&&h<a)return!0}}}return!1}hasTasksDueThisWeek(e){var n;if(e.classList.contains("completed-card"))return!1;let t=e.querySelectorAll(".task-list-item"),s=new Date;s.setHours(0,0,0,0);let a=new Date(s);a.setDate(a.getDate()+7);for(let r of Array.from(t)){let l=r.querySelector(".task-checkbox");if(l&&l.checked)continue;let o=r.querySelector(".task-due");if(o){let c=(n=o.textContent)==null?void 0:n.match(/\d{4}-\d{2}-\d{2}/);if(c){let h=new Date(c[0]+"T00:00:00");if(h.setHours(0,0,0,0),h>=s&&h<=a)return!0}}}return!1}hasTasksOverdue(e){var a;if(e.classList.contains("completed-card"))return!1;let t=e.querySelectorAll(".task-list-item"),s=new Date;s.setHours(0,0,0,0);for(let n of Array.from(t)){let r=n.querySelector(".task-checkbox");if(r&&r.checked)continue;let l=n.querySelector(".task-due");if(l){let o=(a=l.textContent)==null?void 0:a.match(/\d{4}-\d{2}-\d{2}/);if(o){let c=new Date(o[0]+"T00:00:00");if(c.setHours(0,0,0,0),c<s)return!0}}}return!1}hasDelegatedTasks(e){var r,l,o,c,h;if(e.classList.contains("completed-card"))return!1;let t=(l=(r=e.querySelector("h3"))==null?void 0:r.textContent)==null?void 0:l.replace(/^👤\s*/,"").trim();if(!t)return!1;let s=this.allTasks.filter(d=>d.assignee===t&&!d.completed),a=(h=(c=(o=this.plugin)==null?void 0:o.settings)==null?void 0:c.dashboardMyName)==null?void 0:h.toLowerCase(),n=a?a.split(",").map(d=>d.trim()).filter(d=>d.length>0):[];for(let d of s)if(d.delegatedFrom){if(n.length===0)return!0;let u=d.delegatedFrom.toLowerCase();if(n.some(m=>u===m||u.includes(m)||m.includes(u)))return!0}return!1}updateStatsOnly(){}getFilteredTasks(){var e,t;if((t=(e=this.plugin)==null?void 0:e.settings)!=null&&t.dashboardMyName){let s=this.plugin.settings.dashboardMyName.split(",").map(a=>a.toLowerCase().trim()).filter(a=>a.length>0);return s.length===0?this.allTasks:this.allTasks.filter(a=>{let n=a.assignee.toLowerCase().trim();return s.some(r=>n===r||n.includes(r))})}return this.allTasks}calculateFilterCounts(e){var h,d,u;let t=new Date,s=new Date(t.getFullYear(),t.getMonth(),t.getDate()),a=new Date(s.getTime()+1440*60*1e3-1),n=new Date(s.getTime()+10080*60*1e3),r={high:0,medium:0,low:0,today:0,week:0,overdue:0,completed:0,delegated:0},l=(u=(d=(h=this.plugin)==null?void 0:h.settings)==null?void 0:d.dashboardMyName)==null?void 0:u.toLowerCase(),o=l?l.split(",").map(g=>g.trim()).filter(g=>g.length>0):[];console.log("[TaskDashboard] Calculating filter counts. My names:",o);let c=this.allTasks;for(let g of e){if(!g.completed&&(g.priority==="high"?r.high++:g.priority==="medium"?r.medium++:g.priority==="low"&&r.low++,g.dueDate)){let m=new Date(g.dueDate);m<s?r.overdue++:m>=s&&m<=a&&r.today++,m>=s&&m<=n&&r.week++}g.completed&&r.completed++}for(let g of c)if(!g.completed&&g.delegatedFrom)if(console.log("[TaskDashboard] Found delegated task:",g.text,"delegatedFrom:",g.delegatedFrom),o.length>0){let m=g.delegatedFrom.toLowerCase(),f=o.some(k=>{let y=m===k||m.includes(k)||k.includes(m);return console.log('[TaskDashboard] Checking if "'+m+'" matches "'+k+'": '+y),y});console.log("[TaskDashboard] isDelegatedByMe:",f),f&&r.delegated++}else r.delegated++;return console.log("[TaskDashboard] Delegated count:",r.delegated),r}getCurrentFilterCounts(){let e=this.getFilteredTasks();return this.calculateFilterCounts(e)}updateFilterCountsImmediate(){let e=this.getCurrentFilterCounts();this.filterCounts=e;let t=(s,a)=>{let n=this.badgeElements.get(s);if(n)a>0?(n.textContent=a.toString(),n.style.display="inline-flex"):n.style.display="none";else if(a>0){let r=this.containerEl.querySelector(`[data-filter="${this.getDataAttr(s)}"]`);if(r){let l=this.createBadgeElement(a,this.getDataAttr(s));l&&(r.appendChild(l),this.badgeElements.set(s,l))}}};t("high",e.high),t("medium",e.medium),t("low",e.low),t("overdue",e.overdue),t("today",e.today),t("week",e.week),t("delegated",e.delegated),t("completed",e.completed)}updateFilterCounts(e=!1){if(e){this.updateFilterCountsImmediate();return}this.updateCountsDebounceTimer&&clearTimeout(this.updateCountsDebounceTimer),this.updateCountsDebounceTimer=setTimeout(()=>{this.updateFilterCountsImmediate(),this.updateCountsDebounceTimer=null},150)}getDataAttr(e){return{high:"high",medium:"medium",low:"low",overdue:"overdue",today:"due-today",week:"due-week",delegated:"delegated",completed:"completed"}[e]||e}async updateTaskDisplay(){try{let e=this.containerEl.children[1];e.querySelectorAll(".task-section").forEach(a=>a.remove());let s=this.currentFilter==="delegated"?this.allTasks:this.getFilteredTasks();await this.displayTasks(e,s),this.currentFilter!=="all"&&this.applyFilter(this.currentFilter)}catch(e){console.error("Failed to update task display:",e),new E.Notice("Failed to update display. Please refresh.")}}async loadAllParticipants(){if(this.cachedParticipants)return this.cachedParticipants;try{let e=new Set,t=this.app.vault.getMarkdownFiles();for(let s of t)try{let a=await this.app.vault.read(s),n=a.match(/^---\n([\s\S]*?)\n---/);if(!n||!n[1].includes("emailId:"))continue;let l=a.match(/## Participants\s*\n((?:- .+\n?)+)/);l&&l[1].split(`
`).forEach(h=>{let d=h.match(/^- (.+)$/);if(d){let u=d[1].trim();u.length>0&&u.length<50&&!u.includes("http")&&!u.includes("www.")&&/^[a-zA-Z\s\-\.]+$/.test(u)&&e.add(u)}});let o=a.matchAll(/\[\[@?([^\]]+)\]\]/g);for(let c of o){let h=c[1].trim();h!=="Unassigned"&&h.length<50&&/^[a-zA-Z\s\-\.]+$/.test(h)&&e.add(h)}}catch(a){continue}return this.cachedParticipants=Array.from(e).sort(),console.log("[TaskDashboard] Loaded participants:",this.cachedParticipants),this.cachedParticipants}catch(e){return console.error("[TaskDashboard] Failed to load participants:",e),[]}}applyDashboardStyles(){}async clusterCurrentTasks(){var t,s;let e=this.allTasks.filter(a=>!a.completed);if(e.length<2){new E.Notice("Need at least 2 tasks to cluster");return}if(!this.taskClusterer&&((s=(t=this.plugin)==null?void 0:t.settings)!=null&&s.anthropicApiKey)&&(this.taskClusterer=new R(this.plugin.settings.anthropicApiKey,this.plugin.settings.claudeModel||"claude-3-5-haiku-20241022")),!this.taskClusterer){new E.Notice("Claude API key required for clustering. Configure in settings.");return}try{new E.Notice("\u{1F9E9} Analyzing tasks for clustering..."),this.clusteringResult=await this.taskClusterer.clusterTasks(e),await this.saveClusterIds(this.clusteringResult),new E.Notice(`\u2705 ${this.clusteringResult.summary}`)}catch(a){console.error("Clustering failed:",a),new E.Notice(`\u274C Clustering failed: ${a.message}`),this.clusteringResult=null}}async saveClusterIds(e){try{for(let t of e.clusters)for(let s of t.tasks)await this.addClusterIdToTask(s,t.id);for(let t of e.standalone)t.clusterId&&await this.removeClusterIdFromTask(t);console.log("[Clustering] Saved cluster IDs to tasks")}catch(t){console.error("[Clustering] Failed to save cluster IDs:",t)}}async addClusterIdToTask(e,t){try{let a=(await this.app.vault.read(e.file)).split(`
`),n=a[e.line];n.includes("\u{1F9E9} cluster:")?n=n.replace(/🧩\s*cluster:[a-z0-9-]+/g,`\u{1F9E9} cluster:${t}`):n=n.trimEnd()+` \u{1F9E9} cluster:${t}`,a[e.line]=n,await this.app.vault.modify(e.file,a.join(`
`)),e.clusterId=t}catch(s){console.error("[Clustering] Failed to add cluster ID to task:",s)}}async removeClusterIdFromTask(e){try{let s=(await this.app.vault.read(e.file)).split(`
`),a=s[e.line];a=a.replace(/\s*🧩\s*cluster:[a-z0-9-]+/g,""),s[e.line]=a,await this.app.vault.modify(e.file,s.join(`
`)),e.clusterId=void 0}catch(t){console.error("[Clustering] Failed to remove cluster ID from task:",t)}}async displayClusteredTasks(e){if(this.clusteringResult||(this.clusteringResult=this.buildClusteringFromSavedIds()),!this.clusteringResult){new E.Notice("No clusters found. Process some emails first to create clusters.");return}if(e.querySelectorAll(".task-section").forEach(s=>s.remove()),this.clusteringResult.clusters.length>0){let s=e.createDiv("task-section clusters-section");s.createEl("h2",{text:`\u{1F9E9} Task Clusters (${this.clusteringResult.clusters.length})`,cls:"clusters-header"});for(let a of this.clusteringResult.clusters)await this.createClusterCard(s,a)}if(this.clusteringResult.standalone.length>0){let s=e.createDiv("task-section standalone-section");s.createEl("h2",{text:`\u{1F4CB} Standalone Tasks (${this.clusteringResult.standalone.length})`}),await this.displayTasks(s,this.clusteringResult.standalone)}}buildClusteringFromSavedIds(){try{let e=new Map,t=[];for(let a of this.allTasks)a.completed||(a.clusterId?(e.has(a.clusterId)||e.set(a.clusterId,[]),e.get(a.clusterId).push(a)):t.push(a));let s=[];for(let[a,n]of e.entries()){if(n.length<2){t.push(...n);continue}let r="low";for(let o of n){if(o.priority==="high"){r="high";break}o.priority==="medium"&&r==="low"&&(r="medium")}let l=this.generateClusterTitle(n);s.push({id:a,title:l,description:`${n.length} related tasks`,tasks:n,priority:r,confidence:75})}return s.length===0?null:{clusters:s,standalone:t,totalTasksAnalyzed:this.allTasks.filter(a=>!a.completed).length,clustersCreated:s.length,summary:`Loaded ${s.length} saved clusters`}}catch(e){return console.error("[Clustering] Failed to build clusters from saved IDs:",e),null}}generateClusterTitle(e){if(e.length===0)return"Related Tasks";let s=e[0].text.split(" ").filter(a=>a.length>3);return s.length>0?s.slice(0,4).join(" ")+(s.length>4?"...":""):"Related Tasks"}applyFilterToClusters(e){let t=this.containerEl.querySelectorAll(".cluster-card"),s=this.containerEl.querySelector(".standalone-section");t.forEach(a=>{if(!(a instanceof HTMLElement))return;let n=a.querySelectorAll(".cluster-task-item"),r=!1;n.forEach(l=>{if(!(l instanceof HTMLElement))return;let o=this.shouldShowTaskInFilter(l,e);l.style.display=o?"list-item":"none",o&&(r=!0)}),a.style.display=r?"block":"none"}),s instanceof HTMLElement&&this.applyFilter(e)}shouldShowTaskInFilter(e,t){var s,a,n,r;switch(t){case"all":return!0;case"high":return((s=e.closest(".cluster-card"))==null?void 0:s.classList.contains("high-card"))||!1;case"medium":return((a=e.closest(".cluster-card"))==null?void 0:a.classList.contains("medium-card"))||!1;case"low":return((n=e.closest(".cluster-card"))==null?void 0:n.classList.contains("low-card"))||!1;case"overdue":case"today":case"week":let l=e.querySelector(".task-due");if(!l)return!1;let o=(r=l.textContent)==null?void 0:r.match(/\d{4}-\d{2}-\d{2}/);if(!o)return!1;let c=new Date(o[0]),h=new Date;if(h.setHours(0,0,0,0),t==="overdue")return c<h;if(t==="today"){let d=new Date(h);return d.setDate(d.getDate()+1),c>=h&&c<d}else if(t==="week"){let d=new Date(h);return d.setDate(d.getDate()+7),c>=h&&c<=d}return!1;default:return!0}}async createClusterCard(e,t){let s=e.createDiv(`cluster-card ${t.priority}-card`),a=s.createDiv("cluster-header"),n=a.createDiv("cluster-title-row");n.createEl("h3",{text:`${t.title} (${t.tasks.length} tasks)`,cls:"cluster-title"});let r=n.createEl("span",{text:`${t.confidence}%`,cls:"cluster-confidence"});if(t.confidence>=80?r.addClass("high-confidence"):t.confidence>=60?r.addClass("medium-confidence"):r.addClass("low-confidence"),a.createEl("p",{text:t.description,cls:"cluster-description"}),t.combinedTask){let o=a.createDiv("cluster-suggestion");o.createEl("strong",{text:"\u{1F4A1} Suggested Combined Task:"}),o.createEl("p",{text:t.combinedTask,cls:"combined-task-text"}),t.suggestedAssignee&&o.createEl("span",{text:`\u2192 ${t.suggestedAssignee}`,cls:"suggested-assignee"})}let l=s.createEl("ul",{cls:"cluster-task-list"});for(let o of t.tasks){let c=l.createEl("li",{cls:"cluster-task-item"}),h=c.createEl("span",{text:o.text,cls:"task-text clickable"});h.onclick=async()=>{await this.app.workspace.getLeaf(!1).openFile(o.file)};let d=c.createDiv("task-meta");d.createEl("span",{text:`\u{1F464} ${o.assignee}`,cls:"task-assignee"}),o.dueDate&&d.createEl("span",{text:`\u{1F4C5} ${o.dueDate}`,cls:"task-due"}),d.createEl("span",{text:`\u{1F4C4} ${o.file.basename}`,cls:"task-source"})}}};var O=require("obsidian"),j=class{constructor(i,e){this.getStoredToken=i;this.saveToken=e;this.credentials=null;this.token=null;this.baseUrl="https://gmail.googleapis.com/gmail/v1";this.authBaseUrl="https://accounts.google.com/o/oauth2";this.tokenUrl="https://oauth2.googleapis.com/token";this.redirectUri="http://localhost";this.token=this.getStoredToken()}setCredentials(i,e,t){this.redirectUri=t||"http://localhost",this.credentials={client_id:i,client_secret:e,redirect_uri:this.redirectUri}}getAuthorizationUrl(){if(!this.credentials)throw new Error("Credentials not set. Please configure Google OAuth in settings.");let i=new URLSearchParams({client_id:this.credentials.client_id,redirect_uri:this.redirectUri,response_type:"code",scope:"https://www.googleapis.com/auth/gmail.readonly",access_type:"offline",prompt:"consent"});return`${this.authBaseUrl}/auth?${i.toString()}`}async exchangeCodeForToken(i){if(!this.credentials)throw new Error("Credentials not set");try{let e=await(0,O.requestUrl)({url:this.tokenUrl,method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({code:i,client_id:this.credentials.client_id,client_secret:this.credentials.client_secret,redirect_uri:this.redirectUri,grant_type:"authorization_code"}).toString()});if(e.status===200){let t=e.json;this.token={access_token:t.access_token,refresh_token:t.refresh_token,expiry_date:Date.now()+t.expires_in*1e3,token_type:t.token_type,scope:t.scope},await this.saveToken(this.token)}else throw new Error(`Failed to exchange code: ${e.text}`)}catch(e){throw console.error("OAuth token exchange failed:",e),e}}async refreshAccessToken(){var i;if(!this.credentials||!((i=this.token)!=null&&i.refresh_token))throw new Error("Cannot refresh token: missing credentials or refresh token");try{let e=await(0,O.requestUrl)({url:this.tokenUrl,method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({refresh_token:this.token.refresh_token,client_id:this.credentials.client_id,client_secret:this.credentials.client_secret,grant_type:"refresh_token"}).toString()});if(e.status===200){let t=e.json;this.token={...this.token,access_token:t.access_token,expiry_date:Date.now()+t.expires_in*1e3},await this.saveToken(this.token)}else throw new Error(`Failed to refresh token: ${e.text}`)}catch(e){throw console.error("Token refresh failed:",e),e}}async ensureValidToken(){if(!this.token)throw new Error("Not authenticated. Please authenticate with Gmail first.");this.token.expiry_date&&Date.now()>=this.token.expiry_date-6e4&&(console.log("[Gmail] Token expired or expiring soon, refreshing..."),await this.refreshAccessToken())}async makeGmailRequest(i,e={}){await this.ensureValidToken();let t=i.startsWith("http")?i:`${this.baseUrl}${i}`;try{let s=await(0,O.requestUrl)({url:t,method:e.method||"GET",headers:{Authorization:`Bearer ${this.token.access_token}`,"Content-Type":"application/json",...e.headers},...e});return s.status===401?(console.log("[Gmail] Received 401, attempting token refresh..."),await this.refreshAccessToken(),(await(0,O.requestUrl)({url:t,method:e.method||"GET",headers:{Authorization:`Bearer ${this.token.access_token}`,"Content-Type":"application/json",...e.headers},...e})).json):s.json}catch(s){throw console.error(`Gmail API request failed: ${i}`,s),s}}async searchEmails(i,e=100,t=5,s=!0){try{console.log(`[Gmail] Searching with query: ${i}, max: ${e}`);let a=[],n,r=0,l=1;for(;r<e;){let d=Math.min(e-r,500),u=`/users/me/messages?q=${encodeURIComponent(i)}&maxResults=${d}`;n?(u+=`&pageToken=${n}`,console.log(`[Gmail] Fetching page ${l} with token: ${n.substring(0,10)}...`)):console.log(`[Gmail] Fetching page ${l} (first page), requesting ${d} messages`);let g=await this.makeGmailRequest(u);if(!g.messages||g.messages.length===0){if(r===0)return console.log("[Gmail] No messages found"),[];console.log(`[Gmail] No more messages on page ${l}`);break}if(a.push(...g.messages),r+=g.messages.length,console.log(`[Gmail] Page ${l}: Got ${g.messages.length} message IDs (total so far: ${r}/${e})`),g.nextPageToken&&r<e)n=g.nextPageToken,console.log("[Gmail] Next page token available, will fetch more..."),l++;else{g.nextPageToken?console.log(`[Gmail] Reached desired maxResults of ${e}`):console.log("[Gmail] No more pages available (no nextPageToken)");break}}if(console.log(`[Gmail] Total message IDs collected: ${a.length}`),a.length===0)return[];let o=a.slice(0,e).filter(d=>d.id),c=Math.ceil(o.length/t);console.log(`[Gmail] Starting parallel fetch: ${o.length} emails in ${c} batches`);let h=[];for(let d=0;d<o.length;d+=t){let u=o.slice(d,d+t),g=Math.floor(d/t)+1;console.log(`[Gmail] Fetching batch ${g}/${c} (${u.length} emails in parallel)...`);let m=Date.now(),f=u.map(C=>(console.log(`[Gmail] Starting fetch for email ${C.id}`),this.getEmailById(C.id).catch(x=>(console.error(`[Gmail] Failed to fetch message ${C.id}:`,x),null)))),y=(await Promise.all(f)).filter(C=>C!==null);h.push(...y);let T=Date.now()-m;console.log(`[Gmail] Batch ${g} complete: ${y.length}/${u.length} successful in ${T}ms`)}return console.log(`[Gmail] All batches complete: ${h.length} emails fetched successfully`),s&&h.length>0&&(h.sort((d,u)=>{let g=new Date(d.date||0).getTime();return new Date(u.date||0).getTime()-g}),console.log(`[Gmail] Sorted ${h.length} emails by date (newest first)`)),h}catch(a){throw console.error("Email search failed:",a),a}}async getEmailById(i){var e,t,s;try{let a=await this.makeGmailRequest(`/users/me/messages/${i}?format=full`),n=((e=a.payload)==null?void 0:e.headers)||[],r=h=>{let d=n.find(u=>{var g;return((g=u.name)==null?void 0:g.toLowerCase())===h.toLowerCase()});return(d==null?void 0:d.value)||""},l=this.extractBody(a.payload),o=[];if((t=a.payload)!=null&&t.parts)for(let h of a.payload.parts)h.filename&&((s=h.body)!=null&&s.attachmentId)&&o.push({filename:h.filename,mimeType:h.mimeType,size:h.body.size,attachmentId:h.body.attachmentId,downloadUrl:`https://mail.google.com/mail/u/0/?ui=2&ik=${i}&attid=${h.body.attachmentId}&disp=safe&zw`});let c=`https://mail.google.com/mail/u/0/#inbox/${i}`;return{id:i,threadId:a.threadId,subject:r("subject"),from:r("from"),to:r("to"),date:r("date"),body:l,snippet:a.snippet||"",attachments:o,gmailUrl:c,labels:a.labelIds||[]}}catch(a){throw console.error(`Failed to get email ${i}:`,a),a}}extractBody(i){var e,t,s;if(!i)return"";if((e=i.body)!=null&&e.data)return atob(i.body.data.replace(/-/g,"+").replace(/_/g,"/"));if(i.parts){for(let a of i.parts)if(a.mimeType==="text/plain"&&((t=a.body)!=null&&t.data))return atob(a.body.data.replace(/-/g,"+").replace(/_/g,"/"));for(let a of i.parts)if(a.mimeType==="text/html"&&((s=a.body)!=null&&s.data))return atob(a.body.data.replace(/-/g,"+").replace(/_/g,"/")).replace(/<[^>]*>/g,"").trim();for(let a of i.parts){let n=this.extractBody(a);if(n)return n}}return""}async fetchRecentMeetingEmails(i,e){let t=new Date;t.setTime(t.getTime()-i*60*60*1e3);let s=t.toISOString().split("T")[0],a=(e||"transcript").split(",").map(l=>l.trim().toLowerCase()).filter(l=>l);console.log(`[Gmail] Searching for emails with labels: ${a.join(", ")} after ${s} (${i} hours back)`);let n=new Map;for(let l of a){let o=`label:${l} after:${s}`;console.log(`[Gmail] Searching with query: "${o}"`);let c=await this.searchEmails(o,500,5,!0);console.log(`[Gmail] Found ${c.length} emails with label: ${l}`);for(let h of c)if(n.has(h.id)){let d=n.get(h.id);d.searchedLabels||(d.searchedLabels=[]),d.searchedLabels.includes(l)||d.searchedLabels.push(l)}else h.searchedLabels=[l],n.set(h.id,h)}let r=Array.from(n.values());return console.log(`[Gmail] Total unique emails found: ${r.length}`),r}isAuthenticated(){var i;return!!((i=this.token)!=null&&i.access_token)}hasRefreshToken(){var i;return!!((i=this.token)!=null&&i.refresh_token)}async testConnection(){try{await this.ensureValidToken();let i=await this.makeGmailRequest("/users/me/profile");return console.log("[Gmail] Connection test successful:",i.emailAddress),!0}catch(i){return console.error("[Gmail] Connection test failed:",i),!1}}clearAuthentication(){this.token=null}};var _=class{constructor(){this.server=null;this.port=42813;this.authCodePromise=null;this.authCodeResolve=null;this.authCodeReject=null}async start(){if(!this.server)return new Promise((i,e)=>{try{let t=window.require("http");this.server=t.createServer((s,a)=>{let n=new URL(s.url,`http://localhost:${this.port}`);if(n.pathname==="/callback"){let r=n.searchParams.get("code"),l=n.searchParams.get("error");a.writeHead(200,{"Content-Type":"text/html"}),r?(a.end(`
                <!DOCTYPE html>
                <html>
                <head>
                  <title>Authentication Successful</title>
                  <style>
                    body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                      display: flex;
                      justify-content: center;
                      align-items: center;
                      min-height: 100vh;
                      margin: 0;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white;
                    }
                    .container {
                      text-align: center;
                      padding: 2rem;
                      background: rgba(255, 255, 255, 0.1);
                      border-radius: 12px;
                      backdrop-filter: blur(10px);
                    }
                    .success-icon {
                      font-size: 4rem;
                      margin-bottom: 1rem;
                    }
                    h1 {
                      margin: 0 0 0.5rem 0;
                      font-size: 2rem;
                    }
                    p {
                      margin: 0.5rem 0;
                      opacity: 0.9;
                      font-size: 1.1rem;
                    }
                    .close-hint {
                      margin-top: 2rem;
                      font-size: 0.9rem;
                      opacity: 0.7;
                    }
                  </style>
                </head>
                <body>
                  <div class="container">
                    <div class="success-icon">\u2705</div>
                    <h1>Authentication Successful!</h1>
                    <p>You can now close this window and return to Obsidian.</p>
                    <p class="close-hint">This window will close automatically in 3 seconds...</p>
                  </div>
                  <script>
                    setTimeout(() => window.close(), 3000);
                  <\/script>
                </body>
                </html>
              `),this.authCodeResolve&&(this.authCodeResolve(r),this.authCodeResolve=null,this.authCodeReject=null)):(a.end(`
                <!DOCTYPE html>
                <html>
                <head>
                  <title>Authentication Failed</title>
                  <style>
                    body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                      display: flex;
                      justify-content: center;
                      align-items: center;
                      min-height: 100vh;
                      margin: 0;
                      background: linear-gradient(135deg, #f5576c 0%, #f093fb 100%);
                      color: white;
                    }
                    .container {
                      text-align: center;
                      padding: 2rem;
                      background: rgba(255, 255, 255, 0.1);
                      border-radius: 12px;
                      backdrop-filter: blur(10px);
                    }
                    .error-icon {
                      font-size: 4rem;
                      margin-bottom: 1rem;
                    }
                    h1 {
                      margin: 0 0 0.5rem 0;
                      font-size: 2rem;
                    }
                    p {
                      margin: 0.5rem 0;
                      opacity: 0.9;
                    }
                    .error-msg {
                      margin-top: 1rem;
                      padding: 1rem;
                      background: rgba(0, 0, 0, 0.2);
                      border-radius: 6px;
                      font-family: monospace;
                      font-size: 0.9rem;
                    }
                  </style>
                </head>
                <body>
                  <div class="container">
                    <div class="error-icon">\u274C</div>
                    <h1>Authentication Failed</h1>
                    <p>There was an error during authentication.</p>
                    ${l?`<div class="error-msg">Error: ${l}</div>`:""}
                    <p>Please close this window and try again.</p>
                  </div>
                </body>
                </html>
              `),this.authCodeReject&&(this.authCodeReject(new Error(l||"Authentication failed")),this.authCodeResolve=null,this.authCodeReject=null))}else a.writeHead(404),a.end("Not found")}),this.server.listen(this.port,"127.0.0.1",()=>{console.log(`[OAuth Server] Started on http://127.0.0.1:${this.port}`),i()}),this.server.on("error",s=>{s.code==="EADDRINUSE"?(console.error(`[OAuth Server] Port ${this.port} is already in use`),e(new Error(`Port ${this.port} is already in use. Please close any other applications using this port.`))):e(s)})}catch(t){e(t)}})}async stop(){if(this.timeoutId&&(clearTimeout(this.timeoutId),this.timeoutId=null),this.authCodeResolve=null,this.authCodeReject=null,this.authCodePromise=null,this.server)return new Promise(i=>{this.server.close(()=>{console.log("[OAuth Server] Stopped"),this.server=null,i()})})}async waitForAuthCode(){if(!this.server)throw new Error("OAuth server not started");return this.authCodeResolve=null,this.authCodeReject=null,this.authCodePromise=null,this.authCodePromise=new Promise((i,e)=>{this.authCodeResolve=i,this.authCodeReject=e;let t=setTimeout(()=>{this.authCodeResolve=null,this.authCodeReject=null,e(new Error("OAuth timeout - no response received within 5 minutes"))},300*1e3);this.timeoutId=t}),this.authCodePromise}getRedirectUri(){return`http://127.0.0.1:${this.port}/callback`}isRunning(){return this.server!==null}};var G=require("obsidian"),z=class{constructor(i){this.config=i}get label(){return this.config.label}get folderName(){return this.config.folderName}canProcess(i){var e;return((e=i.searchedLabels)==null?void 0:e.includes(this.config.label))||!1}async process(i,e){try{console.log(`[${this.config.label}] Processing email ${i.id}`);let t=i.body;if(typeof t=="object"&&(t=JSON.stringify(t)),!t||t==="{}"||t==="[object Object]")return console.warn(`[${this.config.label}] No valid email content`),{success:!1};let s=await this.extractTasks(t,i.subject,e);if(await this.createNote(i,s,e)){let n=s.tasks.filter(r=>r.priority==="high").length;return{success:!0,taskCount:s.tasks.length,highPriorityCount:n,confidence:s.confidence,emailTitle:i.subject||"Untitled"}}return{success:!1}}catch(t){return console.error(`[${this.config.label}] Error:`,t),{success:!1}}}async extractTasks(i,e,t){if(!t.claudeExtractor||!t.anthropicApiKey)return console.log(`[${this.config.label}] No Claude API key, skipping extraction`),{tasks:[],summary:e||"Email note",participants:[],meetingDate:new Date,keyDecisions:[],nextSteps:[],confidence:0};console.log(`[${this.config.label}] Starting Claude extraction with prompt type: ${this.config.promptType||"default"}`);let s=Date.now(),a;this.config.promptType==="actionitem"?a=await t.claudeExtractor.extractActionItems(i,e):this.config.promptType==="meeting"||this.config.promptType==="transcript"?a=await t.claudeExtractor.extractTasks(i,e):this.config.customPrompt?a=await t.claudeExtractor.extractTasks(i,e):a=await t.claudeExtractor.extractTasks(i,e);let n=Date.now()-s;return console.log(`[${this.config.label}] Claude extraction complete in ${n}ms: ${a.tasks.length} tasks`),a}async createNote(i,e,t){try{let s=new Date().getFullYear(),a=String(new Date().getMonth()+1).padStart(2,"0"),n=(0,G.normalizePath)(t.emailNotesFolder),r=(0,G.normalizePath)(`${n}/${this.config.folderName}`),l=(0,G.normalizePath)(`${r}/${s}`),o=(0,G.normalizePath)(`${l}/${a}`);t.app.vault.getAbstractFileByPath(n)||await t.app.vault.createFolder(n),t.app.vault.getAbstractFileByPath(r)||await t.app.vault.createFolder(r),t.app.vault.getAbstractFileByPath(l)||await t.app.vault.createFolder(l),t.app.vault.getAbstractFileByPath(o)||await t.app.vault.createFolder(o);let c=new Date(i.date||Date.now()).toISOString().split("T")[0],h=(i.subject||"Email").replace(/[\\/:*?"<>|]/g,"-").substring(0,50),d=`${c} - ${h}.md`,u=(0,G.normalizePath)(`${o}/${d}`);if(t.app.vault.getAbstractFileByPath(u))return console.log(`[${this.config.label}] Note already exists: ${u}`),!1;let g=this.formatNote(i,e);return await t.app.vault.create(u,g),console.log(`[${this.config.label}] Created note: ${u}`),t.emailIdCache.add(i.id),await t.saveSettings(),!0}catch(s){return console.error(`[${this.config.label}] Error creating note:`,s),!1}}formatNote(i,e){var s,a;let t=[];if(t.push("---"),t.push(`title: ${e.summary}`),t.push(`emailId: ${i.id}`),t.push(`label: ${this.config.label}`),i.gmailUrl&&t.push(`gmailUrl: ${i.gmailUrl}`),t.push("---"),t.push(""),t.push(`# ${e.summary}`),t.push(""),t.push("## Email Details"),t.push(`**From:** ${i.from}`),t.push(`**Date:** ${i.date}`),i.gmailUrl&&t.push(`**Email:** [View in Gmail](${i.gmailUrl})`),t.push(""),i.attachments&&i.attachments.length>0){let n=i.attachments.map(r=>`${r.filename} (${this.formatFileSize(r.size)})`).join(", ");t.push(`**Attachments:** ${n}`),t.push("")}if(e.participants&&e.participants.length>0&&(t.push("## Participants"),e.participants.forEach(n=>t.push(`- ${n}`)),t.push("")),e.tasks&&e.tasks.length>0){t.push("## Action Items"),t.push("");let n=e.tasks.filter(o=>o.priority==="high"),r=e.tasks.filter(o=>o.priority==="medium"),l=e.tasks.filter(o=>o.priority==="low");n.length>0&&(t.push("### \u{1F534} High Priority"),n.forEach(o=>t.push(this.formatTask(o))),t.push("")),r.length>0&&(t.push("### \u{1F7E1} Medium Priority"),r.forEach(o=>t.push(this.formatTask(o))),t.push("")),l.length>0&&(t.push("### \u{1F7E2} Low Priority"),l.forEach(o=>t.push(this.formatTask(o))),t.push(""))}return e.nextSteps&&e.nextSteps.length>0&&(t.push("## Next Steps"),e.nextSteps.forEach(n=>{typeof n=="string"?t.push(`- [ ] ${n}`):t.push(`- [ ] ${n.description||n}`)}),t.push("")),e.keyDecisions&&e.keyDecisions.length>0&&(t.push("## Key Decisions"),e.keyDecisions.forEach(n=>t.push(`- ${n}`)),t.push("")),i.snippet&&!((s=e.keyDecisions)!=null&&s.length)&&!((a=e.nextSteps)!=null&&a.length)&&(t.push("## Context"),t.push(i.snippet),t.push("")),t.push("---"),t.push(`**[\u{1F504} Reprocess this email](obsidian://meeting-tasks-reprocess?id=${i.id})**`),t.join(`
`)}formatTask(i){let e=`- [ ] ${i.description}`;return i.assignee&&(e+=` [[${i.assignee}]]`),i.dueDate&&(e+=` \u{1F4C5} ${i.dueDate}`),i.confidence&&i.confidence<70&&(e+=` \u26A0\uFE0F ${i.confidence}%`),i.tags&&i.tags.length>0&&(e+=` ${i.tags.map(t=>`#${t}`).join(" ")}`),e}formatFileSize(i){return i<1024?i+"B":i<1024*1024?(i/1024).toFixed(1)+"KB":(i/(1024*1024)).toFixed(1)+"MB"}};var K=class{constructor(){this.processors=[]}initializeFromConfig(i){this.processors=[];for(let e of i){let t=new z(e);this.processors.push(t),console.log(`[Registry] Registered processor: ${e.label} -> ${e.folderName} (prompt: ${e.promptType||"default"})`)}}getProcessor(i){for(let e of this.processors)if(e.canProcess(i))return e;return null}getAllProcessors(){return this.processors}getProcessorByLabel(i){return this.processors.find(e=>e.label===i)||null}},H=new K;var he={lookbackTime:"5d",debugMode:!1,anthropicApiKey:"",googleClientId:"",googleClientSecret:"",claudeModel:"claude-3-5-haiku-20241022",dashboardShowOnlyMyTasks:!0,dashboardMyName:"",gmailLabels:"transcript, action",emailNotesFolder:"TaskAgent",labelProcessors:[{label:"transcript",folderName:"Transcript",promptType:"meeting"},{label:"action",folderName:"Action",promptType:"actionitem"}],gmailToken:null,showDetailedNotifications:!0},V=class extends p.Plugin{constructor(){super(...arguments);this.gmailService=null;this.claudeExtractor=null;this.taskClusterer=null;this.oauthServer=null;this.statusBarItem=null;this.emailIdCache=new Set}parseTimeToHours(e){let t=e.match(/^(\d+(?:\.\d+)?)\s*([hdwM]?)$/);if(!t){let n=parseFloat(e);return isNaN(n)?120:n}let s=parseFloat(t[1]);switch(t[2]||"h"){case"h":return s;case"d":return s*24;case"w":return s*24*7;case"M":return s*24*30;default:return s}}formatTimeString(e){return e<24?`${e}h`:e<168?`${Math.round(e/24)}d`:e<720?`${Math.round(e/168)}w`:`${Math.round(e/720)}M`}async loadEmailIdCache(){console.log("[LoadCache] Starting to load email IDs from vault notes..."),this.emailIdCache.clear();let e=this.app.vault.getMarkdownFiles();console.log(`[LoadCache] Found ${e.length} total markdown files in vault`);let t=this.settings.emailNotesFolder;console.log(`[LoadCache] Scanning base folder: ${t}`);let s=0,a=0;for(let n of e)if(n.path.startsWith(t)){s++;try{let l=(await this.app.vault.read(n)).match(/^---\n([\s\S]*?)\n---/);if(l){let o=l[1].match(/emailId:\s*(.+)/);if(o&&o[1]){let c=o[1].trim();this.emailIdCache.add(c),a++,console.log(`[LoadCache] Found emailId: ${c} in ${n.path}`)}}}catch(r){console.error(`[LoadCache] Error reading file ${n.path}:`,r)}}console.log(`[LoadCache] Scanned ${s} email notes, found ${a} email IDs`),console.log(`[LoadCache] Cache now contains ${this.emailIdCache.size} unique email IDs`),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),console.log(`[LoadCache] Saved ${this.settings.processedEmails.length} email IDs to settings`)}async onload(){console.log("==============================================="),console.log("Loading Meeting Tasks Plugin..."),console.log("Plugin version: 2.0.0"),console.log("===============================================");let e=await this.loadData();this.settings=Object.assign({},he,e),this.settings.labelProcessors&&this.settings.labelProcessors.length>0?(H.initializeFromConfig(this.settings.labelProcessors),console.log(`[Plugin] Initialized ${this.settings.labelProcessors.length} label processors`)):console.warn("[Plugin] No label processors configured, using defaults"),this.settings.processedEmails&&(this.settings.processedEmails.forEach(s=>this.emailIdCache.add(s)),console.log(`[Plugin] Loaded ${this.emailIdCache.size} email IDs from settings`)),this.app.workspace.onLayoutReady(async()=>{await this.loadEmailIdCache(),console.log(`[Plugin] Found ${this.emailIdCache.size} existing meeting notes in vault`)}),this.registerEvent(this.app.vault.on("delete",async s=>{var a;if(s instanceof p.TFile&&s.extension==="md"&&s.path.startsWith(this.settings.emailNotesFolder)){console.log(`[Delete] Email note deleted: ${s.path}`);let n=this.app.metadataCache.getFileCache(s);if((a=n==null?void 0:n.frontmatter)!=null&&a.emailId){let r=n.frontmatter.emailId;console.log(`[Delete] Removing emailId from cache: ${r}`),this.emailIdCache.delete(r),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),console.log(`[Delete] Updated cache, now contains ${this.emailIdCache.size} email IDs`)}}})),this.registerEvent(this.app.vault.on("rename",async(s,a)=>{var n,r;if(s instanceof p.TFile&&s.extension==="md"){let l=a.startsWith(this.settings.emailNotesFolder),o=s.path.startsWith(this.settings.emailNotesFolder);if(l&&!o){console.log(`[Rename] File moved out of email notes folder: ${a} -> ${s.path}`);let c=this.app.metadataCache.getFileCache(s);if((n=c==null?void 0:c.frontmatter)!=null&&n.emailId){let h=c.frontmatter.emailId;console.log(`[Rename] Removing emailId from cache: ${h}`),this.emailIdCache.delete(h),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),console.log(`[Rename] Cache updated, now contains ${this.emailIdCache.size} email IDs`)}else console.log("[Rename] File has no emailId in frontmatter, skipping cache update")}else if(!l&&o){console.log(`[Rename] File moved into email notes folder: ${a} -> ${s.path}`),await new Promise(h=>setTimeout(h,100));let c=this.app.metadataCache.getFileCache(s);if((r=c==null?void 0:c.frontmatter)!=null&&r.emailId){let h=c.frontmatter.emailId;console.log(`[Rename] Adding emailId to cache: ${h}`),this.emailIdCache.add(h),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),console.log(`[Rename] Cache updated, now contains ${this.emailIdCache.size} email IDs`)}else try{let d=(await this.app.vault.read(s)).match(/^---\n([\s\S]*?)\n---/);if(d){let u=d[1].match(/emailId:\s*(.+)/);if(u&&u[1]){let g=u[1].trim();console.log(`[Rename] Adding emailId to cache (from file content): ${g}`),this.emailIdCache.add(g),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),console.log(`[Rename] Cache updated, now contains ${this.emailIdCache.size} email IDs`)}else console.log("[Rename] File has no emailId in frontmatter, not adding to cache")}else console.log("[Rename] File has no frontmatter, not adding to cache")}catch(h){console.error("[Rename] Error reading file content:",h)}}}})),this.registerObsidianProtocolHandler("meeting-tasks-reprocess",async s=>{s.id&&await this.reprocessEmailById(s.id,!0)}),this.registerObsidianProtocolHandler("meeting-tasks-oauth",async s=>{if(s.code)try{if(!this.gmailService){new p.Notice("Gmail service not initialized");return}await this.gmailService.exchangeCodeForToken(s.code),new p.Notice("\u2705 Successfully authenticated with Gmail!"),await this.initializeServices(),this.app.workspace.trigger("meeting-tasks:auth-complete")}catch(a){new p.Notice(`Authentication failed: ${a.message}`),console.error("OAuth callback error:",a)}else s.error&&new p.Notice(`Authentication failed: ${s.error}`)}),(0,p.addIcon)("mail-check",'<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8"/><path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"/><path d="m16 19 2 2 4-4"/></svg>');let t=this.addRibbonIcon("mail-check","Process meeting emails",async()=>{await this.processEmails()});this.statusBarItem=this.addStatusBarItem(),this.updateStatus("Ready"),this.addCommand({id:"process-meeting-emails",name:"\u{1F4E7} Process meeting emails now",callback:async()=>{await this.processEmails()},hotkeys:[{modifiers:["Mod","Shift"],key:"M"}]}),this.addCommand({id:"open-task-dashboard",name:"Open task dashboard",callback:()=>{this.openTaskDashboard()}}),this.addCommand({id:"quick-process-emails",name:"\u26A1 Quick process (last 24 hours)",callback:async()=>{let s=this.settings.lookbackTime;this.settings.lookbackTime="24h",await this.processEmails(),this.settings.lookbackTime=s}}),this.addCommand({id:"reset-processed-emails",name:"Reset processed emails",callback:async()=>{await this.resetProcessedEmails()}}),this.addCommand({id:"reprocess-meeting-note",name:"\u{1F504} Reprocess current meeting note",callback:async()=>{await this.reprocessCurrentMeetingNote()}}),this.addCommand({id:"reprocess-email-by-id",name:"\u{1F4E7} Reprocess email by ID",callback:async()=>{await this.reprocessEmailById("1995cbb7415c015f")}}),this.registerView(B,s=>new q(s,this)),this.addRibbonIcon("layout-dashboard","Open task dashboard",()=>{this.openTaskDashboard()}),await this.initializeServices(),this.addSettingTab(new Z(this.app,this))}async initializeServices(){try{this.gmailService=new j(()=>this.settings.gmailToken,async e=>{this.settings.gmailToken=e,await this.saveSettings()}),this.settings.googleClientId&&this.settings.googleClientSecret?(this.gmailService.setCredentials(this.settings.googleClientId,this.settings.googleClientSecret),this.gmailService.isAuthenticated()?await this.gmailService.testConnection()?this.updateStatus("Gmail connected"):this.updateStatus("Gmail auth needed"):this.updateStatus("Gmail not authenticated")):this.updateStatus("Gmail setup needed"),this.settings.anthropicApiKey&&(this.claudeExtractor=new N(this.settings.anthropicApiKey,this.settings.claudeModel),this.taskClusterer=new R(this.settings.anthropicApiKey,this.settings.claudeModel))}catch(e){console.error("Failed to initialize services:",e),new p.Notice(`Error: ${e.message}`)}}async processEmails(){console.log("[processEmails] Starting email processing");try{if(this.updateStatus("\u{1F504} Starting email processing..."),new p.Notice("\u{1F4E7} Starting email processing..."),this.emailIdCache.size===0&&this.app.vault.getMarkdownFiles().length>0&&(console.log("[processEmails] Cache empty, loading from vault..."),await this.loadEmailIdCache()),!this.gmailService){this.updateStatus("\u274C Gmail service not initialized"),new p.Notice("Gmail service not initialized");return}if(!this.gmailService.isAuthenticated()){this.updateStatus("\u274C Not authenticated"),new p.Notice("Please authenticate with Gmail first (see plugin settings)");return}let e=this.parseTimeToHours(this.settings.lookbackTime);this.updateStatus(`\u{1F50D} Searching emails (${this.settings.lookbackTime})...`),new p.Notice(`\u{1F504} Searching for meeting emails from the last ${this.settings.lookbackTime}...`);let t=await this.gmailService.fetchRecentMeetingEmails(e,this.settings.gmailLabels);if(t.length===0){this.updateStatus("\u2705 No new emails found"),new p.Notice(`\u2705 No meeting emails found in the last ${this.settings.lookbackTime}`);return}this.updateStatus(`\u{1F4CA} Found ${t.length} emails`),new p.Notice(`\u{1F4CA} Found ${t.length} meeting emails. Processing...`),t.length>0&&(console.log("[Process] Emails sorted by date (newest first):"),t.slice(0,5).forEach((d,u)=>{var g;console.log(`[Process]   ${u+1}. ${d.date} - ${((g=d.subject)==null?void 0:g.substring(0,50))||"No subject"}`)}),t.length>5&&console.log(`[Process]   ... and ${t.length-5} more emails`));let s=0,a=0,n=0,r=0,l=0;console.log(`[Process] Cache contains ${this.emailIdCache.size} processed email IDs`),console.log("[Process] First 5 cache entries:",Array.from(this.emailIdCache).slice(0,5));let o=t.filter(d=>this.emailIdCache.has(d.id)?(l++,console.log(`[Process] Skipping already processed email: ${d.id} - "${d.subject}"`),!1):(console.log(`[Process] Will process new email: ${d.id} - "${d.subject}"`),!0));console.log(`[Process] Processing ${o.length} new emails (${l} skipped)`);let c=3,h=Math.ceil(o.length/c);console.log(`[Process] Will process in ${h} batches of up to ${c} emails each`);for(let d=0;d<o.length;d+=c){let u=o.slice(d,d+c),g=Math.floor(d/c)+1,m=u.map(w=>w.subject||"Untitled").join(", "),f=this.settings.showDetailedNotifications?`\u{1F4DD} Processing: ${m.substring(0,50)}${m.length>50?"...":""}`:`\u{1F4DD} Processing batch ${g}/${h} (${u.length} emails)...`;this.updateStatus(f),console.log(`
[Process] === Starting Batch ${g}/${h} ===`),console.log(`[Process] Batch contains ${u.length} emails:`),u.forEach((w,v)=>{console.log(`[Process]   ${v+1}. ${w.subject||"No subject"} (ID: ${w.id})`)});let k=Date.now();console.log(`[Process] Starting parallel processing at ${new Date(k).toISOString()}`);let y=u.map(async(w,v)=>{let $=Date.now();console.log(`[Process] Starting email ${v+1}/${u.length}: ${w.id}`);try{console.log(`[Process] Email ${w.id} has searchedLabels:`,w.searchedLabels);let b=H.getProcessor(w);if(!b)return console.warn(`[Process] No processor found for email ${w.id} with labels:`,w.searchedLabels),null;console.log(`[Process] Using processor: ${b.label} -> ${b.folderName}`);let S={app:this.app,claudeExtractor:this.claudeExtractor,anthropicApiKey:this.settings.anthropicApiKey,emailIdCache:this.emailIdCache,emailNotesFolder:this.settings.emailNotesFolder,saveSettings:async()=>{this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings()}},P=await b.process(w,S),I=Date.now()-$;if(P.success){let F=this.settings.showDetailedNotifications&&P.emailTitle?`[Process] \u2705 [${b.folderName}] "${P.emailTitle}" succeeded in ${I}ms (${P.taskCount} tasks, ${P.confidence}% confidence)`:`[Process] \u2705 [${b.folderName}] Email ${v+1} succeeded in ${I}ms (${P.taskCount} tasks, ${P.confidence}% confidence)`;return console.log(F),P}else{let F=this.settings.showDetailedNotifications&&w.subject?`[Process] \u274C "${w.subject.substring(0,50)}" failed in ${I}ms`:`[Process] \u274C Email ${v+1} failed in ${I}ms`;return console.log(F),null}}catch(b){let S=Date.now()-$;return console.error(`[Process] \u274C Email ${v+1} errored in ${S}ms:`,b),null}});console.log(`[Process] Waiting for all ${u.length} emails to complete...`);let T=await Promise.all(y),C=Date.now()-k,x=T.filter(w=>w&&w.success).length;console.log(`[Process] Batch ${g} complete: ${x}/${u.length} successful in ${C}ms`),console.log(`[Process] Average time per email: ${Math.round(C/u.length)}ms`);for(let w of T)w&&w.success&&(s++,a+=w.taskCount||0,n+=w.highPriorityCount||0,r++,w.taskCount&&w.taskCount>0&&(this.settings.showDetailedNotifications&&w.emailTitle?new p.Notice(`\u2705 ${w.emailTitle}: ${w.taskCount} tasks extracted`):new p.Notice(`\u2705 Batch ${g}: Created note with ${w.taskCount} tasks`)));x>0&&this.taskClusterer&&this.clusterNewlyCreatedTasks().catch(w=>{console.error("[Process] Background clustering failed:",w)})}if(console.log(`
[Process] === Processing Complete ===`),console.log(`[Process] Notes created: ${s}`),console.log(`[Process] Total tasks: ${a}`),console.log(`[Process] High priority tasks: ${n}`),l>0&&s===0)this.updateStatus(`\u2705 All ${l} emails already processed`),new p.Notice(`\u2705 All ${l} emails were already processed`);else if(s>0){this.updateStatus(`\u2705 Created ${s} notes (${a} tasks)`);let d=`\u2705 Successfully created ${s} meeting notes with ${a} tasks`;n>0&&(d+=` (${n} high priority)`),new p.Notice(d,5e3)}else this.updateStatus("\u2705 Processing complete"),new p.Notice("\u2705 Email processing complete (no new notes created)")}catch(e){console.error("Error processing emails:",e),this.updateStatus("\u274C Error processing emails"),new p.Notice(`\u274C Error: ${e.message}`)}}async reprocessEmailById(e,t=!0){var s;try{if(console.log(`[reprocessEmailById] Reprocessing email: ${e}`),!this.gmailService||!this.gmailService.isAuthenticated()){new p.Notice("Gmail service not authenticated");return}!this.claudeExtractor&&this.settings.anthropicApiKey&&(this.claudeExtractor=new N(this.settings.anthropicApiKey,this.settings.claudeModel),console.log("[reprocessEmailById] Initialized Claude extractor")),this.updateStatus(`\u{1F504} Fetching email ${e}...`);let a=await this.gmailService.getEmailById(e);if(!a){new p.Notice(`Email ${e} not found`);return}let n=null;if(t){let c=this.app.vault.getMarkdownFiles();for(let h of c)if(h.path.startsWith(this.settings.emailNotesFolder))try{let u=(await this.app.vault.read(h)).match(/^---\n([\s\S]*?)\n---/);if(u){let g=u[1].match(/emailId:\s*(.+)/);if(g&&g[1].trim()===e){n=h,console.log(`[Reprocess] Found existing note at: ${h.path}`);break}}}catch(d){console.error(`Error reading file ${h.path}:`,d)}}this.emailIdCache.delete(e);let r=H.getProcessor(a);if(!r){new p.Notice(`No processor found for email with labels: ${(s=a.searchedLabels)==null?void 0:s.join(", ")}`);return}n&&(console.log(`[Reprocess] Deleting old note: ${n.path}`),await this.app.vault.delete(n));let l={app:this.app,claudeExtractor:this.claudeExtractor,anthropicApiKey:this.settings.anthropicApiKey,emailIdCache:this.emailIdCache,emailNotesFolder:this.settings.emailNotesFolder,saveSettings:async()=>{this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings()}},o=await r.process(a,l);o.success?(this.emailIdCache.add(e),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),new p.Notice(`\u2705 Reprocessed email with ${o.taskCount||0} tasks (Confidence: ${o.confidence}%)`),this.updateStatus(`\u2705 Reprocessed with ${o.taskCount||0} tasks`)):(new p.Notice("\u274C Failed to reprocess email"),this.updateStatus("\u274C Reprocessing failed"))}catch(a){console.error("Error reprocessing email:",a),new p.Notice(`\u274C Error: ${a.message}`),this.updateStatus("\u274C Error reprocessing")}}async saveSettings(){await this.saveData(this.settings)}updateStatus(e){this.statusBarItem&&this.statusBarItem.setText(`\u{1F4E7} ${e}`)}async openTaskDashboard(){var s;let{workspace:e}=this.app,t=e.getLeavesOfType(B);t.length>0?e.revealLeaf(t[0]):await((s=e.getRightLeaf(!1))==null?void 0:s.setViewState({type:B,active:!0}))}async reprocessCurrentMeetingNote(){try{let e=this.app.workspace.getActiveFile();if(!e){new p.Notice("No active file. Please open a meeting note to reprocess.");return}let s=(await this.app.vault.read(e)).match(/^---\n([\s\S]*?)\n---/);if(!s){new p.Notice("This file does not appear to be a meeting note (no frontmatter).");return}let n=s[1].match(/emailId:\s*(.+)/);if(!n||!n[1]){new p.Notice("No email ID found in this meeting note. Cannot reprocess.");return}let r=n[1].trim();await this.reprocessEmailById(r,!0)}catch(e){console.error("Failed to reprocess meeting note:",e),new p.Notice(`Error reprocessing: ${e.message}`),this.updateStatus("Error")}}async resetProcessedEmails(){console.log("Reset function called");try{if(this.updateStatus("Resetting..."),!confirm(`Reset Processed Emails?

This will clear all processed email records, allowing them to be processed again.`)){console.log("User cancelled reset"),this.updateStatus("Ready");return}console.log("User confirmed reset"),new p.Notice("Resetting processed emails..."),this.emailIdCache.clear(),this.settings.processedEmails=[],await this.saveSettings(),await this.loadEmailIdCache(),new p.Notice("\u2705 Cache refreshed. Existing notes will prevent duplicate processing."),this.updateStatus("Ready")}catch(e){console.error("Reset failed:",e),new p.Notice(`Reset failed: ${e.message}`),this.updateStatus("Error")}}async clusterNewlyCreatedTasks(){try{if(!this.taskClusterer){console.log("[Clustering] Task clusterer not initialized");return}console.log("[Clustering] Starting background clustering of all tasks...");let t=(await this.loadAllTasksFromVault()).filter(a=>!a.completed);if(t.length<2){console.log("[Clustering] Not enough tasks to cluster");return}console.log(`[Clustering] Clustering ${t.length} tasks...`);let s=await this.taskClusterer.clusterTasks(t);if(!s||s.clusters.length===0){console.log("[Clustering] No clusters found");return}await this.saveClusterIdsToTasks(s),console.log(`[Clustering] \u2705 Created ${s.clusters.length} clusters`)}catch(e){console.error("[Clustering] Failed:",e)}}async loadAllTasksFromVault(){let e=[],t=this.app.vault.getMarkdownFiles();for(let s of t)try{let n=(await this.app.vault.read(s)).split(`
`);for(let r=0;r<n.length;r++){let l=n[r],o=l.match(/^[\s-]*\[([ x])\]\s+(.+)/);if(o){let c=o[1]==="x",h=o[2],d="medium";l.includes("\u{1F534}")?d="high":l.includes("\u{1F7E2}")&&(d="low");let u=h.match(/\[\[@?([^\]]+)\]\]/),g=u?u[1]:"Unassigned",m=h.match(/📅\s*(\d{4}-\d{2}-\d{2})/),f=m?m[1]:"",k=h.match(/#(\w+)/),y=k?k[1]:"general",T=h.match(/🧩\s*cluster:([a-z0-9-]+)/),C=T?T[1]:void 0,x=h.replace(/\[\[@?[^\]]+\]\]/g,"").replace(/📅\s*\d{4}-\d{2}-\d{2}/g,"").replace(/🧩\s*cluster:[a-z0-9-]+/g,"").replace(/[🔴🟡🟢]/g,"").replace(/#\w+/g,"").trim();e.push({text:x,completed:c,assignee:g,dueDate:f,priority:d,category:y,file:s,line:r,rawLine:l,clusterId:C})}}}catch(a){continue}return e}async saveClusterIdsToTasks(e){try{for(let t of e.clusters)for(let s of t.tasks)await this.addClusterIdToTask(s,t.id);for(let t of e.standalone)t.clusterId&&await this.removeClusterIdFromTask(t)}catch(t){console.error("[Clustering] Failed to save cluster IDs:",t)}}async addClusterIdToTask(e,t){try{let a=(await this.app.vault.read(e.file)).split(`
`),n=a[e.line];n.includes("\u{1F9E9} cluster:")?n=n.replace(/🧩\s*cluster:[a-z0-9-]+/g,`\u{1F9E9} cluster:${t}`):n=n.trimEnd()+` \u{1F9E9} cluster:${t}`,a[e.line]=n,await this.app.vault.modify(e.file,a.join(`
`)),e.clusterId=t}catch(s){console.error("[Clustering] Failed to add cluster ID:",s)}}async removeClusterIdFromTask(e){try{let s=(await this.app.vault.read(e.file)).split(`
`),a=s[e.line];a=a.replace(/\s*🧩\s*cluster:[a-z0-9-]+/g,""),s[e.line]=a,await this.app.vault.modify(e.file,s.join(`
`)),e.clusterId=void 0}catch(t){console.error("[Clustering] Failed to remove cluster ID:",t)}}onunload(){console.log("Unloading Meeting Tasks Plugin...")}},Z=class extends p.PluginSettingTab{constructor(i,e){super(i,e),this.plugin=e}display(){var r,l;let{containerEl:i}=this;i.empty(),i.createEl("h2",{text:"Meeting Tasks Settings"}),i.createEl("h3",{text:"Google OAuth Settings"}),i.createEl("p",{text:"Create OAuth credentials in Google Cloud Console. Follow the guide for detailed instructions.",cls:"setting-item-description"}),new p.Setting(i).setName("Google Client ID").setDesc("Your Google OAuth Client ID (from Google Cloud Console)").addText(o=>o.setPlaceholder("1234567890-abc...apps.googleusercontent.com").setValue(this.plugin.settings.googleClientId).onChange(async c=>{this.plugin.settings.googleClientId=c,await this.plugin.saveSettings(),await this.plugin.initializeServices()})),new p.Setting(i).setName("Google Client Secret").setDesc("Your Google OAuth Client Secret").addText(o=>(o.setPlaceholder("GOCSPX-...").setValue(this.plugin.settings.googleClientSecret).onChange(async c=>{this.plugin.settings.googleClientSecret=c,await this.plugin.saveSettings(),await this.plugin.initializeServices()}),o.inputEl.type="password",o)),i.createEl("h3",{text:"Gmail Authentication"});let e=i.createEl("p",{text:"\u23F3 Checking authentication status...",cls:"mod-warning setting-item-description"}),t=()=>{if(!this.plugin.gmailService){e.textContent="\u274C Gmail service not initialized",e.className="mod-warning setting-item-description";return}this.plugin.gmailService.isAuthenticated()?this.plugin.gmailService.hasRefreshToken()?(e.textContent="\u2705 Authenticated with Gmail",e.className="mod-success setting-item-description"):(e.textContent="\u26A0\uFE0F Authenticated but missing refresh token",e.className="mod-warning setting-item-description"):(e.textContent="\u274C Not authenticated with Gmail",e.className="mod-warning setting-item-description")};t(),new p.Setting(i).setName("Authenticate with Gmail").setDesc("Click to start the Gmail authentication process").addButton(o=>{var h;let c=o;(h=this.plugin.gmailService)!=null&&h.isAuthenticated()?c.setButtonText("Re-authenticate"):c.setButtonText("Authenticate"),c.onClick(async()=>{var d;if(!this.plugin.gmailService){new p.Notice("Please configure Client ID and Secret first");return}try{if(this.plugin.oauthServer||(this.plugin.oauthServer=new _),!this.plugin.oauthServer.isRunning())try{await this.plugin.oauthServer.start(),new p.Notice("Starting authentication server...")}catch(T){new p.Notice(`Failed to start OAuth server: ${T.message}`);return}let u=this.plugin.oauthServer.getRedirectUri();this.plugin.gmailService.setCredentials(this.plugin.settings.googleClientId,this.plugin.settings.googleClientSecret,u);let g=this.plugin.gmailService.getAuthorizationUrl();window.open(g,"_blank");let m=new p.Modal(this.app);m.contentEl.addClass("gmail-auth-modal"),m.contentEl.createEl("h2",{text:"\u{1F510} Authenticating with Gmail..."});let f=m.contentEl.createDiv("auth-instructions");f.createEl("p",{text:"Please complete the authorization in your browser."}),f.createEl("p",{text:"This window will close automatically when authentication is complete."});let k=m.contentEl.createDiv("auth-loading");k.style.textAlign="center",k.style.marginTop="20px",k.createEl("span",{text:"\u23F3 Waiting for authorization..."});let y=m.contentEl.createEl("button",{text:"Cancel",cls:"auth-cancel-btn"});y.style.marginTop="20px",y.onclick=async()=>{var T;m.close(),await((T=this.plugin.oauthServer)==null?void 0:T.stop())},m.open();try{let T=await this.plugin.oauthServer.waitForAuthCode();if(!T){new p.Notice("No authorization code received"),m.close(),await this.plugin.oauthServer.stop();return}m.close(),new p.Notice("Processing authentication..."),await this.plugin.gmailService.exchangeCodeForToken(T),new p.Notice("\u2705 Successfully authenticated with Gmail!"),t(),await this.plugin.initializeServices(),await this.plugin.oauthServer.stop(),c.setButtonText("Re-authenticate")}catch(T){m.close(),console.error("Authentication error:",T),new p.Notice(`Authentication failed: ${T.message}`),await((d=this.plugin.oauthServer)==null?void 0:d.stop())}}catch(u){new p.Notice(`Failed to start authentication: ${u.message}`)}})}),new p.Setting(i).setName("Clear authentication").setDesc("Remove stored Gmail authentication").addButton(o=>o.setButtonText("Clear").setWarning().onClick(async()=>{var c;(c=this.plugin.gmailService)==null||c.clearAuthentication(),this.plugin.settings.gmailToken=null,await this.plugin.saveSettings(),new p.Notice("Gmail authentication cleared"),t()})),i.createEl("h3",{text:"Email Processing"}),new p.Setting(i).setName("Lookback time").setDesc("How far back to search. Examples: 6h (6 hours), 3d (3 days), 2w (2 weeks), 1M (1 month)").addText(o=>o.setPlaceholder("5d").setValue(this.plugin.settings.lookbackTime||"5d").onChange(async c=>{this.plugin.parseTimeToHours(c)>0&&(this.plugin.settings.lookbackTime=c,await this.plugin.saveSettings())})),new p.Setting(i).setName("Gmail Labels").setDesc("Gmail labels to filter emails (comma-separated)").addText(o=>o.setPlaceholder("transcript").setValue(this.plugin.settings.gmailLabels).onChange(async c=>{this.plugin.settings.gmailLabels=c||"transcript",await this.plugin.saveSettings()})),i.createEl("h3",{text:"Claude AI Settings"}),new p.Setting(i).setName("Anthropic API Key").setDesc("Your Claude API key for task extraction").addText(o=>o.setPlaceholder("sk-ant-...").setValue(this.plugin.settings.anthropicApiKey).onChange(async c=>{this.plugin.settings.anthropicApiKey=c,await this.plugin.saveSettings(),c&&(this.plugin.claudeExtractor=new N(c,this.plugin.settings.claudeModel))})),new p.Setting(i).setName("Claude Model").setDesc("Which Claude model to use").addDropdown(o=>o.addOption("claude-3-5-haiku-20241022","Claude 3.5 Haiku (Fast & Cheap)").addOption("claude-sonnet-4-20250514","Claude Sonnet 4 (Balanced)").addOption("claude-opus-4-1-20250805","Claude Opus 4.1 (Most Capable)").setValue(this.plugin.settings.claudeModel).onChange(async c=>{this.plugin.settings.claudeModel=c,await this.plugin.saveSettings()})),i.createEl("h3",{text:"Obsidian Settings"}),new p.Setting(i).setName("Email notes folder").setDesc("Base folder for all email-based notes (organized by label inside)").addText(o=>o.setPlaceholder("TaskAgent").setValue(this.plugin.settings.emailNotesFolder).onChange(async c=>{this.plugin.settings.emailNotesFolder=c||"TaskAgent",await this.plugin.saveSettings()})),i.createEl("h3",{text:"Dashboard Settings"}),new p.Setting(i).setName("Show only my tasks").setDesc("Filter dashboard to show only tasks assigned to you").addToggle(o=>o.setValue(this.plugin.settings.dashboardShowOnlyMyTasks).onChange(async c=>{this.plugin.settings.dashboardShowOnlyMyTasks=c,await this.plugin.saveSettings()})),new p.Setting(i).setName("My name(s)").setDesc("Your name(s) for filtering tasks (comma-separated)").addText(o=>o.setPlaceholder("Your name, other name").setValue(this.plugin.settings.dashboardMyName).onChange(async c=>{this.plugin.settings.dashboardMyName=c,await this.plugin.saveSettings()})),i.createEl("h3",{text:"Notification Settings"}),new p.Setting(i).setName("Show detailed notifications").setDesc("Show email titles in status messages while processing").addToggle(o=>o.setValue(this.plugin.settings.showDetailedNotifications).onChange(async c=>{this.plugin.settings.showDetailedNotifications=c,await this.plugin.saveSettings()})),i.createEl("h3",{text:"Actions"}),new p.Setting(i).setName("Process emails now").setDesc("Search for meeting emails and create notes").addButton(o=>o.setButtonText("Process").setCta().onClick(async()=>{await this.plugin.processEmails()})),new p.Setting(i).setName("Reset processed emails").setDesc("Clear the list of already processed emails").addButton(o=>o.setButtonText("Reset").setWarning().onClick(async()=>{await this.plugin.resetProcessedEmails()}));let s=i.createDiv("status-info"),a=(r=this.plugin.gmailService)!=null&&r.isAuthenticated()?"\u2705 Gmail authenticated":"\u274C Gmail not authenticated",n=this.plugin.settings.anthropicApiKey?"\u2705 Claude AI configured":"\u26A0\uFE0F Claude AI not configured";s.createEl("p",{text:a,cls:(l=this.plugin.gmailService)!=null&&l.isAuthenticated()?"mod-success":"mod-warning"}),s.createEl("p",{text:n,cls:this.plugin.settings.anthropicApiKey?"mod-success":"mod-warning"})}};
