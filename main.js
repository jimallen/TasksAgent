/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var H=Object.defineProperty;var j=Object.getOwnPropertyDescriptor;var q=Object.getOwnPropertyNames;var U=Object.prototype.hasOwnProperty;var z=(S,o)=>{for(var e in o)H(S,e,{get:o[e],enumerable:!0})},V=(S,o,e,s)=>{if(o&&typeof o=="object"||typeof o=="function")for(let t of q(o))!U.call(S,t)&&t!==e&&H(S,t,{get:()=>o[t],enumerable:!(s=j(o,t))||s.enumerable});return S};var W=S=>V(H({},"__esModule",{value:!0}),S);var K={};z(K,{default:()=>N});module.exports=W(K);var h=require("obsidian");var G=require("obsidian"),P=class{constructor(o,e="claude-3-5-haiku-20241022"){this.apiUrl="https://api.anthropic.com/v1/messages";this.apiKey=o,this.model=e}async extractTasks(o,e){if(!this.apiKey)return console.warn("No Claude API key found, using fallback extraction"),this.fallbackExtraction(o,e);try{let s=this.buildPrompt(o,e),t=await this.callClaude(s);return this.parseResponse(t,o)}catch(s){return console.error("Claude task extraction failed, using fallback",s),this.fallbackExtraction(o,e)}}buildPrompt(o,e){let s=typeof o=="string"?o:JSON.stringify(o);return`You are an expert at extracting actionable tasks from meeting transcripts. Analyze the following meeting transcript and extract all tasks, action items, and commitments.

MEETING SUBJECT: ${e}

TRANSCRIPT:
${s.substring(0,15e3)} ${s.length>15e3?"... [truncated]":""}

Extract the following information and return as JSON:

1. **tasks** - Array of task objects with:
   - description: Clear, actionable task description
   - assignee: Person responsible (use actual names from the meeting, default "Unassigned" if unclear)
   - priority: "high", "medium", or "low" based on urgency/importance
   - confidence: 0-100 score of how confident you are this is a real task
   - dueDate: ISO date string if mentioned (optional)
   - category: engineering/product/design/documentation/communication/other
   - context: Brief context about why this task exists
   - rawText: The original text that led to this task

2. **summary** - 2-3 sentence meeting summary

3. **participants** - Array of participant names (extract all names mentioned)

4. **meetingDate** - ISO date string (use today if not specified)

5. **keyDecisions** - Array of important decisions made

6. **nextSteps** - Array of general next steps beyond specific tasks

Guidelines:
- Focus on explicit commitments ("I will", "I'll", "Let me", "I can", "[Name] will")
- Include tasks with deadlines or time constraints
- Capture follow-ups and action items
- Ignore general discussions or past work
- Be conservative - only extract clear tasks
- Only use names that actually appear in the transcript
- Default assignee should be "Unassigned" for unclear ownership

Return ONLY valid JSON, no other text:`}async callClaude(o){var e,s,t,i,n;try{let a=await(0,G.requestUrl)({url:this.apiUrl,method:"POST",headers:{"x-api-key":this.apiKey,"anthropic-version":"2023-06-01","content-type":"application/json"},body:JSON.stringify({model:this.model,messages:[{role:"user",content:o}],max_tokens:4e3,temperature:.2,system:"You are a task extraction assistant. Always respond with valid JSON only, no markdown or explanations."})});if((t=(s=(e=a.json)==null?void 0:e.content)==null?void 0:s[0])!=null&&t.text)return a.json.content[0].text;throw new Error("Invalid Claude API response structure")}catch(a){throw((i=a.response)==null?void 0:i.status)===401?console.error("Invalid Claude API key"):((n=a.response)==null?void 0:n.status)===429&&console.error("Claude API rate limit exceeded"),a}}parseResponse(o,e){try{let s=o.match(/\{[\s\S]*\}/);if(!s)throw new Error("No JSON found in response");let t=JSON.parse(s[0]),i=this.normalizeTasks(t.tasks||[]),n=t.participants||[];return{tasks:this.deduplicateTasks(i),summary:t.summary||"Meeting transcript processed",participants:n,meetingDate:this.parseDate(t.meetingDate)||new Date,keyDecisions:t.keyDecisions||[],nextSteps:t.nextSteps||[],confidence:this.calculateOverallConfidence(i)}}catch(s){return console.error("Failed to parse Claude response",s),console.debug("Raw response:",o),this.fallbackExtraction(e,"")}}normalizeTasks(o){return o.map(e=>({description:this.cleanDescription(e.description||""),assignee:e.assignee||"Unassigned",priority:this.normalizePriority(e.priority),confidence:this.normalizeConfidence(e.confidence),dueDate:e.dueDate,category:e.category||"other",context:e.context,rawText:e.rawText})).filter(e=>e.description&&e.description.length>5)}cleanDescription(o){return o.replace(/^[-*•]\s*/,"").replace(/\s+/g," ").trim()}normalizePriority(o){let e=String(o).toLowerCase();return e.includes("high")||e==="3"?"high":e.includes("low")||e==="1"?"low":"medium"}normalizeConfidence(o){let e=Number(o);return isNaN(e)?75:Math.min(100,Math.max(0,e))}parseDate(o){if(!o)return null;let e=new Date(o);return isNaN(e.getTime())?null:e}deduplicateTasks(o){let e=new Set;return o.filter(s=>{let t=`${s.description.toLowerCase()}-${s.assignee.toLowerCase()}`;return e.has(t)?!1:(e.add(t),!0)})}calculateOverallConfidence(o){if(o.length===0)return 0;let e=o.reduce((s,t)=>s+t.confidence,0);return Math.round(e/o.length)}fallbackExtraction(o,e){let s=[],t=o.split(`
`),i=[/(?:I will|I'll|I can|Let me|I need to|I should|I have to)\s+(.+)/i,/(?:TODO|Action|Task|Follow.?up):\s*(.+)/i,/(?:Next steps?|Action items?):\s*(.+)/i,/\[ \]\s+(.+)/,/^[-*•]\s*(.+(?:will|need to|should|must).+)/i];for(let r of t)for(let c of i){let d=r.match(c);d&&s.push({description:this.cleanDescription(d[1]),assignee:"Unassigned",priority:"medium",confidence:50,category:"other",rawText:r})}let n=[],a=/(?:with|from|to|cc|attendees?:)\s*([A-Z][a-z]+(?:\s+[A-Z][a-z]+)*)/gi,l;for(;(l=a.exec(o))!==null;)n.includes(l[1])||n.push(l[1]);return{tasks:this.deduplicateTasks(s),summary:e||"Meeting notes",participants:n,meetingDate:new Date,keyDecisions:[],nextSteps:[],confidence:30}}};var x=require("obsidian"),I="task-dashboard-view",L=class extends x.ItemView{constructor(e,s){super(e);this.showOnlyMyTasks=!0;this.allTasks=[];this.isLoading=!1;this.filterCounts=null;this.badgeElements=new Map;this.updateCountsDebounceTimer=null;this.component=new x.Component,this.plugin=s,this.showOnlyMyTasks=!0}getViewType(){return I}getDisplayText(){return"Task Dashboard"}getIcon(){return"check-square"}async onOpen(){await this.refresh()}async onClose(){this.updateCountsDebounceTimer&&(clearTimeout(this.updateCountsDebounceTimer),this.updateCountsDebounceTimer=null),this.component.unload()}async refresh(){let e=this.containerEl.children[1];e.empty(),e.addClass("dashboard"),e.addClass("markdown-preview-view"),this.showLoadingState(e);try{await this.loadAndDisplayDashboard(e)}catch(s){console.error("Failed to refresh dashboard:",s),this.showErrorState(e,s)}}showLoadingState(e){let s=e.createDiv("dashboard-loading");s.createEl("div",{cls:"loading-spinner"}),s.createEl("p",{text:"Loading tasks...",cls:"loading-text"})}showErrorState(e,s){e.empty();let t=e.createDiv("dashboard-error");t.createEl("h2",{text:"\u26A0\uFE0F Error Loading Dashboard"}),t.createEl("p",{text:"Failed to load tasks. Please try refreshing."}),t.createEl("pre",{text:(s==null?void 0:s.message)||"Unknown error",cls:"error-details"});let i=t.createEl("button",{text:"\u{1F504} Retry",cls:"dashboard-control-btn"});i.onclick=()=>this.refresh()}async loadAndDisplayDashboard(e){var l,r;e.empty();let s=e.createDiv("dashboard-header");s.createEl("h1",{text:"TASK DASHBOARD",cls:"title"});let t=s.createDiv("dashboard-controls");if((r=(l=this.plugin)==null?void 0:l.settings)!=null&&r.dashboardMyName){let c=t.createEl("button",{text:this.showOnlyMyTasks?"\u{1F465} Show All Tasks":"\u{1F464} Show My Tasks",cls:"dashboard-control-btn dashboard-toggle-btn"});c.onclick=()=>{this.showOnlyMyTasks=!this.showOnlyMyTasks,c.textContent=this.showOnlyMyTasks?"\u{1F465} Show All Tasks":"\u{1F464} Show My Tasks",this.updateFilterCounts(!0),this.updateTaskDisplay()}}let i=t.createEl("button",{text:"\u{1F504} Refresh",cls:"dashboard-control-btn dashboard-refresh-btn"});i.onclick=()=>this.refresh();let n=e.createDiv("dashboard-filters");this.createFilterButtons(n);try{this.isLoading=!0,this.allTasks=await this.loadTasks()}catch(c){console.error("Failed to load tasks:",c),new x.Notice("Failed to load tasks. Check console for details."),this.allTasks=[]}finally{this.isLoading=!1}this.updateFilterCounts(!0);let a=this.getFilteredTasks();await this.displayTasks(e,a),this.applyDashboardStyles()}createBadgeElement(e,s){if(e===0)return null;let t=document.createElement("span");return t.className="filter-badge",t.setAttribute("data-filter-type",s),t.textContent=e.toString(),t}createFilterButtons(e){let s=e.createDiv("filter-group");this.badgeElements.clear();let t=this.getCurrentFilterCounts();this.filterCounts=t,[{label:"High Priority",filter:"high",active:!0,dataAttr:"high",count:t.high},{label:"Medium Priority",filter:"medium",dataAttr:"medium",count:t.medium},{label:"Low Priority",filter:"low",dataAttr:"low",count:t.low},{label:"Past Due",filter:"overdue",dataAttr:"overdue",count:t.overdue},{label:"Due Today",filter:"today",dataAttr:"due-today",count:t.today},{label:"Due This Week",filter:"week",dataAttr:"due-week",count:t.week},{label:"Completed",filter:"completed",dataAttr:"completed",count:t.completed}].forEach(n=>{let a=s.createEl("button",{cls:n.active?"filter-btn active":"filter-btn"});a.setAttribute("data-filter",n.dataAttr);let l=a.createEl("span",{text:n.label,cls:"filter-btn-label"}),r=this.createBadgeElement(n.count,n.dataAttr);r&&(a.appendChild(r),this.badgeElements.set(n.filter,r)),a.onclick=()=>{a.hasClass("active")?(a.removeClass("active"),this.applyFilter("all")):(s.querySelectorAll(".filter-btn").forEach(c=>{c instanceof HTMLElement&&c.removeClass("active")}),a.addClass("active"),this.applyFilter(n.filter))}})}async loadTasks(){let e=[],s=this.app.vault.getMarkdownFiles();for(let t of s){let i=await this.extractTasksFromFile(t);e.push(...i)}return e}async extractTasksFromFile(e){let s=[];try{let i=(await this.app.vault.read(e)).split(`
`);for(let n=0;n<i.length;n++){let a=i[n],l=a.match(/^[\s-]*\[([ x])\]\s+(.+)/);if(l){let r=l[1]==="x",c=l[2],d="medium";a.includes("\u23EB")||a.includes("\u{1F53C}")||a.includes("\u{1F534}")||c.includes("High Priority")?d="high":a.includes("\u23EC")||a.includes("\u{1F53D}")||a.includes("\u{1F7E2}")||c.includes("Low Priority")?d="low":a.includes("\u{1F7E1}")&&(d="medium");let u=c.match(/\[\[@?([^\]]+)\]\]/),g=u?u[1]:"Unassigned",T=c.match(/📅\s*(\d{4}-\d{2}-\d{2})/),m=T?T[1]:"",p=c.match(/⚠️\s*(\d+)%/),f=p?parseInt(p[1]):100,k=c.match(/#(\w+)/),y=k?k[1]:"general",C=c.replace(/\[\[@?[^\]]+\]\]/g,"").replace(/📅\s*\d{4}-\d{2}-\d{2}/g,"").replace(/[🔴🟡🟢]/g,"").replace(/⚠️\s*\d+%/g,"").replace(/#\w+/g,"").trim();s.push({text:C,completed:r,assignee:g,dueDate:m,priority:d,confidence:f,category:y,file:e,line:n,rawLine:a})}}}catch(t){console.error(`Failed to read file ${e.path}:`,t)}return s}async displayTasks(e,s){let t=s.filter(l=>l.priority==="high"&&!l.completed),i=s.filter(l=>l.priority==="medium"&&!l.completed),n=s.filter(l=>l.priority==="low"&&!l.completed),a=s.filter(l=>l.completed);if(t.length>0&&await this.createTaskSection(e,"\u{1F534} High Priority",t,"high"),i.length>0&&await this.createTaskSection(e,"\u{1F7E1} Medium Priority",i,"medium"),n.length>0&&await this.createTaskSection(e,"\u{1F7E2} Low Priority",n,"low"),a.length>0){let l=e.createDiv("task-section completed-section"),r=l.createEl("h2",{text:`\u2705 Completed (${a.length})`,cls:"collapsible"}),c=l.createDiv("task-grid collapsed");r.onclick=()=>{c.hasClass("collapsed")?(c.removeClass("collapsed"),r.removeClass("collapsed")):(c.addClass("collapsed"),r.addClass("collapsed"))},await this.createTaskCards(c,a,"completed")}}async createTaskSection(e,s,t,i){let n=e.createDiv(`task-section ${i}-section`);n.createEl("h2",{text:`${s} (${t.length})`});let a=n.createDiv("task-grid");await this.createTaskCards(a,t,i)}async createTaskCards(e,s,t){let i={};s.forEach(a=>{let l=a.assignee||"Unassigned";i[l]||(i[l]=[]),i[l].push(a)});let n=Object.keys(i).sort((a,l)=>{var c,d,u;let r=(u=(d=(c=this.plugin)==null?void 0:c.settings)==null?void 0:d.dashboardMyName)==null?void 0:u.toLowerCase();if(r){let g=r.split(",").map(k=>k.trim()).filter(k=>k.length>0),T=a.toLowerCase(),m=l.toLowerCase(),p=g.some(k=>T.includes(k)),f=g.some(k=>m.includes(k));if(p&&!f)return-1;if(f&&!p)return 1}return a.localeCompare(l)});for(let a of n){let l=e.createDiv(`task-card ${t}-card`),c=l.createDiv("card-header").createEl("h3",{text:`\u{1F464} ${a}`,cls:"card-assignee-title"}),d=l.createEl("ul",{cls:"task-list"});for(let u of i[a]){let g=d.createEl("li",{cls:"task-list-item"}),T=g.createEl("input",{type:"checkbox",cls:"task-checkbox"});T.checked=u.completed,T.onclick=async()=>{await this.toggleTask(u,T.checked,g)};let m=g.createDiv("task-content"),p=m.createEl("span",{text:u.text,cls:u.completed?"task-text completed clickable":"task-text clickable"});p.onclick=async b=>{b.stopPropagation();let D=this.app.workspace.getLeaf(!1);await D.openFile(u.file);let v=D.view;if(v&&"editor"in v){let E=v.editor;E&&(E.setCursor(u.line,0),E.scrollIntoView({from:{line:Math.max(0,u.line-5),ch:0},to:{line:Math.min(E.lineCount()-1,u.line+5),ch:0}}))}},p.title=`Click to open: ${u.file.basename}`;let f=m.createDiv("task-meta"),k=f.createEl("span",{cls:"task-source clickable",text:`\u{1F4C4} ${u.file.basename}`});if(k.onclick=p.onclick,k.title=`Click to open: ${u.file.basename}`,u.dueDate){let b=f.createEl("span",{cls:"task-due"});b.setText(`\u{1F4C5} ${u.dueDate}`),!u.completed&&new Date(u.dueDate)<new Date&&b.addClass("overdue")}u.category&&f.createEl("span",{text:`#${u.category}`,cls:"task-category"}),u.confidence&&u.confidence<70&&f.createEl("span",{text:`\u26A0\uFE0F ${u.confidence}%`,cls:"task-confidence"});let y=f.createEl("a",{text:"\u{1F4C4}",cls:"task-source",title:u.file.basename});y.onclick=b=>{b.preventDefault(),this.app.workspace.getLeaf().openFile(u.file)};let C=g.createEl("button",{cls:"task-edit-btn",text:"\u270F\uFE0F",title:"Edit task"}),$=g.createEl("div",{cls:"task-edit-controls"});$.style.display="none";let w=!1;if(C.onclick=()=>{w=!w,$.style.display=w?"block":"none",C.classList.toggle("active",w)},$){let b=$.createDiv("task-edit-row"),D=b.createEl("select",{cls:"task-priority-select"});["high","medium","low"].forEach(M=>{let _=D.createEl("option",{text:M,value:M});M===u.priority&&(_.selected=!0)}),D.onchange=async()=>{await this.updateTaskPriority(u,D.value,g)};let v=b.createEl("input",{type:"text",cls:"task-assignee-input",placeholder:"Assign to...",value:u.assignee}),E=b.createEl("button",{text:"\u2713",cls:"task-save-btn",title:"Save assignee"});E.onclick=async()=>{await this.updateTaskAssignee(u,v.value,g)}}}}}async toggleTask(e,s,t){try{let n=(await this.app.vault.read(e.file)).split(`
`);s?n[e.line]=e.rawLine.replace("[ ]","[x]"):n[e.line]=e.rawLine.replace("[x]","[ ]"),await this.app.vault.modify(e.file,n.join(`
`)),e.completed=s,t&&s?(t.style.transition="opacity 0.3s ease-out, transform 0.3s ease-out",t.style.opacity="0",t.style.transform="translateX(-10px)",setTimeout(()=>{t.remove();let a=t.closest(".task-card");a&&a.querySelectorAll(".task-list-item").length===0&&(a.style.transition="opacity 0.3s ease-out",a.style.opacity="0",setTimeout(()=>{a.remove();let r=a.closest(".task-section");r&&r.querySelectorAll(".task-card").length===0&&(r.style.display="none")},300)),this.updateStatsOnly(),this.updateFilterCounts()},300)):s||setTimeout(()=>this.refresh(),500)}catch(i){console.error("Failed to toggle task:",i),new x.Notice("Failed to update task. Please try again.")}}async updateTaskPriority(e,s,t){try{let n=(await this.app.vault.read(e.file)).split(`
`),a=n[e.line];a=a.replace(/🔴\s*/g,"").replace(/🟡\s*/g,"").replace(/🟢\s*/g,""),a=a.replace(/High Priority/gi,"").replace(/Medium Priority/gi,"").replace(/Low Priority/gi,"");let l=a.match(/^([\s-]*)\[([x ]?)\]\s*/);if(l){let r=l[0],c=a.substring(r.length),d="";s==="high"?d="\u{1F534} ":s==="medium"?d="\u{1F7E1} ":s==="low"&&(d="\u{1F7E2} "),n[e.line]=r+d+c.trim()}if(await this.app.vault.modify(e.file,n.join(`
`)),e.priority=s,t){let r=t.closest(".task-card"),c=r==null?void 0:r.closest(".task-section");if(r&&c){let d=this.containerEl.children[1],u="";s==="high"?u="high-priority":s==="medium"?u="medium-priority":u="low-priority";let g=d.querySelector(`.task-section.${u}`);g&&g!==c&&(t.style.transition="opacity 0.3s ease-out",t.style.opacity="0",setTimeout(()=>{t.remove(),r.querySelectorAll(".task-list-item").length===0&&(r.style.transition="opacity 0.3s ease-out",r.style.opacity="0",setTimeout(()=>r.remove(),300));let m=e.assignee,p=Array.from(g.querySelectorAll(".task-card")).find(k=>{var C;let y=(C=k.querySelector("h3"))==null?void 0:C.textContent;return y==null?void 0:y.includes(m)});p||(p=g.createDiv(`task-card ${s}-card`),p.createDiv("card-header").createEl("h3",{text:`\u{1F464} ${m}`,cls:"card-assignee-title"}),p.createEl("ul",{cls:"task-list"}));let f=p.querySelector(".task-list");if(f){let k=f.createEl("li",{cls:"task-list-item"});k.innerHTML=t.innerHTML;let y=k.querySelector(".task-checkbox");y&&(y.onclick=async()=>{await this.toggleTask(e,y.checked,k)}),k.style.opacity="0",setTimeout(()=>{k.style.transition="opacity 0.3s ease-in",k.style.opacity="1"},10)}this.updateStatsOnly()},300))}}else setTimeout(()=>this.refresh(),500)}catch(i){console.error("Failed to update task priority:",i),new x.Notice("Failed to update priority. Please try again.")}}async updateTaskAssignee(e,s,t){try{let n=(await this.app.vault.read(e.file)).split(`
`),a=n[e.line];a=a.replace(/\[\[@?[^\]]+\]\]/g,"");let l=a.match(/📅\s*\d{4}-\d{2}-\d{2}/);l&&l.index!==void 0?a=a.substring(0,l.index)+`[[@${s.trim()}]] `+a.substring(l.index):a=a.trim()+` [[@${s.trim()}]]`,n[e.line]=a,await this.app.vault.modify(e.file,n.join(`
`));let r=e.assignee;if(e.assignee=s.trim(),t&&r!==e.assignee){let c=t.closest(".task-card"),d=c==null?void 0:c.closest(".task-section");c&&d&&(t.style.transition="opacity 0.3s ease-out",t.style.opacity="0",setTimeout(()=>{t.remove(),c.querySelectorAll(".task-list-item").length===0&&(c.style.transition="opacity 0.3s ease-out",c.style.opacity="0",setTimeout(()=>c.remove(),300));let g=Array.from(d.querySelectorAll(".task-card")).find(m=>{var f;let p=(f=m.querySelector("h3"))==null?void 0:f.textContent;return p==null?void 0:p.includes(e.assignee)});if(!g){let m=e.priority||"medium";g=d.createDiv(`task-card ${m}-card`),g.createDiv("card-header").createEl("h3",{text:`\u{1F464} ${e.assignee}`,cls:"card-assignee-title"}),g.createEl("ul",{cls:"task-list"})}let T=g.querySelector(".task-list");if(T){let m=T.createEl("li",{cls:"task-list-item"});m.innerHTML=t.innerHTML;let p=m.querySelector(".task-metadata");p&&(p.innerHTML=p.innerHTML.replace(/👤\s*[^<]*/g,`\u{1F464} ${e.assignee}`));let f=m.querySelector(".task-checkbox");f&&(f.onclick=async()=>{await this.toggleTask(e,f.checked,m)});let k=m.querySelector(".edit-button");if(k){let y=m.querySelector(".edit-container");if(y){k.onclick=()=>{y.style.display=y.style.display==="none"?"flex":"none"};let C=y.querySelector("select");C&&(C.onchange=async()=>{await this.updateTaskPriority(e,C.value,m)});let $=y.querySelector("button"),w=y.querySelector("input");$&&w&&($.onclick=async()=>{await this.updateTaskAssignee(e,w.value,m)})}}m.style.opacity="0",setTimeout(()=>{m.style.transition="opacity 0.3s ease-in",m.style.opacity="1"},10)}this.updateStatsOnly()},300))}else t||setTimeout(()=>this.refresh(),500)}catch(i){console.error("Failed to update task assignee:",i),new x.Notice("Failed to update assignee. Please try again.")}}applyFilter(e){this.containerEl.querySelectorAll(".task-section").forEach(t=>{if(!(t instanceof HTMLElement))return;let i=t.querySelectorAll(".task-card"),n=!1;i.forEach(a=>{var r,c,d,u;if(!(a instanceof HTMLElement))return;let l=!0;switch(e){case"all":l=!0;break;case"high":l=a.hasClass("high-card");break;case"medium":l=a.hasClass("medium-card");break;case"low":l=a.hasClass("low-card");break;case"completed":l=a.hasClass("completed-card");break;case"mine":let g=a.querySelector("h3");if(g&&g.textContent){let T=g.textContent.replace(/^👤\s*/,"").trim().toLowerCase(),m=(u=(d=(c=(r=this.plugin)==null?void 0:r.settings)==null?void 0:c.dashboardMyName)==null?void 0:d.toLowerCase())==null?void 0:u.trim();m?l=m.split(",").map(f=>f.trim()).filter(f=>f.length>0).some(f=>T===f||T.includes(f)):l=!1}else l=!1;break;case"overdue":l=this.hasTasksOverdue(a);break;case"today":l=this.hasTasksDueToday(a);break;case"week":l=this.hasTasksDueThisWeek(a);break}a.style.display=l?"block":"none",l&&(n=!0)}),t.style.display=n?"block":"none"})}hasTasksDueToday(e){var n;if(e.classList.contains("completed-card"))return!1;let s=e.querySelectorAll(".task-list-item"),t=new Date;t.setHours(0,0,0,0);let i=new Date(t);i.setDate(i.getDate()+1);for(let a of Array.from(s)){let l=a.querySelector(".task-checkbox");if(l&&l.checked)continue;let r=a.querySelector(".task-due");if(r){let c=(n=r.textContent)==null?void 0:n.match(/\d{4}-\d{2}-\d{2}/);if(c){let d=new Date(c[0]+"T00:00:00");if(d.setHours(0,0,0,0),d>=t&&d<i)return!0}}}return!1}hasTasksDueThisWeek(e){var n;if(e.classList.contains("completed-card"))return!1;let s=e.querySelectorAll(".task-list-item"),t=new Date;t.setHours(0,0,0,0);let i=new Date(t);i.setDate(i.getDate()+7);for(let a of Array.from(s)){let l=a.querySelector(".task-checkbox");if(l&&l.checked)continue;let r=a.querySelector(".task-due");if(r){let c=(n=r.textContent)==null?void 0:n.match(/\d{4}-\d{2}-\d{2}/);if(c){let d=new Date(c[0]+"T00:00:00");if(d.setHours(0,0,0,0),d>=t&&d<=i)return!0}}}return!1}hasTasksOverdue(e){var i;if(e.classList.contains("completed-card"))return!1;let s=e.querySelectorAll(".task-list-item"),t=new Date;t.setHours(0,0,0,0);for(let n of Array.from(s)){let a=n.querySelector(".task-checkbox");if(a&&a.checked)continue;let l=n.querySelector(".task-due");if(l){let r=(i=l.textContent)==null?void 0:i.match(/\d{4}-\d{2}-\d{2}/);if(r){let c=new Date(r[0]+"T00:00:00");if(c.setHours(0,0,0,0),c<t)return!0}}}return!1}updateStatsOnly(){}getFilteredTasks(){var e,s;if(this.showOnlyMyTasks&&((s=(e=this.plugin)==null?void 0:e.settings)!=null&&s.dashboardMyName)){let t=this.plugin.settings.dashboardMyName.split(",").map(i=>i.toLowerCase().trim()).filter(i=>i.length>0);return t.length===0?this.allTasks:this.allTasks.filter(i=>{let n=i.assignee.toLowerCase().trim();return t.some(a=>n===a||n.includes(a))})}return this.allTasks}calculateFilterCounts(e){let s=new Date,t=new Date(s.getFullYear(),s.getMonth(),s.getDate()),i=new Date(t.getTime()+1440*60*1e3-1),n=new Date(t.getTime()+10080*60*1e3),a={high:0,medium:0,low:0,today:0,week:0,overdue:0,completed:0};for(let l of e){if(!l.completed&&(l.priority==="high"?a.high++:l.priority==="medium"?a.medium++:l.priority==="low"&&a.low++,l.dueDate)){let r=new Date(l.dueDate);r<t?a.overdue++:r>=t&&r<=i&&a.today++,r>=t&&r<=n&&a.week++}l.completed&&a.completed++}return a}getCurrentFilterCounts(){let e=this.getFilteredTasks();return this.calculateFilterCounts(e)}updateFilterCountsImmediate(){let e=this.getCurrentFilterCounts();this.filterCounts=e;let s=(t,i)=>{let n=this.badgeElements.get(t);if(n)i>0?(n.textContent=i.toString(),n.style.display="inline-flex"):n.style.display="none";else if(i>0){let a=this.containerEl.querySelector(`[data-filter="${this.getDataAttr(t)}"]`);if(a){let l=this.createBadgeElement(i,this.getDataAttr(t));l&&(a.appendChild(l),this.badgeElements.set(t,l))}}};s("high",e.high),s("medium",e.medium),s("low",e.low),s("overdue",e.overdue),s("today",e.today),s("week",e.week),s("completed",e.completed)}updateFilterCounts(e=!1){if(e){this.updateFilterCountsImmediate();return}this.updateCountsDebounceTimer&&clearTimeout(this.updateCountsDebounceTimer),this.updateCountsDebounceTimer=setTimeout(()=>{this.updateFilterCountsImmediate(),this.updateCountsDebounceTimer=null},150)}getDataAttr(e){return{high:"high",medium:"medium",low:"low",overdue:"overdue",today:"due-today",week:"due-week",completed:"completed"}[e]||e}async updateTaskDisplay(){try{let e=this.containerEl.children[1];e.querySelectorAll(".task-section").forEach(i=>i.remove());let t=this.getFilteredTasks();await this.displayTasks(e,t)}catch(e){console.error("Failed to update task display:",e),new x.Notice("Failed to update display. Please refresh.")}}applyDashboardStyles(){}};var A=require("obsidian"),F=class{constructor(o,e){this.getStoredToken=o;this.saveToken=e;this.credentials=null;this.token=null;this.baseUrl="https://gmail.googleapis.com/gmail/v1";this.authBaseUrl="https://accounts.google.com/o/oauth2";this.tokenUrl="https://oauth2.googleapis.com/token";this.redirectUri="http://localhost";this.token=this.getStoredToken()}setCredentials(o,e,s){this.redirectUri=s||"http://localhost",this.credentials={client_id:o,client_secret:e,redirect_uri:this.redirectUri}}getAuthorizationUrl(){if(!this.credentials)throw new Error("Credentials not set. Please configure Google OAuth in settings.");let o=new URLSearchParams({client_id:this.credentials.client_id,redirect_uri:this.redirectUri,response_type:"code",scope:"https://www.googleapis.com/auth/gmail.readonly",access_type:"offline",prompt:"consent"});return`${this.authBaseUrl}/auth?${o.toString()}`}async exchangeCodeForToken(o){if(!this.credentials)throw new Error("Credentials not set");try{let e=await(0,A.requestUrl)({url:this.tokenUrl,method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({code:o,client_id:this.credentials.client_id,client_secret:this.credentials.client_secret,redirect_uri:this.redirectUri,grant_type:"authorization_code"}).toString()});if(e.status===200){let s=e.json;this.token={access_token:s.access_token,refresh_token:s.refresh_token,expiry_date:Date.now()+s.expires_in*1e3,token_type:s.token_type,scope:s.scope},await this.saveToken(this.token)}else throw new Error(`Failed to exchange code: ${e.text}`)}catch(e){throw console.error("OAuth token exchange failed:",e),e}}async refreshAccessToken(){var o;if(!this.credentials||!((o=this.token)!=null&&o.refresh_token))throw new Error("Cannot refresh token: missing credentials or refresh token");try{let e=await(0,A.requestUrl)({url:this.tokenUrl,method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({refresh_token:this.token.refresh_token,client_id:this.credentials.client_id,client_secret:this.credentials.client_secret,grant_type:"refresh_token"}).toString()});if(e.status===200){let s=e.json;this.token={...this.token,access_token:s.access_token,expiry_date:Date.now()+s.expires_in*1e3},await this.saveToken(this.token)}else throw new Error(`Failed to refresh token: ${e.text}`)}catch(e){throw console.error("Token refresh failed:",e),e}}async ensureValidToken(){if(!this.token)throw new Error("Not authenticated. Please authenticate with Gmail first.");this.token.expiry_date&&Date.now()>=this.token.expiry_date-6e4&&(console.log("[Gmail] Token expired or expiring soon, refreshing..."),await this.refreshAccessToken())}async makeGmailRequest(o,e={}){await this.ensureValidToken();let s=o.startsWith("http")?o:`${this.baseUrl}${o}`;try{let t=await(0,A.requestUrl)({url:s,method:e.method||"GET",headers:{Authorization:`Bearer ${this.token.access_token}`,"Content-Type":"application/json",...e.headers},...e});return t.status===401?(console.log("[Gmail] Received 401, attempting token refresh..."),await this.refreshAccessToken(),(await(0,A.requestUrl)({url:s,method:e.method||"GET",headers:{Authorization:`Bearer ${this.token.access_token}`,"Content-Type":"application/json",...e.headers},...e})).json):t.json}catch(t){throw console.error(`Gmail API request failed: ${o}`,t),t}}async searchEmails(o,e=100,s=5){try{console.log(`[Gmail] Searching with query: ${o}`);let t=await this.makeGmailRequest(`/users/me/messages?q=${encodeURIComponent(o)}&maxResults=${e}`);if(!t.messages||t.messages.length===0)return console.log("[Gmail] No messages found"),[];console.log(`[Gmail] Found ${t.messages.length} messages, fetching in batches of ${s}`);let i=[],n=t.messages.filter(l=>l.id),a=Math.ceil(n.length/s);console.log(`[Gmail] Starting parallel fetch: ${n.length} emails in ${a} batches`);for(let l=0;l<n.length;l+=s){let r=n.slice(l,l+s),c=Math.floor(l/s)+1;console.log(`[Gmail] Fetching batch ${c}/${a} (${r.length} emails in parallel)...`);let d=Date.now(),u=r.map(p=>(console.log(`[Gmail] Starting fetch for email ${p.id}`),this.getEmailById(p.id).catch(f=>(console.error(`[Gmail] Failed to fetch message ${p.id}:`,f),null)))),T=(await Promise.all(u)).filter(p=>p!==null);i.push(...T);let m=Date.now()-d;console.log(`[Gmail] Batch ${c} complete: ${T.length}/${r.length} successful in ${m}ms`)}return console.log(`[Gmail] All batches complete: ${i.length} emails fetched successfully`),i}catch(t){throw console.error("Email search failed:",t),t}}async getEmailById(o){var e,s,t;try{let i=await this.makeGmailRequest(`/users/me/messages/${o}?format=full`),n=((e=i.payload)==null?void 0:e.headers)||[],a=c=>{let d=n.find(u=>{var g;return((g=u.name)==null?void 0:g.toLowerCase())===c.toLowerCase()});return(d==null?void 0:d.value)||""},l=this.extractBody(i.payload),r=[];if((s=i.payload)!=null&&s.parts)for(let c of i.payload.parts)c.filename&&((t=c.body)!=null&&t.attachmentId)&&r.push({filename:c.filename,mimeType:c.mimeType,size:c.body.size,attachmentId:c.body.attachmentId});return{id:o,subject:a("subject"),from:a("from"),to:a("to"),date:a("date"),body:l,snippet:i.snippet||"",attachments:r}}catch(i){throw console.error(`Failed to get email ${o}:`,i),i}}extractBody(o){var e,s,t;if(!o)return"";if((e=o.body)!=null&&e.data)return atob(o.body.data.replace(/-/g,"+").replace(/_/g,"/"));if(o.parts){for(let i of o.parts)if(i.mimeType==="text/plain"&&((s=i.body)!=null&&s.data))return atob(i.body.data.replace(/-/g,"+").replace(/_/g,"/"));for(let i of o.parts)if(i.mimeType==="text/html"&&((t=i.body)!=null&&t.data))return atob(i.body.data.replace(/-/g,"+").replace(/_/g,"/")).replace(/<[^>]*>/g,"").trim();for(let i of o.parts){let n=this.extractBody(i);if(n)return n}}return""}async fetchRecentMeetingEmails(o,e){let s=new Date;s.setTime(s.getTime()-o*60*60*1e3);let t=s.toISOString().split("T")[0],i=(e||"transcript").split(",").map(l=>l.trim()).filter(l=>l);console.log(`[Gmail] Looking for emails with labels: ${i.join(", ")} after ${t} (${o} hours back)`);let n="";i.length===1?n=`label:${i[0]}`:n=`(${i.map(l=>`label:${l}`).join(" OR ")})`;let a=`${n} after:${t}`;return this.searchEmails(a,100)}isAuthenticated(){var o;return!!((o=this.token)!=null&&o.access_token)}hasRefreshToken(){var o;return!!((o=this.token)!=null&&o.refresh_token)}async testConnection(){try{await this.ensureValidToken();let o=await this.makeGmailRequest("/users/me/profile");return console.log("[Gmail] Connection test successful:",o.emailAddress),!0}catch(o){return console.error("[Gmail] Connection test failed:",o),!1}}clearAuthentication(){this.token=null}};var R=class{constructor(){this.server=null;this.port=42813;this.authCodePromise=null;this.authCodeResolve=null;this.authCodeReject=null}async start(){if(!this.server)return new Promise((o,e)=>{try{let s=window.require("http");this.server=s.createServer((t,i)=>{let n=new URL(t.url,`http://localhost:${this.port}`);if(n.pathname==="/callback"){let a=n.searchParams.get("code"),l=n.searchParams.get("error");i.writeHead(200,{"Content-Type":"text/html"}),a?(i.end(`
                <!DOCTYPE html>
                <html>
                <head>
                  <title>Authentication Successful</title>
                  <style>
                    body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                      display: flex;
                      justify-content: center;
                      align-items: center;
                      min-height: 100vh;
                      margin: 0;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white;
                    }
                    .container {
                      text-align: center;
                      padding: 2rem;
                      background: rgba(255, 255, 255, 0.1);
                      border-radius: 12px;
                      backdrop-filter: blur(10px);
                    }
                    .success-icon {
                      font-size: 4rem;
                      margin-bottom: 1rem;
                    }
                    h1 {
                      margin: 0 0 0.5rem 0;
                      font-size: 2rem;
                    }
                    p {
                      margin: 0.5rem 0;
                      opacity: 0.9;
                      font-size: 1.1rem;
                    }
                    .close-hint {
                      margin-top: 2rem;
                      font-size: 0.9rem;
                      opacity: 0.7;
                    }
                  </style>
                </head>
                <body>
                  <div class="container">
                    <div class="success-icon">\u2705</div>
                    <h1>Authentication Successful!</h1>
                    <p>You can now close this window and return to Obsidian.</p>
                    <p class="close-hint">This window will close automatically in 3 seconds...</p>
                  </div>
                  <script>
                    setTimeout(() => window.close(), 3000);
                  <\/script>
                </body>
                </html>
              `),this.authCodeResolve&&(this.authCodeResolve(a),this.authCodeResolve=null,this.authCodeReject=null)):(i.end(`
                <!DOCTYPE html>
                <html>
                <head>
                  <title>Authentication Failed</title>
                  <style>
                    body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                      display: flex;
                      justify-content: center;
                      align-items: center;
                      min-height: 100vh;
                      margin: 0;
                      background: linear-gradient(135deg, #f5576c 0%, #f093fb 100%);
                      color: white;
                    }
                    .container {
                      text-align: center;
                      padding: 2rem;
                      background: rgba(255, 255, 255, 0.1);
                      border-radius: 12px;
                      backdrop-filter: blur(10px);
                    }
                    .error-icon {
                      font-size: 4rem;
                      margin-bottom: 1rem;
                    }
                    h1 {
                      margin: 0 0 0.5rem 0;
                      font-size: 2rem;
                    }
                    p {
                      margin: 0.5rem 0;
                      opacity: 0.9;
                    }
                    .error-msg {
                      margin-top: 1rem;
                      padding: 1rem;
                      background: rgba(0, 0, 0, 0.2);
                      border-radius: 6px;
                      font-family: monospace;
                      font-size: 0.9rem;
                    }
                  </style>
                </head>
                <body>
                  <div class="container">
                    <div class="error-icon">\u274C</div>
                    <h1>Authentication Failed</h1>
                    <p>There was an error during authentication.</p>
                    ${l?`<div class="error-msg">Error: ${l}</div>`:""}
                    <p>Please close this window and try again.</p>
                  </div>
                </body>
                </html>
              `),this.authCodeReject&&(this.authCodeReject(new Error(l||"Authentication failed")),this.authCodeResolve=null,this.authCodeReject=null))}else i.writeHead(404),i.end("Not found")}),this.server.listen(this.port,"127.0.0.1",()=>{console.log(`[OAuth Server] Started on http://127.0.0.1:${this.port}`),o()}),this.server.on("error",t=>{t.code==="EADDRINUSE"?(console.error(`[OAuth Server] Port ${this.port} is already in use`),e(new Error(`Port ${this.port} is already in use. Please close any other applications using this port.`))):e(t)})}catch(s){e(s)}})}async stop(){if(this.timeoutId&&(clearTimeout(this.timeoutId),this.timeoutId=null),this.authCodeResolve=null,this.authCodeReject=null,this.authCodePromise=null,this.server)return new Promise(o=>{this.server.close(()=>{console.log("[OAuth Server] Stopped"),this.server=null,o()})})}async waitForAuthCode(){if(!this.server)throw new Error("OAuth server not started");return this.authCodeResolve=null,this.authCodeReject=null,this.authCodePromise=null,this.authCodePromise=new Promise((o,e)=>{this.authCodeResolve=o,this.authCodeReject=e;let s=setTimeout(()=>{this.authCodeResolve=null,this.authCodeReject=null,e(new Error("OAuth timeout - no response received within 5 minutes"))},300*1e3);this.timeoutId=s}),this.authCodePromise}getRedirectUri(){return`http://127.0.0.1:${this.port}/callback`}isRunning(){return this.server!==null}};var B={lookbackTime:"5d",lookbackHours:120,debugMode:!1,anthropicApiKey:"",googleClientId:"",googleClientSecret:"",notesFolder:"Meetings",claudeModel:"claude-3-5-haiku-20241022",dashboardShowOnlyMyTasks:!0,dashboardMyName:"",gmailLabels:"transcript",gmailToken:null,showDetailedNotifications:!0},N=class extends h.Plugin{constructor(){super(...arguments);this.gmailService=null;this.claudeExtractor=null;this.oauthServer=null;this.statusBarItem=null;this.emailIdCache=new Set}parseTimeToHours(e){let s=e.match(/^(\d+(?:\.\d+)?)\s*([hdwM]?)$/);if(!s){let n=parseFloat(e);return isNaN(n)?120:n}let t=parseFloat(s[1]);switch(s[2]||"h"){case"h":return t;case"d":return t*24;case"w":return t*24*7;case"M":return t*24*30;default:return t}}formatTimeString(e){return e<24?`${e}h`:e<168?`${Math.round(e/24)}d`:e<720?`${Math.round(e/168)}w`:`${Math.round(e/720)}M`}async loadEmailIdCache(){console.log("[LoadCache] Starting to load email IDs from vault notes..."),this.emailIdCache.clear();let e=this.app.vault.getMarkdownFiles();console.log(`[LoadCache] Found ${e.length} total markdown files in vault`);let s=0,t=0;for(let i of e)if(i.path.startsWith(this.settings.notesFolder)){s++;try{let a=(await this.app.vault.read(i)).match(/^---\n([\s\S]*?)\n---/);if(a){let l=a[1].match(/emailId:\s*(.+)/);if(l&&l[1]){let r=l[1].trim();this.emailIdCache.add(r),t++,console.log(`[LoadCache] Found emailId: ${r} in ${i.path}`)}}}catch(n){console.error(`[LoadCache] Error reading file ${i.path}:`,n)}}console.log(`[LoadCache] Scanned ${s} meeting notes, found ${t} email IDs`),console.log(`[LoadCache] Cache now contains ${this.emailIdCache.size} unique email IDs`),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),console.log(`[LoadCache] Saved ${this.settings.processedEmails.length} email IDs to settings`)}async onload(){console.log("==============================================="),console.log("Loading Meeting Tasks Plugin..."),console.log("Plugin version: 2.0.0"),console.log("===============================================");let e=await this.loadData();this.settings=Object.assign({},B,e),e!=null&&e.lookbackHours&&!(e!=null&&e.lookbackTime)?(this.settings.lookbackTime=this.formatTimeString(e.lookbackHours),this.settings.lookbackHours=e.lookbackHours):this.settings.lookbackTime&&(this.settings.lookbackHours=this.parseTimeToHours(this.settings.lookbackTime)),this.settings.processedEmails&&(this.settings.processedEmails.forEach(t=>this.emailIdCache.add(t)),console.log(`[Plugin] Loaded ${this.emailIdCache.size} email IDs from settings`)),this.app.workspace.onLayoutReady(async()=>{await this.loadEmailIdCache(),console.log(`[Plugin] Found ${this.emailIdCache.size} existing meeting notes in vault`)}),this.registerEvent(this.app.vault.on("delete",async t=>{var i;if(t instanceof h.TFile&&t.extension==="md"&&t.path.startsWith(this.settings.notesFolder)){console.log(`[Delete] Meeting note deleted: ${t.path}`);let n=this.app.metadataCache.getFileCache(t);if((i=n==null?void 0:n.frontmatter)!=null&&i.emailId){let a=n.frontmatter.emailId;console.log(`[Delete] Removing emailId from cache: ${a}`),this.emailIdCache.delete(a),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),console.log(`[Delete] Updated cache, now contains ${this.emailIdCache.size} email IDs`)}}})),this.registerEvent(this.app.vault.on("rename",async(t,i)=>{var n,a;if(t instanceof h.TFile&&t.extension==="md"){let l=i.startsWith(this.settings.notesFolder),r=t.path.startsWith(this.settings.notesFolder);if(l&&!r){console.log(`[Rename] File moved out of meetings folder: ${i} -> ${t.path}`);let c=this.app.metadataCache.getFileCache(t);if((n=c==null?void 0:c.frontmatter)!=null&&n.emailId){let d=c.frontmatter.emailId;console.log(`[Rename] Removing emailId from cache: ${d}`),this.emailIdCache.delete(d),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),console.log(`[Rename] Cache updated, now contains ${this.emailIdCache.size} email IDs`)}else console.log("[Rename] File has no emailId in frontmatter, skipping cache update")}else if(!l&&r){console.log(`[Rename] File moved into meetings folder: ${i} -> ${t.path}`),await new Promise(d=>setTimeout(d,100));let c=this.app.metadataCache.getFileCache(t);if((a=c==null?void 0:c.frontmatter)!=null&&a.emailId){let d=c.frontmatter.emailId;console.log(`[Rename] Adding emailId to cache: ${d}`),this.emailIdCache.add(d),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),console.log(`[Rename] Cache updated, now contains ${this.emailIdCache.size} email IDs`)}else try{let u=(await this.app.vault.read(t)).match(/^---\n([\s\S]*?)\n---/);if(u){let g=u[1].match(/emailId:\s*(.+)/);if(g&&g[1]){let T=g[1].trim();console.log(`[Rename] Adding emailId to cache (from file content): ${T}`),this.emailIdCache.add(T),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),console.log(`[Rename] Cache updated, now contains ${this.emailIdCache.size} email IDs`)}else console.log("[Rename] File has no emailId in frontmatter, not adding to cache")}else console.log("[Rename] File has no frontmatter, not adding to cache")}catch(d){console.error("[Rename] Error reading file content:",d)}}}})),this.registerObsidianProtocolHandler("meeting-tasks-oauth",async t=>{if(t.code)try{if(!this.gmailService){new h.Notice("Gmail service not initialized");return}await this.gmailService.exchangeCodeForToken(t.code),new h.Notice("\u2705 Successfully authenticated with Gmail!"),await this.initializeServices(),this.app.workspace.trigger("meeting-tasks:auth-complete")}catch(i){new h.Notice(`Authentication failed: ${i.message}`),console.error("OAuth callback error:",i)}else t.error&&new h.Notice(`Authentication failed: ${t.error}`)}),(0,h.addIcon)("mail-check",'<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8"/><path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"/><path d="m16 19 2 2 4-4"/></svg>');let s=this.addRibbonIcon("mail-check","Process meeting emails",async()=>{await this.processEmails()});this.statusBarItem=this.addStatusBarItem(),this.updateStatus("Ready"),this.addCommand({id:"process-meeting-emails",name:"\u{1F4E7} Process meeting emails now",callback:async()=>{await this.processEmails()},hotkeys:[{modifiers:["Mod","Shift"],key:"M"}]}),this.addCommand({id:"open-task-dashboard",name:"Open task dashboard",callback:()=>{this.openTaskDashboard()}}),this.addCommand({id:"quick-process-emails",name:"\u26A1 Quick process (last 24 hours)",callback:async()=>{let t=this.settings.lookbackTime;this.settings.lookbackTime="24h",await this.processEmails(),this.settings.lookbackTime=t}}),this.addCommand({id:"reset-processed-emails",name:"Reset processed emails",callback:async()=>{await this.resetProcessedEmails()}}),this.addCommand({id:"reprocess-meeting-note",name:"\u{1F504} Reprocess current meeting note",callback:async()=>{await this.reprocessCurrentMeetingNote()}}),this.addCommand({id:"reprocess-email-by-id",name:"\u{1F4E7} Reprocess email by ID",callback:async()=>{await this.reprocessEmailById("1995cbb7415c015f")}}),this.registerView(I,t=>new L(t,this)),this.addRibbonIcon("layout-dashboard","Open task dashboard",()=>{this.openTaskDashboard()}),await this.initializeServices(),this.addSettingTab(new O(this.app,this))}async initializeServices(){try{this.gmailService=new F(()=>this.settings.gmailToken,async e=>{this.settings.gmailToken=e,await this.saveSettings()}),this.settings.googleClientId&&this.settings.googleClientSecret?(this.gmailService.setCredentials(this.settings.googleClientId,this.settings.googleClientSecret),this.gmailService.isAuthenticated()?await this.gmailService.testConnection()?this.updateStatus("Gmail connected"):this.updateStatus("Gmail auth needed"):this.updateStatus("Gmail not authenticated")):this.updateStatus("Gmail setup needed"),this.settings.anthropicApiKey&&(this.claudeExtractor=new P(this.settings.anthropicApiKey,this.settings.claudeModel))}catch(e){console.error("Failed to initialize services:",e),new h.Notice(`Error: ${e.message}`)}}async processEmails(){console.log("[processEmails] Starting email processing");try{if(this.updateStatus("\u{1F504} Starting email processing..."),new h.Notice("\u{1F4E7} Starting email processing..."),this.emailIdCache.size===0&&this.app.vault.getMarkdownFiles().length>0&&(console.log("[processEmails] Cache empty, loading from vault..."),await this.loadEmailIdCache()),!this.gmailService){this.updateStatus("\u274C Gmail service not initialized"),new h.Notice("Gmail service not initialized");return}if(!this.gmailService.isAuthenticated()){this.updateStatus("\u274C Not authenticated"),new h.Notice("Please authenticate with Gmail first (see plugin settings)");return}let e=this.parseTimeToHours(this.settings.lookbackTime);this.updateStatus(`\u{1F50D} Searching emails (${this.settings.lookbackTime})...`),new h.Notice(`\u{1F504} Searching for meeting emails from the last ${this.settings.lookbackTime}...`);let s=await this.gmailService.fetchRecentMeetingEmails(e,this.settings.gmailLabels);if(s.length===0){this.updateStatus("\u2705 No new emails found"),new h.Notice(`\u2705 No meeting emails found in the last ${this.settings.lookbackTime}`);return}this.updateStatus(`\u{1F4CA} Found ${s.length} emails`),new h.Notice(`\u{1F4CA} Found ${s.length} meeting emails. Processing...`);let t=0,i=0,n=0,a=0,l=0;console.log(`[Process] Cache contains ${this.emailIdCache.size} processed email IDs`),console.log("[Process] First 5 cache entries:",Array.from(this.emailIdCache).slice(0,5));let r=s.filter(u=>this.emailIdCache.has(u.id)?(l++,console.log(`[Process] Skipping already processed email: ${u.id} - "${u.subject}"`),!1):(console.log(`[Process] Will process new email: ${u.id} - "${u.subject}"`),!0));console.log(`[Process] Processing ${r.length} new emails (${l} skipped)`);let c=3,d=Math.ceil(r.length/c);console.log(`[Process] Will process in ${d} batches of up to ${c} emails each`);for(let u=0;u<r.length;u+=c){let g=r.slice(u,u+c),T=Math.floor(u/c)+1,m=g.map(w=>w.subject||"Untitled").join(", "),p=this.settings.showDetailedNotifications?`\u{1F4DD} Processing: ${m.substring(0,50)}${m.length>50?"...":""}`:`\u{1F4DD} Processing batch ${T}/${d} (${g.length} emails)...`;this.updateStatus(p),console.log(`
[Process] === Starting Batch ${T}/${d} ===`),console.log(`[Process] Batch contains ${g.length} emails:`),g.forEach((w,b)=>{console.log(`[Process]   ${b+1}. ${w.subject||"No subject"} (ID: ${w.id})`)});let f=Date.now();console.log(`[Process] Starting parallel processing at ${new Date(f).toISOString()}`);let k=g.map(async(w,b)=>{let D=Date.now();console.log(`[Process] Starting email ${b+1}/${g.length}: ${w.id}`);try{let v=await this.processTranscriptEmail(w),E=Date.now()-D;if(v.success){let M=this.settings.showDetailedNotifications&&v.emailTitle?`[Process] \u2705 "${v.emailTitle}" succeeded in ${E}ms (${v.taskCount} tasks, ${v.confidence}% confidence)`:`[Process] \u2705 Email ${b+1} succeeded in ${E}ms (${v.taskCount} tasks, ${v.confidence}% confidence)`;return console.log(M),v}else{let M=this.settings.showDetailedNotifications&&w.subject?`[Process] \u274C "${w.subject.substring(0,50)}" failed in ${E}ms`:`[Process] \u274C Email ${b+1} failed in ${E}ms`;return console.log(M),null}}catch(v){let E=Date.now()-D;return console.error(`[Process] \u274C Email ${b+1} errored in ${E}ms:`,v),null}});console.log(`[Process] Waiting for all ${g.length} emails to complete...`);let y=await Promise.all(k),C=Date.now()-f,$=y.filter(w=>w&&w.success).length;console.log(`[Process] Batch ${T} complete: ${$}/${g.length} successful in ${C}ms`),console.log(`[Process] Average time per email: ${Math.round(C/g.length)}ms`);for(let w of y)w&&w.success&&(t++,i+=w.taskCount||0,n+=w.highPriorityCount||0,a++,w.taskCount&&w.taskCount>0&&(this.settings.showDetailedNotifications&&w.emailTitle?new h.Notice(`\u2705 ${w.emailTitle}: ${w.taskCount} tasks extracted`):new h.Notice(`\u2705 Batch ${T}: Created note with ${w.taskCount} tasks`)))}if(console.log(`
[Process] === Processing Complete ===`),console.log(`[Process] Notes created: ${t}`),console.log(`[Process] Total tasks: ${i}`),console.log(`[Process] High priority tasks: ${n}`),l>0&&t===0)this.updateStatus(`\u2705 All ${l} emails already processed`),new h.Notice(`\u2705 All ${l} emails were already processed`);else if(t>0){this.updateStatus(`\u2705 Created ${t} notes (${i} tasks)`);let u=`\u2705 Successfully created ${t} meeting notes with ${i} tasks`;n>0&&(u+=` (${n} high priority)`),new h.Notice(u,5e3)}else this.updateStatus("\u2705 Processing complete"),new h.Notice("\u2705 Email processing complete (no new notes created)")}catch(e){console.error("Error processing emails:",e),this.updateStatus("\u274C Error processing emails"),new h.Notice(`\u274C Error: ${e.message}`)}}async processTranscriptEmail(e){try{console.log(`[Extract] Starting processing for: ${e.subject} (ID: ${e.id})`);let s=e.body;if(typeof s=="object"&&(s=JSON.stringify(s)),!s||s==="{}"||s==="[object Object]")return console.warn("No valid email content available"),{success:!1};let t;if(this.claudeExtractor&&this.settings.anthropicApiKey){console.log(`[Extract] Starting Claude AI extraction for email ${e.id}...`);let n=Date.now();t=await this.claudeExtractor.extractTasks(s,e.subject);let a=Date.now()-n;console.log(`[Extract] Claude extraction complete in ${a}ms: ${t.tasks.length} tasks with ${t.confidence}% confidence`)}else console.log("No Claude API key, skipping task extraction"),t={tasks:[],summary:e.subject||"Meeting notes",participants:[],meetingDate:e.date?new Date(e.date):new Date,keyDecisions:[],nextSteps:[],confidence:0};let i=await this.createMeetingNote(e,t);if(i){let n=t.tasks.filter(l=>l.priority==="high").length,a=e.subject||"Untitled";return{success:!0,taskCount:t.tasks.length,highPriorityCount:n,confidence:t.confidence,obsidianPath:i,emailTitle:a.substring(0,50)}}return{success:!1}}catch(s){return console.error("Failed to process transcript email:",s),{success:!1}}}async createMeetingNote(e,s){try{let t=s.meetingDate.getFullYear(),i=String(s.meetingDate.getMonth()+1).padStart(2,"0"),n=(0,h.normalizePath)(`${this.settings.notesFolder}/${t}/${i}`),a=(0,h.normalizePath)(`${this.settings.notesFolder}/${t}`);this.app.vault.getAbstractFileByPath(a)||await this.app.vault.createFolder(a),this.app.vault.getAbstractFileByPath(n)||await this.app.vault.createFolder(n);let l=s.meetingDate.toISOString().split("T")[0],r=(e.subject||"Meeting").replace(/[\\/:*?"<>|]/g,"-").substring(0,50),c=`${l} - ${r}.md`,d=(0,h.normalizePath)(`${n}/${c}`);if(this.app.vault.getAbstractFileByPath(d))return console.log("Note already exists:",d),!1;let u=this.formatMeetingNote(e,s);return await this.app.vault.create(d,u),console.log("Created note:",d),this.emailIdCache.add(e.id),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),d}catch(t){return console.error("Failed to create note:",t),!1}}formatMeetingNote(e,s){let t=s.meetingDate.toISOString().split("T")[0],i=`---
title: ${e.subject||"Meeting Notes"}
date: ${t}
type: meeting
source: Gmail
emailId: ${e.id}
participants: [${s.participants.map(n=>`"${n}"`).join(", ")}]
confidence: ${s.confidence}
tags: [meeting, ${s.tasks.length>0?"has-tasks":"no-tasks"}]
created: ${new Date().toISOString()}
---

# ${e.subject||"Meeting Notes"}

**Date:** ${s.meetingDate.toLocaleDateString()}
**From:** ${e.from||"Unknown"}
`;if(s.participants.length>0&&(i+=`**Participants:** ${s.participants.map(n=>`[[${n}]]`).join(", ")}
`),i+=`**Confidence:** ${s.confidence}%

`,s.summary&&(i+=`## Summary
${s.summary}

`),s.keyDecisions.length>0){i+=`## Key Decisions
`;for(let n of s.keyDecisions)i+=`- ${n}
`;i+=`
`}if(s.tasks.length>0){i+=`## Action Items

`;let n=s.tasks.filter(r=>r.priority==="high"),a=s.tasks.filter(r=>r.priority==="medium"),l=s.tasks.filter(r=>r.priority==="low");if(n.length>0){i+=`### \u{1F534} High Priority
`;for(let r of n)i+=this.formatTask(r);i+=`
`}if(a.length>0){i+=`### \u{1F7E1} Medium Priority
`;for(let r of a)i+=this.formatTask(r);i+=`
`}if(l.length>0){i+=`### \u{1F7E2} Low Priority
`;for(let r of l)i+=this.formatTask(r);i+=`
`}}if(s.nextSteps.length>0){i+=`## Next Steps
`;for(let n of s.nextSteps)i+=`- ${n}
`;i+=`
`}return e.body&&(i+=`## Original Email
\`\`\`
${e.body.substring(0,1e3)}${e.body.length>1e3?"...":""}
\`\`\`
`),i+=`
---
*Imported from Gmail on ${new Date().toLocaleString()}*`,i}formatTask(e){let s=e.dueDate||this.getDefaultDueDate(),t=`- [ ] ${e.description} [[@${e.assignee}]] \u{1F4C5} ${s}`;return e.confidence<70&&(t+=` \u26A0\uFE0F ${e.confidence}%`),e.category&&e.category!=="other"&&(t+=` #${e.category}`),t+=`
`,e.context&&(t+=`  - Context: ${e.context}
`),e.rawText&&e.rawText!==e.description&&(t+=`  > "${e.rawText}"
`),t}getDefaultDueDate(){let e=new Date;return e.setDate(e.getDate()+7),e.toISOString().split("T")[0]}updateStatus(e){this.statusBarItem&&this.statusBarItem.setText(`\u{1F4E7} ${e}`)}async openTaskDashboard(){let{workspace:e}=this.app,s=e.getLeavesOfType(I);if(s.length>0)e.revealLeaf(s[0]);else{let t=e.getRightLeaf(!1);t&&(await t.setViewState({type:I,active:!0}),e.revealLeaf(t))}}async loadSettings(){let e=await this.loadData();this.settings=Object.assign({},B,e)}async saveSettings(){await this.saveData(this.settings)}async reprocessEmailById(e){try{if(console.log(`[reprocessEmailById] Reprocessing email: ${e}`),!this.gmailService||!this.gmailService.isAuthenticated()){new h.Notice("Gmail service not authenticated");return}!this.claudeExtractor&&this.settings.anthropicApiKey&&(this.claudeExtractor=new P(this.settings.anthropicApiKey,this.settings.claudeModel),console.log("[reprocessEmailById] Initialized Claude extractor")),this.updateStatus(`\u{1F504} Fetching email ${e}...`);let s=await this.gmailService.getEmailById(e);if(!s){new h.Notice(`Email ${e} not found`);return}this.emailIdCache.delete(e);let t=await this.processTranscriptEmail(s);t.success?(this.emailIdCache.add(e),this.settings.processedEmails=Array.from(this.emailIdCache),await this.saveSettings(),new h.Notice(`\u2705 Reprocessed email with ${t.taskCount||0} tasks (Confidence: ${t.confidence}%)`),this.updateStatus(`\u2705 Reprocessed with ${t.taskCount||0} tasks`)):(new h.Notice("\u274C Failed to reprocess email"),this.updateStatus("\u274C Reprocessing failed"))}catch(s){console.error("Error reprocessing email:",s),new h.Notice(`\u274C Error: ${s.message}`),this.updateStatus("\u274C Error reprocessing")}}async reprocessCurrentMeetingNote(){try{let e=this.app.workspace.getActiveFile();if(!e){new h.Notice("No active file. Please open a meeting note to reprocess.");return}let t=(await this.app.vault.read(e)).match(/^---\n([\s\S]*?)\n---/);if(!t){new h.Notice("This file does not appear to be a meeting note (no frontmatter).");return}let n=t[1].match(/emailId:\s*(.+)/);if(!n||!n[1]){new h.Notice("No email ID found in this meeting note. Cannot reprocess.");return}let a=n[1].trim();if(!confirm(`Reprocess Meeting Note?

This will fetch the original email and regenerate the summary and tasks.

Email ID: ${a}`))return;if(this.updateStatus("Reprocessing..."),new h.Notice("Fetching original email..."),!this.gmailService||!this.gmailService.isAuthenticated()){new h.Notice("Gmail not connected. Please authenticate first."),this.updateStatus("Gmail not connected");return}console.log(`Reading email with ID: ${a}`);let r=await this.gmailService.getEmailById(a);if(!r){new h.Notice("Could not find the original email. It may have been deleted."),this.updateStatus("Ready");return}console.log("Found email:",r.subject),new h.Notice("Extracting tasks and summary...");let c=r.body||r.snippet||"",d;if(this.claudeExtractor&&this.settings.anthropicApiKey)console.log("Reprocessing with Claude..."),d=await this.claudeExtractor.extractTasks(c,r.subject),console.log(`Extracted ${d.tasks.length} tasks with ${d.confidence}% confidence`);else{console.log("Claude extractor not available for reprocessing"),new h.Notice("\u274C Claude AI not configured - cannot reprocess");return}let u=this.formatMeetingNote(r,d);await this.app.vault.modify(e,u);let g=d.tasks.length,T=d.tasks.filter(m=>m.priority==="high").length;this.updateStatus(`Reprocessed: ${g} tasks`),new h.Notice(`\u2705 Reprocessed successfully! Found ${g} task${g!==1?"s":""} (${T} high priority)`)}catch(e){console.error("Failed to reprocess meeting note:",e),new h.Notice(`Error reprocessing: ${e.message}`),this.updateStatus("Error")}}async resetProcessedEmails(){console.log("Reset function called");try{if(this.updateStatus("Resetting..."),!confirm(`Reset Processed Emails?

This will clear all processed email records, allowing them to be processed again.`)){console.log("User cancelled reset"),this.updateStatus("Ready");return}console.log("User confirmed reset"),new h.Notice("Resetting processed emails..."),this.emailIdCache.clear(),this.settings.processedEmails=[],await this.saveSettings(),await this.loadEmailIdCache(),new h.Notice("\u2705 Cache refreshed. Existing notes will prevent duplicate processing."),this.updateStatus("Ready")}catch(e){console.error("Reset failed:",e),new h.Notice(`Reset failed: ${e.message}`),this.updateStatus("Error")}}onunload(){console.log("Unloading Meeting Tasks Plugin...")}},O=class extends h.PluginSettingTab{constructor(o,e){super(o,e),this.plugin=e}display(){var a,l;let{containerEl:o}=this;o.empty(),o.createEl("h2",{text:"Meeting Tasks Settings"}),o.createEl("h3",{text:"Google OAuth Settings"}),o.createEl("p",{text:"Create OAuth credentials in Google Cloud Console. Follow the guide for detailed instructions.",cls:"setting-item-description"}),new h.Setting(o).setName("Google Client ID").setDesc("Your Google OAuth Client ID (from Google Cloud Console)").addText(r=>r.setPlaceholder("1234567890-abc...apps.googleusercontent.com").setValue(this.plugin.settings.googleClientId).onChange(async c=>{this.plugin.settings.googleClientId=c,await this.plugin.saveSettings(),await this.plugin.initializeServices()})),new h.Setting(o).setName("Google Client Secret").setDesc("Your Google OAuth Client Secret").addText(r=>(r.setPlaceholder("GOCSPX-...").setValue(this.plugin.settings.googleClientSecret).onChange(async c=>{this.plugin.settings.googleClientSecret=c,await this.plugin.saveSettings(),await this.plugin.initializeServices()}),r.inputEl.type="password",r)),o.createEl("h3",{text:"Gmail Authentication"});let e=o.createEl("p",{text:"\u23F3 Checking authentication status...",cls:"mod-warning setting-item-description"}),s=()=>{if(!this.plugin.gmailService){e.textContent="\u274C Gmail service not initialized",e.className="mod-warning setting-item-description";return}this.plugin.gmailService.isAuthenticated()?this.plugin.gmailService.hasRefreshToken()?(e.textContent="\u2705 Authenticated with Gmail",e.className="mod-success setting-item-description"):(e.textContent="\u26A0\uFE0F Authenticated but missing refresh token",e.className="mod-warning setting-item-description"):(e.textContent="\u274C Not authenticated with Gmail",e.className="mod-warning setting-item-description")};s(),new h.Setting(o).setName("Authenticate with Gmail").setDesc("Click to start the Gmail authentication process").addButton(r=>{var d;let c=r;(d=this.plugin.gmailService)!=null&&d.isAuthenticated()?c.setButtonText("Re-authenticate"):c.setButtonText("Authenticate"),c.onClick(async()=>{var u;if(!this.plugin.gmailService){new h.Notice("Please configure Client ID and Secret first");return}try{if(this.plugin.oauthServer||(this.plugin.oauthServer=new R),!this.plugin.oauthServer.isRunning())try{await this.plugin.oauthServer.start(),new h.Notice("Starting authentication server...")}catch(y){new h.Notice(`Failed to start OAuth server: ${y.message}`);return}let g=this.plugin.oauthServer.getRedirectUri();this.plugin.gmailService.setCredentials(this.plugin.settings.googleClientId,this.plugin.settings.googleClientSecret,g);let T=this.plugin.gmailService.getAuthorizationUrl();window.open(T,"_blank");let m=new h.Modal(this.app);m.contentEl.addClass("gmail-auth-modal"),m.contentEl.createEl("h2",{text:"\u{1F510} Authenticating with Gmail..."});let p=m.contentEl.createDiv("auth-instructions");p.createEl("p",{text:"Please complete the authorization in your browser."}),p.createEl("p",{text:"This window will close automatically when authentication is complete."});let f=m.contentEl.createDiv("auth-loading");f.style.textAlign="center",f.style.marginTop="20px",f.createEl("span",{text:"\u23F3 Waiting for authorization..."});let k=m.contentEl.createEl("button",{text:"Cancel",cls:"auth-cancel-btn"});k.style.marginTop="20px",k.onclick=async()=>{var y;m.close(),await((y=this.plugin.oauthServer)==null?void 0:y.stop())},m.open();try{let y=await this.plugin.oauthServer.waitForAuthCode();if(!y){new h.Notice("No authorization code received"),m.close(),await this.plugin.oauthServer.stop();return}m.close(),new h.Notice("Processing authentication..."),await this.plugin.gmailService.exchangeCodeForToken(y),new h.Notice("\u2705 Successfully authenticated with Gmail!"),s(),await this.plugin.initializeServices(),await this.plugin.oauthServer.stop(),c.setButtonText("Re-authenticate")}catch(y){m.close(),console.error("Authentication error:",y),new h.Notice(`Authentication failed: ${y.message}`),await((u=this.plugin.oauthServer)==null?void 0:u.stop())}}catch(g){new h.Notice(`Failed to start authentication: ${g.message}`)}})}),new h.Setting(o).setName("Clear authentication").setDesc("Remove stored Gmail authentication").addButton(r=>r.setButtonText("Clear").setWarning().onClick(async()=>{var c;(c=this.plugin.gmailService)==null||c.clearAuthentication(),this.plugin.settings.gmailToken=null,await this.plugin.saveSettings(),new h.Notice("Gmail authentication cleared"),s()})),o.createEl("h3",{text:"Email Processing"}),new h.Setting(o).setName("Lookback time").setDesc("How far back to search. Examples: 6h (6 hours), 3d (3 days), 2w (2 weeks), 1M (1 month)").addText(r=>r.setPlaceholder("5d").setValue(this.plugin.settings.lookbackTime||"5d").onChange(async c=>{let d=this.plugin.parseTimeToHours(c);d>0&&(this.plugin.settings.lookbackTime=c,this.plugin.settings.lookbackHours=d,await this.plugin.saveSettings())})),new h.Setting(o).setName("Gmail Labels").setDesc("Gmail labels to filter emails (comma-separated)").addText(r=>r.setPlaceholder("transcript").setValue(this.plugin.settings.gmailLabels).onChange(async c=>{this.plugin.settings.gmailLabels=c||"transcript",await this.plugin.saveSettings()})),o.createEl("h3",{text:"Claude AI Settings"}),new h.Setting(o).setName("Anthropic API Key").setDesc("Your Claude API key for task extraction").addText(r=>r.setPlaceholder("sk-ant-...").setValue(this.plugin.settings.anthropicApiKey).onChange(async c=>{this.plugin.settings.anthropicApiKey=c,await this.plugin.saveSettings(),c&&(this.plugin.claudeExtractor=new P(c,this.plugin.settings.claudeModel))})),new h.Setting(o).setName("Claude Model").setDesc("Which Claude model to use").addDropdown(r=>r.addOption("claude-3-5-haiku-20241022","Claude 3.5 Haiku (Fast & Cheap)").addOption("claude-sonnet-4-20250514","Claude Sonnet 4 (Balanced)").addOption("claude-opus-4-1-20250805","Claude Opus 4.1 (Most Capable)").setValue(this.plugin.settings.claudeModel).onChange(async c=>{this.plugin.settings.claudeModel=c,await this.plugin.saveSettings()})),o.createEl("h3",{text:"Obsidian Settings"}),new h.Setting(o).setName("Notes folder").setDesc("Where to create meeting notes").addText(r=>r.setPlaceholder("Meetings").setValue(this.plugin.settings.notesFolder).onChange(async c=>{this.plugin.settings.notesFolder=c,await this.plugin.saveSettings()})),o.createEl("h3",{text:"Dashboard Settings"}),new h.Setting(o).setName("Show only my tasks").setDesc("Filter dashboard to show only tasks assigned to you").addToggle(r=>r.setValue(this.plugin.settings.dashboardShowOnlyMyTasks).onChange(async c=>{this.plugin.settings.dashboardShowOnlyMyTasks=c,await this.plugin.saveSettings()})),new h.Setting(o).setName("My name(s)").setDesc("Your name(s) for filtering tasks (comma-separated)").addText(r=>r.setPlaceholder("Your name, other name").setValue(this.plugin.settings.dashboardMyName).onChange(async c=>{this.plugin.settings.dashboardMyName=c,await this.plugin.saveSettings()})),o.createEl("h3",{text:"Notification Settings"}),new h.Setting(o).setName("Show detailed notifications").setDesc("Show email titles in status messages while processing").addToggle(r=>r.setValue(this.plugin.settings.showDetailedNotifications).onChange(async c=>{this.plugin.settings.showDetailedNotifications=c,await this.plugin.saveSettings()})),o.createEl("h3",{text:"Actions"}),new h.Setting(o).setName("Process emails now").setDesc("Search for meeting emails and create notes").addButton(r=>r.setButtonText("Process").setCta().onClick(async()=>{await this.plugin.processEmails()})),new h.Setting(o).setName("Reset processed emails").setDesc("Clear the list of already processed emails").addButton(r=>r.setButtonText("Reset").setWarning().onClick(async()=>{await this.plugin.resetProcessedEmails()}));let t=o.createDiv("status-info"),i=(a=this.plugin.gmailService)!=null&&a.isAuthenticated()?"\u2705 Gmail authenticated":"\u274C Gmail not authenticated",n=this.plugin.settings.anthropicApiKey?"\u2705 Claude AI configured":"\u26A0\uFE0F Claude AI not configured";t.createEl("p",{text:i,cls:(l=this.plugin.gmailService)!=null&&l.isAuthenticated()?"mod-success":"mod-warning"}),t.createEl("p",{text:n,cls:this.plugin.settings.anthropicApiKey?"mod-success":"mod-warning"})}};
